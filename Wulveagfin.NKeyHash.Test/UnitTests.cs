namespace Tests
{
    public partial class UnitTests
	{
		[SetUp]
		public void Setup()
		{
		}

		[TestCase(false, 0.989369799843696, -7480)]
		[TestCase(true, 0.70103245494004, 3263)]
		[TestCase(false, 0.77780861117775, -883)]
		[TestCase(false, 0.455717258833217, -5560)]
		[TestCase(false, 0.443961874322948, -6038)]
		[TestCase(true, 0.782581264517541, -2922)]
		[TestCase(true, 0.200991312135473, -6562)]
		[TestCase(false, 0.294134031652535, 8451)]
		[TestCase(true, 0.379466614396994, 1082)]
		[TestCase(false, 0.168166993729848, -1526)]
		public void Add(bool a, double b, long val)
		{
			NKeyHash<bool, double, long> nKeyHash = new NKeyHash<bool, double, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b));

			nKeyHash = new NKeyHash<bool, double, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b));

			nKeyHash = new NKeyHash<bool, double, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b));

			nKeyHash = new NKeyHash<bool, double, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b));
		}

		[TestCase(0.461748046549851, -9858, 8457, -3280)]
		[TestCase(0.630466735749723, -7327, 6012, -6130)]
		[TestCase(0.365906837566712, 934, 5293, 6551)]
		[TestCase(0.423608680918631, 3138, -5668, 871)]
		[TestCase(0.739798611374478, -6578, 681, 33)]
		[TestCase(0.750111113651707, -997, 9163, 3904)]
		[TestCase(0.203315308877879, -7118, -3568, -7818)]
		[TestCase(0.030876331977023, 2192, -9355, -3215)]
		[TestCase(0.79389610411315, 2436, 1457, -1261)]
		[TestCase(0.275114006025304, -5980, -6957, -5594)]
		public void Upsert(double a, long b, long val, long newVal1)
		{
			NKeyHash<double, long, long> nKeyHash = new NKeyHash<double, long, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b));
			nKeyHash.Upsert(a, b, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b));

			nKeyHash = new NKeyHash<double, long, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b));
			nKeyHash.Upsert(a, b, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b));

			nKeyHash = new NKeyHash<double, long, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b));
			nKeyHash.Upsert(a, b, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b));

			nKeyHash = new NKeyHash<double, long, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b));
			nKeyHash.Upsert(a, b, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b));
		}

		[TestCase(1739, true, 0.095029338772888)]
		[TestCase(-3583, true, 0.337585684069239)]
		[TestCase(2985, false, 0.252627322567919)]
		[TestCase(-1845, false, 0.850019168504523)]
		[TestCase(-9766, false, 0.22770190296122)]
		[TestCase(-7346, false, 0.812046289822108)]
		[TestCase(3832, false, 0.75626522011881)]
		[TestCase(291, false, 0.0336978323914566)]
		[TestCase(6035, false, 0.779613365782245)]
		[TestCase(-4629, true, 0.01892456552895)]
		public void Delete(long a, bool b, double val)
		{
			NKeyHash<long, bool, double> nKeyHash = new NKeyHash<long, bool, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Delete(a, b);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));

			nKeyHash = new NKeyHash<long, bool, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Delete(a, b);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));

			nKeyHash = new NKeyHash<long, bool, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Delete(a, b);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));

			nKeyHash = new NKeyHash<long, bool, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Delete(a, b);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));
		}

		[TestCase(2883, -2575, -6682)]
		[TestCase(-7833, 6463, 1980)]
		[TestCase(5428, -2368, -6373)]
		[TestCase(5590, 8629, 2674)]
		[TestCase(5435, 1225, -2237)]
		[TestCase(-9050, -8633, 3313)]
		[TestCase(-1835, -9589, 6899)]
		[TestCase(-9005, -8550, -7921)]
		[TestCase(-8772, 380, 2769)]
		[TestCase(1159, -2383, 7789)]
		public void Remove(short a, long b, long val)
		{
			NKeyHash<short, long, long> nKeyHash = new NKeyHash<short, long, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Remove(a, b);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));

			nKeyHash = new NKeyHash<short, long, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Remove(a, b);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));

			nKeyHash = new NKeyHash<short, long, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Remove(a, b);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));

			nKeyHash = new NKeyHash<short, long, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Remove(a, b);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));
		}

		[TestCase(-7849, false, 3551)]
		[TestCase(-8761, false, 3264)]
		[TestCase(-5739, true, 5618)]
		[TestCase(1499, true, -119)]
		[TestCase(-2000, false, 455)]
		[TestCase(-2170, false, -588)]
		[TestCase(-2934, true, 5381)]
		[TestCase(7949, true, -4024)]
		[TestCase(-8760, false, -3916)]
		[TestCase(9209, false, -9983)]
		public void ContainsKey(short a, bool b, short val)
		{
			NKeyHash<short, bool, short> nKeyHash = new NKeyHash<short, bool, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Delete(a, b);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));

			nKeyHash = new NKeyHash<short, bool, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Delete(a, b);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));

			nKeyHash = new NKeyHash<short, bool, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Delete(a, b);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));

			nKeyHash = new NKeyHash<short, bool, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Delete(a, b);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));
		}

		[TestCase(-4735, 3286, 0.193824249409989)]
		[TestCase(4210, 9709, 0.0439587896894472)]
		[TestCase(-9950, -6095, 0.100292308768394)]
		[TestCase(-8717, -505, 0.33744120380722)]
		[TestCase(2197, 3227, 0.489057412133113)]
		[TestCase(-7684, -6669, 0.159743008743852)]
		[TestCase(-1620, 7608, 0.188201265962888)]
		[TestCase(2029, -5800, 0.772976352261834)]
		[TestCase(-2423, 9997, 0.977391198732607)]
		[TestCase(-2817, -4949, 0.706696753719215)]
		public void Clear(short a, int b, double val)
		{
			NKeyHash<short, int, double> nKeyHash = new NKeyHash<short, int, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));
			Assert.AreEqual(nKeyHash.Count(a), 0);

			nKeyHash = new NKeyHash<short, int, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));
			Assert.AreEqual(nKeyHash.Count(a), 0);

			nKeyHash = new NKeyHash<short, int, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));
			Assert.AreEqual(nKeyHash.Count(a), 0);

			nKeyHash = new NKeyHash<short, int, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b));
			Assert.AreEqual(nKeyHash.Count(a), 0);
		}

		[TestCase(3126, -7264, false)]
		[TestCase(-3421, 3618, false)]
		[TestCase(-1467, -2982, true)]
		[TestCase(3375, 6668, false)]
		[TestCase(9225, -958, false)]
		[TestCase(6301, 6894, false)]
		[TestCase(6819, 7455, true)]
		[TestCase(2988, 3233, false)]
		[TestCase(-1582, -3364, true)]
		[TestCase(-8667, 2865, true)]
		public void Get(long a, short b, bool val)
		{
			NKeyHash<long, short, bool> nKeyHash = new NKeyHash<long, short, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));

			nKeyHash = new NKeyHash<long, short, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));

			nKeyHash = new NKeyHash<long, short, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));

			nKeyHash = new NKeyHash<long, short, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b));
		}

		[TestCase(-7033, 9069, true)]
		[TestCase(-7531, 5735, false)]
		[TestCase(8483, 9845, true)]
		[TestCase(-445, 8652, false)]
		[TestCase(3063, -1650, true)]
		[TestCase(1836, 880, false)]
		[TestCase(3193, 8782, false)]
		[TestCase(475, -9861, false)]
		[TestCase(8224, 8160, false)]
		[TestCase(-5000, -2799, true)]
		public void TryGetValue(short a, short b, bool val)
		{
			bool fetch;
			bool b1;
			NKeyHash<short, short, bool> nKeyHash = new NKeyHash<short, short, bool>(UnderlyingHashType.Dictionary);
			b1 = nKeyHash.TryGetValue(a, b, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(bool));
			nKeyHash.Add(a, b, val);
			b1 = nKeyHash.TryGetValue(a, b, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<short, short, bool>(UnderlyingHashType.ConcurrentDictionary);
			b1 = nKeyHash.TryGetValue(a, b, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(bool));
			nKeyHash.Add(a, b, val);
			b1 = nKeyHash.TryGetValue(a, b, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<short, short, bool>(UnderlyingHashType.SortedDictionary);
			b1 = nKeyHash.TryGetValue(a, b, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(bool));
			nKeyHash.Add(a, b, val);
			b1 = nKeyHash.TryGetValue(a, b, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<short, short, bool>(UnderlyingHashType.HashTable);
			b1 = nKeyHash.TryGetValue(a, b, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(bool));
			nKeyHash.Add(a, b, val);
			b1 = nKeyHash.TryGetValue(a, b, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);
		}

		[TestCase(new double[] { 0.928295846529443, 0.813049713062611, 0.498541568172416, 0.860940868435866, 0.691691902788212, 0.057945010744941, 0.56141453122786, 0.916819646915803, 0.88047110190637, 0.135801822010335 }, new int[] { -6564, 4580, -8441, 5352, 8284, -1245, -505, -8013, 698, 4677 }, new long[] { -3105, 5620, 2490, 8931, -9007, -5757, 7573, -7271, 3485, 2646 })]
		[TestCase(new double[] { 0.822056067558963, 0.70995078175792, 0.657456850939177, 0.826888992836182, 0.724907398561438, 0.604431741686739, 0.0493313232666493, 0.730883436152192, 0.852322048438863, 0.349790965369805 }, new int[] { -8033, -9552, 598, -2240, 6702, 4919, 6667, -7190, -1301, 6243 }, new long[] { 7704, 2164, -5342, 826, -5901, -7054, -6228, 1038, 6226, -408 })]
		[TestCase(new double[] { 0.179207850796733, 0.425022668403118, 0.242544231583618, 0.248154299449247, 0.313745754451373, 0.461774766660191, 0.0715850522143697, 0.250998325762804, 0.0427372534958354, 0.309828577707442 }, new int[] { -2231, 4876, -5060, -6296, 2711, -3552, -4976, -5268, -7769, -3928 }, new long[] { -2425, 4765, 4029, 7240, 4940, -5723, -457, -7676, 2439, 1553 })]
		[TestCase(new double[] { 0.41590237776558, 0.497425556880154, 0.919516214597745, 0.372748238673782, 0.170583114573072, 0.673272047505375, 0.77979610943226, 0.281779606026495, 0.0742127020257584, 0.373387338301813 }, new int[] { 3488, 1647, -8045, -7497, -1523, -7170, -2774, -9045, 8113, 7649 }, new long[] { 7920, 9038, -1191, 156, -7982, -1181, 4470, -2390, 22, -8000 })]
		[TestCase(new double[] { 0.98466750419916, 0.955452304312704, 0.62899988453323, 0.465053448204442, 0.893926199941862, 0.890968030733507, 0.824343635618847, 0.874220113211414, 0.0145684098892698, 0.962319544498958 }, new int[] { 851, 9386, -6752, 4761, 2582, 5925, 2811, 1527, -1234, 2111 }, new long[] { 7049, -1411, -5791, 4789, 3631, -721, -8859, -1765, -4561, 4593 })]
		[TestCase(new double[] { 0.949720448790919, 0.399317308514992, 0.780653701527349, 0.974271007335871, 0.388719834102653, 0.718973119146644, 0.953396934528554, 0.632648294620518, 0.231166015486776, 0.532848366318666 }, new int[] { -3657, -258, -9336, 8867, -3200, 8533, 5791, 4046, 7572, -3909 }, new long[] { 6005, -7055, 8843, 7909, -5051, 1104, 4900, 7789, 5668, -1400 })]
		[TestCase(new double[] { 0.833974543415929, 0.412631471367847, 0.602322736104169, 0.284894982485517, 0.0125990957080382, 0.14325377025793, 0.188705040229813, 0.188078183302692, 0.349366524419452, 0.91016462860171 }, new int[] { 6857, -9840, -3095, 8107, -4229, -2690, -2073, -4659, -2009, 5096 }, new long[] { 3485, -2906, 660, 9346, 8586, 6050, -858, 7701, 4536, 6668 })]
		[TestCase(new double[] { 0.973921051702425, 0.0638721278234721, 0.849193406221081, 0.801174722053658, 0.698873822902736, 0.904453450303736, 0.884740806596699, 0.748228602459761, 0.930813870826184, 0.196698514370573 }, new int[] { 4759, 2030, -2940, 9369, -768, 5846, 6038, -9262, 2140, 7638 }, new long[] { -6820, -438, -199, -9427, 5112, -413, 7590, 2698, -2889, -5798 })]
		[TestCase(new double[] { 0.686166229046027, 0.303577405541938, 0.461228466807505, 0.515898926889477, 0.936243576899284, 0.779057066784733, 0.158754719960855, 0.544038116719591, 0.206526844392776, 0.384061465684353 }, new int[] { -385, 2960, -3276, -5942, -9662, -8543, -9965, 1290, 115, -7259 }, new long[] { -9987, -1594, -4437, 6897, 3489, -82, 1477, 6411, -9089, -5608 })]
		[TestCase(new double[] { 0.0248678405884969, 0.249790715169995, 0.39269378101113, 0.720762479454634, 0.510532285324546, 0.434444057957476, 0.140311630508076, 0.837080259731542, 0.0322580970973978, 0.682538471036841 }, new int[] { 2671, -4841, 6605, -5540, -1974, 217, -7161, -4256, -9764, 3657 }, new long[] { -446, -3698, -7415, -5628, -5810, -4681, -9489, 2326, 6827, -1192 })]
		public void Count(double[] a, int[] b, long[] val)
		{
			NKeyHash<double, int, long> nKeyHash = new NKeyHash<double, int, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],val[0]);
			nKeyHash.Add(a[0],b[1],val[1]);
			nKeyHash.Add(a[0],b[2],val[2]);
			nKeyHash.Add(a[0],b[3],val[3]);
			nKeyHash.Add(a[0],b[4],val[4]);
			nKeyHash.Add(a[0],b[5],val[5]);
			nKeyHash.Add(a[0],b[6],val[6]);
			nKeyHash.Add(a[0],b[7],val[7]);
			nKeyHash.Add(a[0],b[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0]), 9);

			nKeyHash = new NKeyHash<double, int, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],val[0]);
			nKeyHash.Add(a[0],b[1],val[1]);
			nKeyHash.Add(a[0],b[2],val[2]);
			nKeyHash.Add(a[0],b[3],val[3]);
			nKeyHash.Add(a[0],b[4],val[4]);
			nKeyHash.Add(a[0],b[5],val[5]);
			nKeyHash.Add(a[0],b[6],val[6]);
			nKeyHash.Add(a[0],b[7],val[7]);
			nKeyHash.Add(a[0],b[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0]), 9);

			nKeyHash = new NKeyHash<double, int, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],val[0]);
			nKeyHash.Add(a[0],b[1],val[1]);
			nKeyHash.Add(a[0],b[2],val[2]);
			nKeyHash.Add(a[0],b[3],val[3]);
			nKeyHash.Add(a[0],b[4],val[4]);
			nKeyHash.Add(a[0],b[5],val[5]);
			nKeyHash.Add(a[0],b[6],val[6]);
			nKeyHash.Add(a[0],b[7],val[7]);
			nKeyHash.Add(a[0],b[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0]), 9);

			nKeyHash = new NKeyHash<double, int, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],val[0]);
			nKeyHash.Add(a[0],b[1],val[1]);
			nKeyHash.Add(a[0],b[2],val[2]);
			nKeyHash.Add(a[0],b[3],val[3]);
			nKeyHash.Add(a[0],b[4],val[4]);
			nKeyHash.Add(a[0],b[5],val[5]);
			nKeyHash.Add(a[0],b[6],val[6]);
			nKeyHash.Add(a[0],b[7],val[7]);
			nKeyHash.Add(a[0],b[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0]), 9);
		}

		[TestCase(new short[] { 9738, -2815, -5380, -4892, 2307, 3845, 1647, 8648, -6707, 645 }, new short[] { 6464, 67, 4852, 1798, -8895, -1127, -6727, -2920, -4265, 6176 }, new int[] { -2747, 4837, 4196, -7586, -6516, 225, -5106, -1820, 479, 9912 })]
		[TestCase(new short[] { 1837, -452, -4090, 5187, 6865, 7274, -6592, -4888, 529, 1897 }, new short[] { -1413, 5008, -3738, 5654, -3880, 4302, -663, 3518, 9404, -6545 }, new int[] { 3555, -8270, 8369, 585, -7280, -5097, 2987, -7793, -8374, -7916 })]
		[TestCase(new short[] { -1046, -6530, -1829, -6621, 8807, -3081, -5841, 9664, 4932, -6171 }, new short[] { -4533, 8160, 6549, 3835, -2408, 2243, -1423, 8540, 6293, -819 }, new int[] { -9109, 1373, -1226, -2974, -3641, 108, 1177, 5323, 2468, 1964 })]
		[TestCase(new short[] { -5711, -8798, -6513, -1552, -7054, -4881, -3160, -7115, 6846, 9200 }, new short[] { 144, -329, 8585, 5577, 7987, 5393, -4820, -5465, -7005, 475 }, new int[] { 6324, 4445, -4087, 2444, -8806, 7579, 4694, -8854, 7019, -1300 })]
		[TestCase(new short[] { 5740, -1165, -2803, -7031, 9539, -5733, 4674, -1897, 891, -7526 }, new short[] { -4594, -4306, -8304, 7092, 9034, 1219, 2786, 3195, -962, 964 }, new int[] { -5069, -3356, 2329, -8005, 5638, -158, 5287, 1041, -2744, -4635 })]
		[TestCase(new short[] { 423, -4305, -4136, -1852, -6539, -8688, -7525, 5617, 6036, 3721 }, new short[] { -9280, 7075, 3641, -9477, -4928, 632, 2751, -1180, 3408, -27 }, new int[] { -5206, -8500, 2107, -3943, -6230, -902, 6503, -4796, -2670, -301 })]
		[TestCase(new short[] { -1021, -6365, -9151, -4472, 2049, 9709, 9828, 3546, 3632, 7724 }, new short[] { -1253, 7168, 7158, 5314, 245, -2146, 3001, 1808, 6922, -4992 }, new int[] { 7089, -3531, 7632, 7281, -9427, -1075, 3586, 9806, -5621, 4362 })]
		[TestCase(new short[] { -5193, 7269, -1710, -3660, -5255, 7084, 6228, -1885, -1528, -4639 }, new short[] { 802, 9203, 5186, 5683, -8772, -2375, -5659, 6791, 5809, 5914 }, new int[] { 6095, -5303, -1719, -7677, 2607, -7489, -3998, -6434, -5043, -6874 })]
		[TestCase(new short[] { -3875, -9977, -831, 9268, 2918, 1475, -1120, 820, 571, 3159 }, new short[] { 1624, -5112, -6662, 1562, 4203, 7885, 1280, -8050, 6055, 2947 }, new int[] { -5414, 6794, -6001, -1536, 8266, -9889, -1009, -4032, 3730, -7765 })]
		[TestCase(new short[] { 1084, 2664, -6840, -4652, 9235, 781, 35, 5917, -7234, -249 }, new short[] { 8743, 3519, -3779, -7349, -5708, 1209, -8639, 6716, -1881, 4721 }, new int[] { 1229, -5947, -2491, 2007, 8538, -671, 6023, -9293, -8997, 2809 })]
		public void Any(short[] a, short[] b, int[] val)
		{
			NKeyHash<short, short, int> nKeyHash = new NKeyHash<short, short, int>(UnderlyingHashType.Dictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],val[0]);
			nKeyHash.Add(a[1],b[1],val[1]);
			nKeyHash.Add(a[2],b[2],val[2]);
			nKeyHash.Add(a[3],b[3],val[3]);
			nKeyHash.Add(a[4],b[4],val[4]);
			nKeyHash.Add(a[5],b[5],val[5]);
			nKeyHash.Add(a[6],b[6],val[6]);
			nKeyHash.Add(a[7],b[7],val[7]);
			nKeyHash.Add(a[8],b[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<short, short, int>(UnderlyingHashType.ConcurrentDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],val[0]);
			nKeyHash.Add(a[1],b[1],val[1]);
			nKeyHash.Add(a[2],b[2],val[2]);
			nKeyHash.Add(a[3],b[3],val[3]);
			nKeyHash.Add(a[4],b[4],val[4]);
			nKeyHash.Add(a[5],b[5],val[5]);
			nKeyHash.Add(a[6],b[6],val[6]);
			nKeyHash.Add(a[7],b[7],val[7]);
			nKeyHash.Add(a[8],b[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<short, short, int>(UnderlyingHashType.SortedDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],val[0]);
			nKeyHash.Add(a[1],b[1],val[1]);
			nKeyHash.Add(a[2],b[2],val[2]);
			nKeyHash.Add(a[3],b[3],val[3]);
			nKeyHash.Add(a[4],b[4],val[4]);
			nKeyHash.Add(a[5],b[5],val[5]);
			nKeyHash.Add(a[6],b[6],val[6]);
			nKeyHash.Add(a[7],b[7],val[7]);
			nKeyHash.Add(a[8],b[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<short, short, int>(UnderlyingHashType.HashTable);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],val[0]);
			nKeyHash.Add(a[1],b[1],val[1]);
			nKeyHash.Add(a[2],b[2],val[2]);
			nKeyHash.Add(a[3],b[3],val[3]);
			nKeyHash.Add(a[4],b[4],val[4]);
			nKeyHash.Add(a[5],b[5],val[5]);
			nKeyHash.Add(a[6],b[6],val[6]);
			nKeyHash.Add(a[7],b[7],val[7]);
			nKeyHash.Add(a[8],b[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());
		}

		[TestCase(new short[] { -1661, -7923, 8958, -8271, 7989, 2326, -6576, -2148, 5362, 9182 }, new short[] { -3694, 4202, 1065, 574, -8651, -5827, -2941, 8749, 2272, 7848 }, new double[] { 0.950450116745406, 0.550212580966862, 0.351629034314132, 0.257827135388659, 0.557557160294408, 0.34034852745959, 0.495373057897842, 0.737849144608643, 0.466470833153683, 0.74580681544999 })]
		[TestCase(new short[] { -44, -2734, 5832, 6429, 7881, -9424, -4668, -518, -6630, -5608 }, new short[] { -5303, -3129, 5866, -5130, -8796, 7804, -2525, 8752, 4676, 6533 }, new double[] { 0.697191781689037, 0.702952164086957, 0.510619351412458, 0.253148908844753, 0.904030781660243, 0.866694001418862, 0.752153959009868, 0.690158309270702, 0.528823419720318, 0.559158206712063 })]
		[TestCase(new short[] { -7580, -1334, 8520, -9552, -772, 9039, 8369, 4635, 2692, -9226 }, new short[] { 8839, 7575, 5380, -2117, 3152, 2138, 5136, -7835, -6045, 3345 }, new double[] { 0.96664152292844, 0.557681124451422, 0.00400246912799891, 0.639779465105282, 0.0486150337609532, 0.794832881444522, 0.852657085215979, 0.538486969907995, 0.917461165654222, 0.0273988940880629 })]
		[TestCase(new short[] { -4468, 1527, 8904, 2185, -8027, 6029, -1651, 5419, 5640, -7836 }, new short[] { 9433, 2838, -3938, 3903, 7692, 6366, 8676, -7668, 1909, -4057 }, new double[] { 0.10982306725803, 0.643952817490302, 0.492468983164276, 0.861513687698875, 0.592516683783623, 0.563269161415877, 0.429271973403763, 0.286305249801979, 0.973706492210602, 0.666554764689205 })]
		[TestCase(new short[] { -8012, -2399, 6285, 2144, 5241, -2686, 8670, -6803, -4089, 7121 }, new short[] { -6209, 9716, -3476, -8208, 3911, -3505, -4906, -3823, 5102, -5394 }, new double[] { 0.860945295012065, 0.736133407678517, 0.942992879516907, 0.620355282733382, 0.917575826830033, 0.632613595404017, 0.083931829819424, 0.0837393240461775, 0.0167805827300905, 0.535329006395922 })]
		[TestCase(new short[] { -2554, -7376, 5945, -7689, -9823, 1833, 6551, 3915, 8661, 380 }, new short[] { 7694, 5481, 6419, 4786, -7846, -7519, -3643, -1941, -6680, -4643 }, new double[] { 0.308622921029396, 0.120468635168145, 0.53117332492544, 0.743452472958459, 0.80560946967714, 0.363206823991242, 0.437033781519641, 0.193973296877916, 0.689682328463384, 0.129467536289928 })]
		[TestCase(new short[] { -4365, 6996, -7139, 5202, -322, -8832, -6228, -5785, -8384, -7921 }, new short[] { -57, 1177, -2486, -5276, -3090, -8262, 8301, -5926, 254, 5871 }, new double[] { 0.31482167277244, 0.68101168036508, 0.917801571040322, 0.748988162609277, 0.226706085366526, 0.251779588987948, 0.599961928371322, 0.0538611556654149, 0.309876012294495, 0.645593436735493 })]
		[TestCase(new short[] { -6905, 2672, -9877, 6072, -5253, -9300, 2622, -8781, -4890, -9013 }, new short[] { 8707, -7856, -3556, -8757, 5412, 4994, 4895, -4098, -2040, 4375 }, new double[] { 0.448099587786989, 0.233400371500012, 0.681239501424711, 0.896078755565024, 0.814645863517488, 0.600699504651455, 0.932036860348674, 0.393998565801419, 0.53346241430075, 0.232106807749768 })]
		[TestCase(new short[] { -832, -7305, 8015, -1296, 8983, 7269, 1055, 1440, 9975, -3789 }, new short[] { -886, 7084, 8962, -730, 7162, -5845, -2822, 7113, 9565, -460 }, new double[] { 0.506996292856986, 0.304916002929637, 0.655879442885462, 0.59109156233775, 0.197493848948504, 0.921272983272221, 0.952375881351706, 0.110015644743115, 0.989004599391019, 0.636593835724794 })]
		[TestCase(new short[] { -7941, -5256, 547, -9531, 1817, 6014, -5873, 7739, -7741, 8141 }, new short[] { -6059, -6544, -4075, -8250, -4737, 1876, -4294, -5643, -9240, 2138 }, new double[] { 0.241859400757523, 0.076304243913062, 0.415667239304477, 0.0565097383486618, 0.725110514892782, 0.15347121104294, 0.478796586151606, 0.309707838254845, 0.2376612872992, 0.0279224603566911 })]
		public void Forloop(short[] a, short[] b, double[] val)
		{
			bool[] found = new bool[9];
			bool allFound = false;
			NKeyHash<short, short, double> nKeyHash = new NKeyHash<short, short, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],val[0]);
			nKeyHash.Add(a[1],b[1],val[1]);
			nKeyHash.Add(a[2],b[2],val[2]);
			nKeyHash.Add(a[3],b[3],val[3]);
			nKeyHash.Add(a[4],b[4],val[4]);
			nKeyHash.Add(a[5],b[5],val[5]);
			nKeyHash.Add(a[6],b[6],val[6]);
			nKeyHash.Add(a[7],b[7],val[7]);
			nKeyHash.Add(a[8],b[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, short, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7]);
			nKeyHash.Remove(a[8],b[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, short, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<short, short, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],val[0]);
			nKeyHash.Add(a[1],b[1],val[1]);
			nKeyHash.Add(a[2],b[2],val[2]);
			nKeyHash.Add(a[3],b[3],val[3]);
			nKeyHash.Add(a[4],b[4],val[4]);
			nKeyHash.Add(a[5],b[5],val[5]);
			nKeyHash.Add(a[6],b[6],val[6]);
			nKeyHash.Add(a[7],b[7],val[7]);
			nKeyHash.Add(a[8],b[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, short, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7]);
			nKeyHash.Remove(a[8],b[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, short, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<short, short, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],val[0]);
			nKeyHash.Add(a[1],b[1],val[1]);
			nKeyHash.Add(a[2],b[2],val[2]);
			nKeyHash.Add(a[3],b[3],val[3]);
			nKeyHash.Add(a[4],b[4],val[4]);
			nKeyHash.Add(a[5],b[5],val[5]);
			nKeyHash.Add(a[6],b[6],val[6]);
			nKeyHash.Add(a[7],b[7],val[7]);
			nKeyHash.Add(a[8],b[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, short, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7]);
			nKeyHash.Remove(a[8],b[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, short, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<short, short, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],val[0]);
			nKeyHash.Add(a[1],b[1],val[1]);
			nKeyHash.Add(a[2],b[2],val[2]);
			nKeyHash.Add(a[3],b[3],val[3]);
			nKeyHash.Add(a[4],b[4],val[4]);
			nKeyHash.Add(a[5],b[5],val[5]);
			nKeyHash.Add(a[6],b[6],val[6]);
			nKeyHash.Add(a[7],b[7],val[7]);
			nKeyHash.Add(a[8],b[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, short, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7]);
			nKeyHash.Remove(a[8],b[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, short, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);
		}

		[TestCase(0.207617965157897, -5628, -3462, 8495)]
		[TestCase(0.872576319553226, -8850, -9971, -563)]
		[TestCase(0.742859105459814, -8575, -4400, -3314)]
		[TestCase(0.00870413659545786, 1368, -3439, 2072)]
		[TestCase(0.636032949032277, 4691, -8557, -2358)]
		[TestCase(0.394734434967271, -9466, 6428, -582)]
		[TestCase(0.298255750117011, -1251, -3560, 7931)]
		[TestCase(0.649355152924245, -8300, 9918, 5083)]
		[TestCase(0.589718143264632, 8678, 7595, -9108)]
		[TestCase(0.266995716498697, -2790, -3095, 9609)]
		public void Add(double a, int b, int c, short val)
		{
			NKeyHash<double, int, int, short> nKeyHash = new NKeyHash<double, int, int, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c));

			nKeyHash = new NKeyHash<double, int, int, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c));

			nKeyHash = new NKeyHash<double, int, int, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c));

			nKeyHash = new NKeyHash<double, int, int, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c));
		}

		[TestCase(5530, -2182, -7103, 8206, 9633)]
		[TestCase(2680, -2161, -6468, -2586, -5980)]
		[TestCase(9349, -6379, -2058, 7118, 2530)]
		[TestCase(-1296, 4708, -7903, 6448, 3157)]
		[TestCase(-8495, 515, 4890, -8504, 3771)]
		[TestCase(-4330, -3266, -4487, -2211, -8167)]
		[TestCase(5529, 2493, 3862, -460, 3886)]
		[TestCase(8147, -4146, -1768, 8297, -9692)]
		[TestCase(3860, 6388, -2328, -2224, 9328)]
		[TestCase(3976, 2948, -1779, 4677, 8199)]
		public void Upsert(long a, long b, short c, short val, short newVal1)
		{
			NKeyHash<long, long, short, short> nKeyHash = new NKeyHash<long, long, short, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c));
			nKeyHash.Upsert(a, b, c, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c));

			nKeyHash = new NKeyHash<long, long, short, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c));
			nKeyHash.Upsert(a, b, c, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c));

			nKeyHash = new NKeyHash<long, long, short, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c));
			nKeyHash.Upsert(a, b, c, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c));

			nKeyHash = new NKeyHash<long, long, short, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c));
			nKeyHash.Upsert(a, b, c, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c));
		}

		[TestCase(-4614, -4983, 0.646332912448017, -8598)]
		[TestCase(-5563, 3964, 0.297369352680337, -7673)]
		[TestCase(5742, -4418, 0.424455125548157, -3143)]
		[TestCase(-242, 8401, 0.161618629080066, 4382)]
		[TestCase(-7148, -3522, 0.189878765116389, 6142)]
		[TestCase(9296, -4884, 0.142190788473091, -2884)]
		[TestCase(-7833, 9794, 0.636014364490292, 8511)]
		[TestCase(833, -412, 0.846550825446169, -4484)]
		[TestCase(3542, -9646, 0.207725023016206, -1128)]
		[TestCase(-4778, -5547, 0.189802454407235, -5666)]
		public void Delete(short a, int b, double c, long val)
		{
			NKeyHash<short, int, double, long> nKeyHash = new NKeyHash<short, int, double, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Delete(a, b, c);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));

			nKeyHash = new NKeyHash<short, int, double, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Delete(a, b, c);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));

			nKeyHash = new NKeyHash<short, int, double, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Delete(a, b, c);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));

			nKeyHash = new NKeyHash<short, int, double, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Delete(a, b, c);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));
		}

		[TestCase(9285, 2472, false, true)]
		[TestCase(-5011, -9703, true, true)]
		[TestCase(-3781, -7190, true, false)]
		[TestCase(-7827, -4188, true, false)]
		[TestCase(-8754, -2564, true, false)]
		[TestCase(-1349, -7024, true, false)]
		[TestCase(4246, 4360, false, true)]
		[TestCase(-7318, 9463, false, false)]
		[TestCase(-5530, -9245, false, false)]
		[TestCase(5575, 8172, true, true)]
		public void Remove(long a, int b, bool c, bool val)
		{
			NKeyHash<long, int, bool, bool> nKeyHash = new NKeyHash<long, int, bool, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Remove(a, b, c);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));

			nKeyHash = new NKeyHash<long, int, bool, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Remove(a, b, c);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));

			nKeyHash = new NKeyHash<long, int, bool, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Remove(a, b, c);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));

			nKeyHash = new NKeyHash<long, int, bool, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Remove(a, b, c);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));
		}

		[TestCase(-3860, 0.194211402998404, 0.334981318719211, 9409)]
		[TestCase(-4782, 0.957777652404168, 0.154420076010013, -3075)]
		[TestCase(-9956, 0.724501812236617, 0.672016644697644, 6310)]
		[TestCase(9158, 0.74073376121965, 0.0149856465938434, 627)]
		[TestCase(1133, 0.8476204880735, 0.787141275493028, -3246)]
		[TestCase(-8973, 0.322603067533394, 0.790052504180955, -8580)]
		[TestCase(7980, 0.477160066588391, 0.45323044455295, -6927)]
		[TestCase(3910, 0.0477062557114783, 0.595960633175429, 142)]
		[TestCase(-6321, 0.128980554234693, 0.163303222117621, 363)]
		[TestCase(-2338, 0.487579771078927, 0.659058966515148, -6473)]
		public void ContainsKey(long a, double b, double c, int val)
		{
			NKeyHash<long, double, double, int> nKeyHash = new NKeyHash<long, double, double, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Delete(a, b, c);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));

			nKeyHash = new NKeyHash<long, double, double, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Delete(a, b, c);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));

			nKeyHash = new NKeyHash<long, double, double, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Delete(a, b, c);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));

			nKeyHash = new NKeyHash<long, double, double, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Delete(a, b, c);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));
		}

		[TestCase(0.365658855235977, 1517, 532, -9237)]
		[TestCase(0.893674538421293, -7102, 9403, 7283)]
		[TestCase(0.138213249919104, 2543, -291, 9685)]
		[TestCase(0.404158898817449, -4718, -8570, 5673)]
		[TestCase(0.504547207851218, -9982, 3013, 9087)]
		[TestCase(0.128541179061188, -6701, 2633, 6579)]
		[TestCase(0.577430539102028, -63, -7033, -8617)]
		[TestCase(0.188561521558353, 2217, 377, -3832)]
		[TestCase(0.936651404917544, -4177, 4104, -3536)]
		[TestCase(0.950535336486313, -1696, -4801, 1013)]
		public void Clear(double a, long b, short c, int val)
		{
			NKeyHash<double, long, short, int> nKeyHash = new NKeyHash<double, long, short, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));
			Assert.AreEqual(nKeyHash.Count(a, b), 0);

			nKeyHash = new NKeyHash<double, long, short, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));
			Assert.AreEqual(nKeyHash.Count(a, b), 0);

			nKeyHash = new NKeyHash<double, long, short, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));
			Assert.AreEqual(nKeyHash.Count(a, b), 0);

			nKeyHash = new NKeyHash<double, long, short, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c));
			Assert.AreEqual(nKeyHash.Count(a, b), 0);
		}

		[TestCase(true, -6419, -7719, -7619)]
		[TestCase(false, 7506, 3434, 6358)]
		[TestCase(false, -1369, -2591, -5983)]
		[TestCase(true, 3952, -787, -2062)]
		[TestCase(true, 8022, 3512, 546)]
		[TestCase(false, -6457, -9045, -7737)]
		[TestCase(true, 4964, 6662, -8211)]
		[TestCase(true, -7999, 7538, -2063)]
		[TestCase(true, -8499, -6290, -2030)]
		[TestCase(false, -9413, 3058, -3735)]
		public void Get(bool a, long b, short c, int val)
		{
			NKeyHash<bool, long, short, int> nKeyHash = new NKeyHash<bool, long, short, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));

			nKeyHash = new NKeyHash<bool, long, short, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));

			nKeyHash = new NKeyHash<bool, long, short, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));

			nKeyHash = new NKeyHash<bool, long, short, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c));
		}

		[TestCase(0.920675076041685, 89, -2420, -4941)]
		[TestCase(0.954539791194042, 7260, 1082, -6472)]
		[TestCase(0.0560971512720441, 6830, -1032, -670)]
		[TestCase(0.131298895520763, -9980, 1203, 3357)]
		[TestCase(0.0422257902297311, 1646, -8458, 9844)]
		[TestCase(0.554559239910245, 9471, -1902, 7383)]
		[TestCase(0.512178963754409, -8755, -9718, 9344)]
		[TestCase(0.248192389145583, -2750, 1764, -1851)]
		[TestCase(0.961015358083423, 850, -6151, -8912)]
		[TestCase(0.369288182989363, 1604, -7302, 7557)]
		public void TryGetValue(double a, long b, short c, int val)
		{
			int fetch;
			bool b1;
			NKeyHash<double, long, short, int> nKeyHash = new NKeyHash<double, long, short, int>(UnderlyingHashType.Dictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, val);
			b1 = nKeyHash.TryGetValue(a, b, c, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<double, long, short, int>(UnderlyingHashType.ConcurrentDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, val);
			b1 = nKeyHash.TryGetValue(a, b, c, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<double, long, short, int>(UnderlyingHashType.SortedDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, val);
			b1 = nKeyHash.TryGetValue(a, b, c, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<double, long, short, int>(UnderlyingHashType.HashTable);
			b1 = nKeyHash.TryGetValue(a, b, c, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, val);
			b1 = nKeyHash.TryGetValue(a, b, c, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);
		}

		[TestCase(new long[] { 2531, 4379, -4656, -2361, -617, 9700, -4580, -2864, 2477, -5523 }, new long[] { 9010, 8940, -8006, 195, 4814, 7846, 6980, 1736, 8561, 3872 }, new int[] { -4932, -9179, 109, 1774, 6170, 116, -4027, -760, -1049, -6017 }, new double[] { 0.446375154166657, 0.853921263410673, 0.63292918057783, 0.450484535400981, 0.242589398400201, 0.793205675107057, 0.795018587165987, 0.63211798324814, 0.498158114728591, 0.263130627695066 })]
		[TestCase(new long[] { -8169, -5370, 5669, 4743, 1839, -5092, 9093, 7189, 6789, -5150 }, new long[] { -9421, 9179, 5449, 2940, 4019, 1712, -5729, 3567, 1466, 9264 }, new int[] { 3728, 6178, 8184, -1504, 5548, -8066, -3717, 2982, -4655, 8949 }, new double[] { 0.097346329641224, 0.216918324221353, 0.088698554825363, 0.665001847159584, 0.60212983498449, 0.021931241276642, 0.257479319468829, 0.768258348465086, 0.996774707453686, 0.56320128755793 })]
		[TestCase(new long[] { 1022, -1218, 2449, -5898, -6594, -252, -8370, 9716, 4989, 3139 }, new long[] { 1593, -7666, -8823, 697, 1533, -4348, -3556, -2825, 9194, -93 }, new int[] { 8623, -3887, 1846, 7838, -7096, 6238, 7405, -7849, -9100, 3580 }, new double[] { 0.328141206096924, 0.445260411335742, 0.681629820578559, 0.0101545546251138, 0.412146396195584, 0.247376482117631, 0.186482375574523, 0.704223112996772, 0.254533969915721, 0.290092038125774 })]
		[TestCase(new long[] { -9694, -3434, 7992, 2204, -2642, 9613, -6836, 1076, -8232, -3607 }, new long[] { 3994, 7974, 6169, 28, 2639, -5088, 6934, 4609, -8800, -2833 }, new int[] { 2340, 9477, 8817, -8590, -3423, -7310, -1300, -9026, -7544, -3413 }, new double[] { 0.0960498182550305, 0.617945862290424, 0.104190154980957, 0.669660118720336, 0.480095171127513, 0.602965252754728, 0.405933154470256, 0.982112730379269, 0.524131288064705, 0.164394051378776 })]
		[TestCase(new long[] { 3075, -3669, -9615, 4506, 9585, -1412, 2734, -6395, -2436, -6667 }, new long[] { -1987, -880, 2885, 7923, 3460, -9172, -2253, 6583, -4371, -5331 }, new int[] { 914, -7808, -1378, 5180, -5528, -8362, 5890, -7222, -9572, -9418 }, new double[] { 0.839605029597695, 0.864644171607049, 0.206384359023713, 0.895522211629675, 0.704521244719867, 0.30050975331129, 0.954741889589812, 0.215597750253788, 0.0911266198806123, 0.899441655212753 })]
		[TestCase(new long[] { -46, -4903, 3408, 9121, 8572, 2801, 9471, -5840, 9930, -1224 }, new long[] { -5686, 1534, 4014, -4185, 2372, 884, 7708, -4796, 35, 7948 }, new int[] { 2696, -41, -6822, -3016, -3459, 719, -5007, 4975, -6165, -2548 }, new double[] { 0.0865790625505983, 0.171723613595461, 0.738094867085151, 0.381946780896721, 0.735742854762703, 0.290947137070329, 0.439114081877803, 0.474924882163724, 0.830369160431609, 0.583464733130981 })]
		[TestCase(new long[] { -7835, 1731, -7154, 1651, 6266, -4741, -6720, 8312, -4462, -6793 }, new long[] { -1698, 3891, 4275, -6126, -4707, 9994, -8079, -3574, 2582, -2145 }, new int[] { -2189, -5502, -9673, 2480, -2955, -9120, 6771, -3624, 1099, -3445 }, new double[] { 0.105123870123701, 0.410530903102146, 0.429759548711478, 0.918322881645673, 0.789306918992338, 0.0482199108452629, 0.355657525991862, 0.57625495110464, 0.535784499969233, 0.0641098204367374 })]
		[TestCase(new long[] { -2558, -3321, -561, -9370, 9149, -2160, -841, 888, -7652, 4719 }, new long[] { -6099, -7642, 6915, -1246, -6140, 7665, 1406, 364, -5391, 5388 }, new int[] { -1514, 6902, -2785, 8982, -8895, -9908, -4702, 5909, -1913, -5671 }, new double[] { 0.644106611443733, 0.519713905881957, 0.785493173536609, 0.565023947770253, 0.0206414084046341, 0.0565865608195712, 0.752945927788013, 0.984837407704833, 0.666539593444457, 0.96022927433263 })]
		[TestCase(new long[] { 1719, -4116, -5970, 6379, -7344, 9744, 1294, 9840, 4506, 8118 }, new long[] { -442, 6748, -3082, 5326, 2796, 538, 9463, 454, 9524, 9058 }, new int[] { -7457, 3248, -7196, 8017, -8161, 3504, -3352, -4384, -1659, -7271 }, new double[] { 0.130377089665447, 0.585504606638804, 0.851670488646101, 0.270152656021599, 0.183445268861691, 0.130112318848312, 0.64369094820865, 0.54170033873138, 0.81645670757464, 0.0678719608429223 })]
		[TestCase(new long[] { -1204, -4544, -8596, -32, 4769, 6132, -6522, -9615, 8502, -125 }, new long[] { -8331, -5395, -9827, 4270, 6661, 8470, -6918, -3989, 4541, -850 }, new int[] { 3098, -4320, 1500, 1779, 5511, 7846, 9714, -8484, 1657, 194 }, new double[] { 0.883222219014178, 0.43151890506573, 0.706274428733752, 0.908390255602258, 0.513194604550113, 0.854345946504896, 0.592297839276631, 0.641765678134638, 0.16240244925134, 0.285212938340946 })]
		public void Count(long[] a, long[] b, int[] c, double[] val)
		{
			NKeyHash<long, long, int, double> nKeyHash = new NKeyHash<long, long, int, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0]), 9);

			nKeyHash = new NKeyHash<long, long, int, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0]), 9);

			nKeyHash = new NKeyHash<long, long, int, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0]), 9);

			nKeyHash = new NKeyHash<long, long, int, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0]), 9);
		}

		[TestCase(new int[] { -8938, 8002, 1538, -7237, -1259, -4802, 9520, -3136, 6290, -2819 }, new short[] { -1741, -6883, 3953, -377, 4454, 6922, 6417, -8036, -1274, -1690 }, new short[] { 2209, 3036, 478, -7995, -5992, 9574, -3374, 245, -7236, -1161 }, new double[] { 0.95603273900041, 0.341761731701792, 0.928396145779824, 0.651753944182654, 0.535971281833933, 0.875444513687605, 0.315443874483669, 0.847668179705585, 0.638684732671215, 0.323022469097293 })]
		[TestCase(new int[] { 673, 801, 2338, -3054, -90, -2852, -6866, -7776, 8379, -3674 }, new short[] { -713, -1933, 7537, 8801, -3743, -1976, -2475, -465, 8753, -834 }, new short[] { 8570, -724, -5898, -2546, -1940, -8575, -5451, -9079, 8902, 6945 }, new double[] { 0.530705711585798, 0.973214032581641, 0.459435787731519, 0.113251105469303, 0.881814052295784, 0.0704486607901979, 0.0349073745472857, 0.176666413516117, 0.60472241398167, 0.842983156835187 })]
		[TestCase(new int[] { 6442, -5596, 1865, 6436, 9550, 1054, -702, 9764, -3220, -7303 }, new short[] { -15, 6773, 8197, -6390, -2110, -8601, -3299, -5114, 8885, -1513 }, new short[] { -7399, -7785, -6679, -8564, 5710, -177, 8876, 5272, -8833, -5152 }, new double[] { 0.366254348478398, 0.199555521923842, 0.872022065740089, 0.0947585101680637, 0.636129635216729, 0.708450099783228, 0.870523448973207, 0.383170438177497, 0.395089528241702, 0.850237970170676 })]
		[TestCase(new int[] { 2126, -5216, 4139, 6206, -3038, 3839, -8733, -4419, 4375, 6238 }, new short[] { 4708, 5812, -5352, -6390, 4259, 4228, -8915, 430, -9272, -270 }, new short[] { 2177, 4023, 8599, -8067, 5370, -4006, 9332, 6302, 885, 3719 }, new double[] { 0.199348402302409, 0.951845706883746, 0.84918317424561, 0.0940682385554855, 0.817983328280031, 0.890844355286492, 0.4036818646843, 0.355609057171088, 0.723643252497373, 0.0935408347721867 })]
		[TestCase(new int[] { -1443, 3296, -9102, -5072, 138, 1512, 9342, 3831, -2364, 8492 }, new short[] { 3085, -3020, -3062, 8171, -5171, 8101, -3817, 2207, -9162, -9030 }, new short[] { 4506, -5037, 4694, -9342, 2251, 5671, 8828, -7233, -2750, 6442 }, new double[] { 0.30777274086502, 0.698547620651567, 0.797896306402002, 0.942782791770428, 0.0586329396155816, 0.944011018119758, 0.656347779397083, 0.683646267132669, 0.589694134234308, 0.192935533911425 })]
		[TestCase(new int[] { -3350, -4497, -1331, 2392, -9365, 7006, 2099, 8810, 7053, 8256 }, new short[] { 1634, 5865, -3723, 3504, -2635, -6405, 8601, -9758, 2674, 4466 }, new short[] { 2683, 6577, -3416, 1191, 2337, 9114, 1021, -1918, 6999, -4052 }, new double[] { 0.248770415898771, 0.6254820803299, 0.0206948081127809, 0.848875383310428, 0.715938789637731, 0.450247829989646, 0.814696312795717, 0.115109553614217, 0.00112320669047684, 0.762229286489184 })]
		[TestCase(new int[] { -6427, -9981, -4287, -1008, -5190, 289, -2304, -7545, 1491, 7577 }, new short[] { -9721, 2886, -9001, 7326, 1175, 71, 8917, 7476, -9944, -8480 }, new short[] { -4014, -5980, -8187, 1106, 3281, 9123, 5451, -701, 9184, 8358 }, new double[] { 0.365013343452017, 0.815016950860162, 0.0109038180722407, 0.8715273895634, 0.544740650125193, 0.633272440001961, 0.543304242446695, 0.879576171692263, 0.319122092015632, 0.102422470274578 })]
		[TestCase(new int[] { 1419, -1431, 6589, 9420, -4329, 2088, 1511, -6912, -4197, -5752 }, new short[] { 86, 8816, -7751, 8502, -740, 9552, 8205, 4604, 5709, -4315 }, new short[] { 4837, 8395, -6731, 3131, 278, -6022, 2668, -6432, -3567, 8509 }, new double[] { 0.960264145843808, 0.0663513811614138, 0.554725671445357, 0.900290754111619, 0.504954863109139, 0.870852927617195, 0.371441800320261, 0.119490091744573, 0.271848646119166, 0.0596450558210002 })]
		[TestCase(new int[] { -2386, 2365, -6503, 4937, -1726, -1516, 4052, -8284, -1828, 1341 }, new short[] { 4458, 6260, -8117, -9301, -2788, 3023, -4698, -6541, -856, -8306 }, new short[] { 9419, -2055, 6653, -2707, -4957, -1240, -2277, -5757, -1595, 1841 }, new double[] { 0.606211237891676, 0.790844363063036, 0.458421967205788, 0.725837660360074, 0.903577983334464, 0.123612827678962, 0.745011995427782, 0.416446116015523, 0.242963187975326, 0.0897451457985421 })]
		[TestCase(new int[] { -75, 953, 5395, 5090, -5948, -7054, 9444, 396, 794, 7074 }, new short[] { 2115, -6028, 3246, -6254, -8226, 9667, 5710, 6203, -103, 9512 }, new short[] { -9238, -189, 3309, 6328, 9216, 8641, -2907, -2634, -7372, -5260 }, new double[] { 0.906157601115367, 0.848608236223742, 0.929922959268989, 0.367416106335547, 0.588365345070309, 0.423347583237732, 0.627443117847407, 0.0781670087381112, 0.162056182586614, 0.104875738781353 })]
		public void Any(int[] a, short[] b, short[] c, double[] val)
		{
			NKeyHash<int, short, short, double> nKeyHash = new NKeyHash<int, short, short, double>(UnderlyingHashType.Dictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<int, short, short, double>(UnderlyingHashType.ConcurrentDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<int, short, short, double>(UnderlyingHashType.SortedDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<int, short, short, double>(UnderlyingHashType.HashTable);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());
		}

		[TestCase(new int[] { 9725, -1846, -7428, -4575, 2744, 8402, -3238, 8695, 8431, -4653 }, new double[] { 0.0517032295706231, 0.00573189463733318, 0.882170506232497, 0.953311568570003, 0.793660934452741, 0.270463307979732, 0.792618854806115, 0.604002130499111, 0.388498313905903, 0.302822049848187 }, new long[] { 8951, 5143, -4626, -4101, 1977, 3304, -2880, 4147, 2962, -2200 }, new long[] { 199, -6564, 6362, -8017, 6602, 1064, 6070, -8330, 4620, -5776 })]
		[TestCase(new int[] { 7976, 9426, 8538, 3252, -3685, 1652, 823, 3482, -4309, 7831 }, new double[] { 0.312256883975238, 0.861708839825219, 0.477801562975068, 0.369533537127792, 0.618804227848912, 0.229110515783127, 0.139022891008771, 0.833602790177615, 0.672314592484531, 0.971960581360366 }, new long[] { 1283, 2612, -4266, 633, 5145, 7598, -6247, 5661, -7536, -5190 }, new long[] { -662, 4183, 7458, -6452, -1920, 9524, 6603, 2119, 9583, -9674 })]
		[TestCase(new int[] { -7517, 3636, -1542, 5130, -8445, 2964, 3878, -1027, -394, 2021 }, new double[] { 0.41419789819708, 0.96997530850115, 0.411111462121416, 0.759069884549393, 0.6469590541194, 0.268228952432158, 0.684682275487428, 0.395292096955372, 0.905310144603862, 0.435751686541248 }, new long[] { -2098, 5161, 1019, -9117, -1505, 2061, 9773, -3990, 9310, 2850 }, new long[] { -2021, 660, 7087, 3121, 6956, 7646, -5844, 602, -919, -7817 })]
		[TestCase(new int[] { -6278, 4778, -3943, 441, 6524, -61, -4037, -7721, 607, -7285 }, new double[] { 0.291598168337531, 0.434918844809252, 0.700687934039481, 0.543448169968765, 0.621176549057093, 0.365998358170501, 0.130841756300461, 0.378825547350024, 0.331844893438669, 0.474620570649682 }, new long[] { 3190, -2130, -339, 6754, -5956, 7622, -7687, 5100, 8223, 5291 }, new long[] { -8789, -6907, 8824, 5924, -5004, 3121, -894, -9420, -5642, 8555 })]
		[TestCase(new int[] { -3899, 7495, 5401, 6596, -2981, 9278, 6646, -3780, -9301, -362 }, new double[] { 0.75152056047298, 0.828933693854573, 0.198267493954984, 0.979382075359757, 0.449551578354813, 0.792541340828194, 0.25591174757849, 0.465054520156726, 0.31990793501954, 0.945069161218158 }, new long[] { -2373, 860, -5945, 5315, -8494, -7258, -127, 8088, -4125, 9300 }, new long[] { 8213, -7960, -6779, -1918, -6606, 5693, 2467, 3062, -263, -5235 })]
		[TestCase(new int[] { -9022, 6091, 4402, -1413, -9737, -5368, 9125, 9237, -3065, -856 }, new double[] { 0.400202755071317, 0.990225542332151, 0.709014200469951, 0.272754520770514, 0.546460238539828, 0.761935841646947, 0.672130589220734, 0.00429502967945069, 0.754634013750886, 0.213897335442667 }, new long[] { -592, 8556, -9654, -8602, 1422, 2991, 3358, 5883, 6194, 3297 }, new long[] { -6616, 2054, 9563, -8364, 7923, 1534, 6457, 5467, 5053, 6873 })]
		[TestCase(new int[] { -6384, 634, 1155, 6729, 1297, 8409, -2141, 7764, 7151, -1845 }, new double[] { 0.112551874067891, 0.619104645503268, 0.898523021442128, 0.272931778930562, 0.767832592021596, 0.120946555454725, 0.78738004471519, 0.650295522366788, 0.858166165118183, 0.363475237210968 }, new long[] { 1271, -6757, -6956, 3636, -4238, 5948, -9759, 2545, -2469, 9393 }, new long[] { 8779, 7974, -4967, 8217, -9335, 8771, -2597, -6385, 99, 3012 })]
		[TestCase(new int[] { -4865, 5593, 8731, -1958, 1046, 1000, 4084, 4105, -3721, 5505 }, new double[] { 0.789339870116366, 0.172617426688139, 0.915216219106324, 0.389233254077487, 0.280103509910453, 0.0186438569885883, 0.379558893097359, 0.875938082521753, 0.548479599202275, 0.767411248650128 }, new long[] { 8169, 5311, 234, 7756, -626, -5723, -2649, 9750, -5204, 6583 }, new long[] { 5015, 2133, -7092, -5849, -7863, 5677, -5490, 5001, -7409, 4759 })]
		[TestCase(new int[] { -8134, -3865, -3731, 2024, -6391, 5327, 9669, 7246, 2616, -9708 }, new double[] { 0.559070423971429, 0.494193472663962, 0.63223040179919, 0.737567892641559, 0.742170886482192, 0.49108029179791, 0.267958706369604, 0.0487869079451947, 0.933363176385576, 0.338513571926632 }, new long[] { -6348, 4332, -689, -306, -9509, -6345, -9453, 4153, -4350, -76 }, new long[] { 5863, 2588, 4928, 6208, 3483, 2035, -955, 8208, 4148, 4045 })]
		[TestCase(new int[] { -5394, 103, -2864, -5494, -4596, -4867, 9487, -1844, -693, 2313 }, new double[] { 0.515960998607781, 0.176661646541516, 0.816757681694235, 0.790989201418585, 0.55549203304364, 0.376581367280605, 0.841173212435643, 0.828710636509913, 0.576763770811615, 0.997730627189265 }, new long[] { 4781, -4483, 1597, -7306, -5572, 8591, 4954, 6434, -8731, -7191 }, new long[] { -9221, -2850, -3172, -5377, -7834, 3546, -2802, -5193, -5708, 5356 })]
		public void Forloop(int[] a, double[] b, long[] c, long[] val)
		{
			bool[] found = new bool[9];
			bool allFound = false;
			NKeyHash<int, double, long, long> nKeyHash = new NKeyHash<int, double, long, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7]);
			nKeyHash.Remove(a[8],b[8],c[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<int, double, long, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7]);
			nKeyHash.Remove(a[8],b[8],c[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<int, double, long, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7]);
			nKeyHash.Remove(a[8],b[8],c[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<int, double, long, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7]);
			nKeyHash.Remove(a[8],b[8],c[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);
		}

		[TestCase(2330, 6252, 9108, -4899, 0.297613529627031)]
		[TestCase(5211, 2469, -3325, 4193, 0.963169204519675)]
		[TestCase(9088, 8504, -5556, -9920, 0.3405004620275)]
		[TestCase(177, -6945, -3112, -3500, 0.576835584629716)]
		[TestCase(-6829, 6705, 1713, 3654, 0.87813794281247)]
		[TestCase(-9664, 2017, 2282, 6177, 0.789500442701159)]
		[TestCase(-7608, -9330, 8262, -6910, 0.604798633886873)]
		[TestCase(-7660, 5845, 1335, 5314, 0.379771884707628)]
		[TestCase(-1692, -9524, 2632, -4641, 0.153788634181856)]
		[TestCase(5041, -7244, -5271, 7480, 0.258986506266047)]
		public void Add(short a, long b, short c, long d, double val)
		{
			NKeyHash<short, long, short, long, double> nKeyHash = new NKeyHash<short, long, short, long, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d));

			nKeyHash = new NKeyHash<short, long, short, long, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d));

			nKeyHash = new NKeyHash<short, long, short, long, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d));

			nKeyHash = new NKeyHash<short, long, short, long, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d));
		}

		[TestCase(true, -5459, 0.272698795084236, false, 0.280893245377062, 0.159740242250143)]
		[TestCase(false, 496, 0.920215043202143, true, 0.921016607862439, 0.0121194366422107)]
		[TestCase(false, -2017, 0.223548426396935, true, 0.585892764658617, 0.578616026592728)]
		[TestCase(true, -6769, 0.134751641254291, false, 0.317747783063793, 0.52895867849186)]
		[TestCase(false, 7579, 0.364472539799508, true, 0.549927394161898, 0.733948151457099)]
		[TestCase(true, -7679, 0.82322711256483, false, 0.8235858296154, 0.889939812426427)]
		[TestCase(true, -6200, 0.484866220729829, false, 0.406007560624745, 0.498928322223447)]
		[TestCase(true, -1513, 0.232772026319416, true, 0.0700074741942843, 0.837298299110168)]
		[TestCase(true, 848, 0.469659526585443, true, 0.972259674674021, 0.928440968472716)]
		[TestCase(true, 1550, 0.909264440140344, true, 0.250789750018525, 0.401899142843624)]
		public void Upsert(bool a, short b, double c, bool d, double val, double newVal1)
		{
			NKeyHash<bool, short, double, bool, double> nKeyHash = new NKeyHash<bool, short, double, bool, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d));
			nKeyHash.Upsert(a, b, c, d, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d));

			nKeyHash = new NKeyHash<bool, short, double, bool, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d));
			nKeyHash.Upsert(a, b, c, d, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d));

			nKeyHash = new NKeyHash<bool, short, double, bool, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d));
			nKeyHash.Upsert(a, b, c, d, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d));

			nKeyHash = new NKeyHash<bool, short, double, bool, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d));
			nKeyHash.Upsert(a, b, c, d, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d));
		}

		[TestCase(6099, -6221, 0.735032419085052, true, 0.333608613970507)]
		[TestCase(-6060, -2080, 0.0937498058628988, true, 0.755469996368266)]
		[TestCase(2716, -154, 0.893444777416738, false, 0.386079348337873)]
		[TestCase(6179, 543, 0.0895941178731593, false, 0.264288624871657)]
		[TestCase(-7043, -7124, 0.894786144092114, true, 0.24606856808349)]
		[TestCase(9612, 5516, 0.939156701294313, false, 0.42476394000685)]
		[TestCase(-7264, 480, 0.52514337400214, false, 0.427757279215268)]
		[TestCase(1021, -3300, 0.261782315215926, false, 0.345497150134992)]
		[TestCase(-8524, 2056, 0.247116205863243, false, 0.0511549450695305)]
		[TestCase(-8294, -9682, 0.447553464419932, true, 0.59291251450447)]
		public void Delete(long a, short b, double c, bool d, double val)
		{
			NKeyHash<long, short, double, bool, double> nKeyHash = new NKeyHash<long, short, double, bool, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Delete(a, b, c, d);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));

			nKeyHash = new NKeyHash<long, short, double, bool, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Delete(a, b, c, d);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));

			nKeyHash = new NKeyHash<long, short, double, bool, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Delete(a, b, c, d);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));

			nKeyHash = new NKeyHash<long, short, double, bool, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Delete(a, b, c, d);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));
		}

		[TestCase(3225, false, 0.0893243947482316, 0.329447415810752, 0.352933241684424)]
		[TestCase(-1578, false, 0.0107827279766941, 0.300379528803928, 0.618712383610528)]
		[TestCase(-7763, true, 0.468384314546541, 0.868429372957176, 0.835002093499062)]
		[TestCase(-519, false, 0.772696330571871, 0.661995046149006, 0.190575411631994)]
		[TestCase(899, true, 0.721815171987664, 0.59455307926729, 0.160836583543958)]
		[TestCase(9296, false, 0.0744462996136613, 0.490054563381735, 0.156670478245556)]
		[TestCase(9141, true, 0.603165107128753, 0.573631680837661, 0.766484718195388)]
		[TestCase(-4860, false, 0.932334899405173, 0.963964545616864, 0.924432246444948)]
		[TestCase(2338, true, 0.946736677059315, 0.554258588493922, 0.93937440493115)]
		[TestCase(-7637, true, 0.579124091462756, 0.0297083081815896, 0.118900941274548)]
		public void Remove(short a, bool b, double c, double d, double val)
		{
			NKeyHash<short, bool, double, double, double> nKeyHash = new NKeyHash<short, bool, double, double, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Remove(a, b, c, d);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));

			nKeyHash = new NKeyHash<short, bool, double, double, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Remove(a, b, c, d);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));

			nKeyHash = new NKeyHash<short, bool, double, double, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Remove(a, b, c, d);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));

			nKeyHash = new NKeyHash<short, bool, double, double, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Remove(a, b, c, d);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));
		}

		[TestCase(true, 1445, -104, -6627, -2238)]
		[TestCase(false, -2352, 414, -7125, 3231)]
		[TestCase(true, -2720, 7894, -7960, 1560)]
		[TestCase(false, -3338, 6174, 4750, 1472)]
		[TestCase(true, 8996, -6648, 3103, -9144)]
		[TestCase(false, 4983, -9104, -2576, -6919)]
		[TestCase(true, -4974, 7434, -4655, -9962)]
		[TestCase(true, 5017, 5273, 1517, 6633)]
		[TestCase(false, -8573, 6059, 7852, -2314)]
		[TestCase(true, 3053, -456, -966, 7810)]
		public void ContainsKey(bool a, int b, short c, long d, short val)
		{
			NKeyHash<bool, int, short, long, short> nKeyHash = new NKeyHash<bool, int, short, long, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Delete(a, b, c, d);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));

			nKeyHash = new NKeyHash<bool, int, short, long, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Delete(a, b, c, d);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));

			nKeyHash = new NKeyHash<bool, int, short, long, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Delete(a, b, c, d);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));

			nKeyHash = new NKeyHash<bool, int, short, long, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Delete(a, b, c, d);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));
		}

		[TestCase(6294, -1905, 6791, false, 9412)]
		[TestCase(-3128, -3247, -7007, true, -7769)]
		[TestCase(-3922, -155, 2550, false, 7866)]
		[TestCase(-450, 1386, -5342, true, -3218)]
		[TestCase(7632, -7062, -4501, false, -4226)]
		[TestCase(5294, -4559, 1861, false, -313)]
		[TestCase(9037, 3667, 4279, true, -6257)]
		[TestCase(-4400, 8224, 2756, true, -237)]
		[TestCase(7938, 8433, 6265, true, -8391)]
		[TestCase(-4761, -9496, -2458, true, -1738)]
		public void Clear(long a, int b, int c, bool d, short val)
		{
			NKeyHash<long, int, int, bool, short> nKeyHash = new NKeyHash<long, int, int, bool, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));
			Assert.AreEqual(nKeyHash.Count(a, b, c), 0);

			nKeyHash = new NKeyHash<long, int, int, bool, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));
			Assert.AreEqual(nKeyHash.Count(a, b, c), 0);

			nKeyHash = new NKeyHash<long, int, int, bool, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));
			Assert.AreEqual(nKeyHash.Count(a, b, c), 0);

			nKeyHash = new NKeyHash<long, int, int, bool, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d));
			Assert.AreEqual(nKeyHash.Count(a, b, c), 0);
		}

		[TestCase(true, -7402, 1373, 0.837231113965265, -5881)]
		[TestCase(false, 4890, 3378, 0.505415676862661, -6808)]
		[TestCase(true, 5563, 4275, 0.913025657605857, 2267)]
		[TestCase(true, 8628, 2552, 0.417738390815322, -1157)]
		[TestCase(true, -3328, -125, 0.190572058405062, -9464)]
		[TestCase(true, 7898, -9304, 0.0675551332847938, -2319)]
		[TestCase(true, -9569, 7905, 0.441974655465211, 383)]
		[TestCase(false, -3147, 6011, 0.399310318939067, -1667)]
		[TestCase(false, -4944, -3842, 0.62162592151278, -801)]
		[TestCase(false, -3772, -718, 0.944921028308999, 6936)]
		public void Get(bool a, short b, long c, double d, int val)
		{
			NKeyHash<bool, short, long, double, int> nKeyHash = new NKeyHash<bool, short, long, double, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));

			nKeyHash = new NKeyHash<bool, short, long, double, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));

			nKeyHash = new NKeyHash<bool, short, long, double, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));

			nKeyHash = new NKeyHash<bool, short, long, double, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d));
		}

		[TestCase(false, 2721, -2438, 6209, -673)]
		[TestCase(false, 4195, 2027, -7571, 1460)]
		[TestCase(true, 7656, -4563, -2122, -734)]
		[TestCase(false, -7382, -5433, -9976, -4206)]
		[TestCase(true, -9485, 7441, 4613, 860)]
		[TestCase(false, -1381, -8202, -5585, -5695)]
		[TestCase(true, 5544, 374, 8602, -6302)]
		[TestCase(true, 9289, 9801, 8658, -5199)]
		[TestCase(false, 3026, -6269, -9027, 7217)]
		[TestCase(true, -9208, -8595, -367, 2465)]
		public void TryGetValue(bool a, long b, short c, short d, int val)
		{
			int fetch;
			bool b1;
			NKeyHash<bool, long, short, short, int> nKeyHash = new NKeyHash<bool, long, short, short, int>(UnderlyingHashType.Dictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<bool, long, short, short, int>(UnderlyingHashType.ConcurrentDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<bool, long, short, short, int>(UnderlyingHashType.SortedDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<bool, long, short, short, int>(UnderlyingHashType.HashTable);
			b1 = nKeyHash.TryGetValue(a, b, c, d, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);
		}

		[TestCase(new short[] { -3827, 5279, 2947, -4650, -9237, 4913, 2399, -2385, 8123, 4484 }, new long[] { 6434, -2717, -3166, -5819, 8984, -4819, -7185, -4093, 5221, 6940 }, new short[] { -8882, 6783, 6469, 7394, 8843, -2225, -2785, 2163, 1947, -6455 }, new short[] { -3213, 682, -1363, -7489, 7524, 5000, -3656, 4453, 7897, -113 }, new double[] { 0.822623174554959, 0.2706447542974, 0.28024079943087, 0.324345287552264, 0.0391166610825419, 0.23670081386189, 0.697846797619875, 0.861230280651353, 0.532372947564522, 0.364276983479167 })]
		[TestCase(new short[] { 7944, -5716, -360, -5202, 4975, -612, 8809, 5552, -3494, 2986 }, new long[] { -2299, -9762, 5665, 4580, -2300, -4247, 8644, -5675, -3345, -6014 }, new short[] { 8836, -1639, -1992, -4663, -9510, 5703, 1179, -16, 6612, 4109 }, new short[] { 3817, -10, -8483, -5337, -4401, -7496, -8955, -6160, -2466, -1862 }, new double[] { 0.809534318656444, 0.539502555290005, 0.39743216214582, 0.245617927166455, 0.109314193534345, 0.810804058709556, 0.487323840841336, 0.551193375397098, 0.939386983373848, 0.751490520663322 })]
		[TestCase(new short[] { -3911, -366, 569, -3336, -1552, -415, 6274, -5696, -5690, 9271 }, new long[] { 8207, -1173, 8938, 2394, 9167, 7710, 8719, 1003, -1016, -4803 }, new short[] { -5290, 4806, 6789, 8516, -2205, -1952, -9586, -6904, -6849, -5727 }, new short[] { -4042, -9843, 1195, -8415, -1977, -5814, 9418, 4852, 6213, 6012 }, new double[] { 0.311372239753312, 0.837017188704115, 0.976513583667815, 0.413028422935413, 0.496465462956794, 0.368193543221892, 0.59253888930778, 0.777704414342392, 0.287191358994316, 0.223767845995616 })]
		[TestCase(new short[] { 7495, 8741, -7958, 3591, 320, 1281, 2842, 2052, 8867, -9599 }, new long[] { -827, 3180, -8845, -9962, 3315, 8051, 7630, 7355, -5626, 4983 }, new short[] { 8290, -6132, 4789, 2969, 8967, -2031, 5275, -1470, -1411, -9568 }, new short[] { 6196, -5141, 7350, 8673, -3223, -2784, 8114, 7603, 1262, 6739 }, new double[] { 0.567062217074941, 0.368335095405735, 0.799225360992935, 0.79072707462624, 0.342019920862289, 0.652353563649745, 0.779339931802517, 0.974684746924175, 0.74723948060872, 0.59387118350429 })]
		[TestCase(new short[] { -267, 4494, 1181, 759, -3815, 3628, -6046, -928, 4622, -7646 }, new long[] { 6004, -5685, -6534, 8437, -5796, -5684, 5828, -7520, 3259, -3898 }, new short[] { 9935, -9971, -3906, -2367, -6356, 924, -2117, 8974, -3870, -4077 }, new short[] { 2381, 5782, 3584, 6710, 697, -8297, 3676, -3408, 2490, 3147 }, new double[] { 0.163092856837014, 0.452198705380875, 0.149050205084053, 0.445510396941337, 0.036760504840296, 0.351378340437719, 0.195117340979687, 0.877290951962253, 0.580573306689306, 0.126284672937488 })]
		[TestCase(new short[] { 7217, 3107, -3765, -1156, 1940, -295, -1598, -6449, -2882, 5258 }, new long[] { -4253, -5021, -7057, -1298, -29, -9776, 728, -3246, -2258, -7498 }, new short[] { 638, -762, -11, -9886, -7160, 892, 7045, 7182, -3102, 6614 }, new short[] { -2977, 336, -2636, -6395, -1296, 9273, -451, -5258, -5229, -9006 }, new double[] { 0.665005449980966, 0.506337469679461, 0.973729394364045, 0.861606377578157, 0.370070458562146, 0.914198597853164, 0.305114973012877, 0.713994655624961, 0.946978819066183, 0.0256278286807369 })]
		[TestCase(new short[] { 6298, 7148, -195, -889, 1887, -2019, -6880, -3878, -3995, -8951 }, new long[] { 2657, 1218, 6652, 501, -1763, 5409, 7613, 9337, 9996, 696 }, new short[] { 673, -4011, -8015, -3251, -798, -9487, -237, 2756, 2710, -5444 }, new short[] { -5208, -7232, 8242, -3615, -9682, -126, -9467, 8252, 1716, -9275 }, new double[] { 0.80774341281864, 0.171373074488422, 0.936824983887759, 0.186117848468068, 0.416748591427109, 0.10406249347332, 0.673692684934331, 0.448643386572899, 0.44980873328159, 0.599585322942392 })]
		[TestCase(new short[] { -9329, -3235, 4282, -1756, -161, 310, 5164, -6942, 9908, 1375 }, new long[] { 8216, 362, 3410, -8549, 6256, -108, 2975, 268, 185, 8361 }, new short[] { 4877, 9360, -2378, 9273, 4541, -2753, -2748, 8260, 8412, -2879 }, new short[] { -2962, -9209, -6239, -9279, -6113, 8025, -1515, 0, 6544, 5 }, new double[] { 0.735436788171267, 0.873745392017879, 0.917193834631328, 0.0170244132247867, 0.125276112056, 0.289595586382596, 0.500841019442697, 0.864359708439726, 0.37325679900742, 0.922186015603219 })]
		[TestCase(new short[] { -894, -6794, 8786, 634, 7113, -8690, 9141, 5007, 3701, -7406 }, new long[] { -6939, 6903, -5355, 2789, -5661, 7426, -3396, 2691, 7562, 8230 }, new short[] { -8592, -7024, 3722, -9819, -6346, 7402, -8981, -2718, 6768, -1250 }, new short[] { 7228, -35, 795, 9968, 8013, -6166, -7996, 3125, -6394, -7422 }, new double[] { 0.944172800492576, 0.673810988047072, 0.814947914711641, 0.697640391857196, 0.34732076355597, 0.890233535268453, 0.641550307926512, 0.277717351577113, 0.800117015279884, 0.253897603253786 })]
		[TestCase(new short[] { 9188, 7324, 9722, -765, 7036, -3868, -518, 8607, -3018, 9709 }, new long[] { -9707, 1861, 8238, -5047, -4636, 3094, -3891, -5324, 4775, -9493 }, new short[] { 5424, 3476, -913, 4985, 9346, -2069, -3323, 9769, 3232, -4150 }, new short[] { -5427, 5462, 1278, 1690, -439, 9903, 240, -8437, -7066, 1883 }, new double[] { 0.717534522860094, 0.169694581613734, 0.307251440504217, 0.194725541488605, 0.114305884630562, 0.351092376909727, 0.761844557133431, 0.567365845929536, 0.429484320073148, 0.69256018180985 })]
		public void Count(short[] a, long[] b, short[] c, short[] d, double[] val)
		{
			NKeyHash<short, long, short, short, double> nKeyHash = new NKeyHash<short, long, short, short, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0]), 9);

			nKeyHash = new NKeyHash<short, long, short, short, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0]), 9);

			nKeyHash = new NKeyHash<short, long, short, short, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0]), 9);

			nKeyHash = new NKeyHash<short, long, short, short, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0]), 9);
		}

		[TestCase(new int[] { -4287, -1760, -5262, -113, -893, 9453, -288, -4624, -8866, 5138 }, new int[] { -5171, -9416, -3451, 5390, -4540, -7144, -5453, -8256, -7107, -3844 }, new int[] { 2031, -2667, -4807, 2700, 2325, 2693, 5328, 1180, 9380, 4151 }, new long[] { 6414, -5315, 5781, -7961, -6150, 1664, -4495, 1675, 3825, 2428 }, new int[] { -5360, 8017, -4986, -1244, 7457, -3560, -1311, 5955, -6868, 996 })]
		[TestCase(new int[] { -2849, -3585, -2113, -658, 7620, 8379, -6951, 2036, 7560, 6411 }, new int[] { -5873, 8529, -4005, -3019, 8722, -9855, -5198, -5489, 1542, 3793 }, new int[] { 7350, 2870, -2083, 463, -8483, 4012, -7680, 6435, 5241, -4112 }, new long[] { -5994, 9371, -1949, -1614, -2998, 1, 6796, -3559, -5582, -4531 }, new int[] { -1382, 3466, 4114, 7413, -1696, -3890, 2024, 8031, 32, 7313 })]
		[TestCase(new int[] { -8360, -5821, -5585, -663, 3645, 4279, 8497, 7422, -2173, -6391 }, new int[] { 6060, -3388, 6793, 1673, 2406, -5246, 480, 7608, 9977, -1278 }, new int[] { -6652, 8359, -9905, -3925, -4823, -6115, 8755, 501, -7838, 5406 }, new long[] { -8010, -5712, -3596, 7927, -5750, 9826, 4958, 8712, 4738, 2721 }, new int[] { 1502, 9373, 8613, -9190, -592, -7992, 6671, -7558, -4992, -6449 })]
		[TestCase(new int[] { 5627, 4415, 8052, -8688, 3967, -6721, -5914, 8339, -5838, -238 }, new int[] { 5522, -2003, 5262, 2419, -8379, 1774, -9791, 8865, -2574, 2579 }, new int[] { -205, 1766, -7129, -2742, 7217, -6027, 9745, 9284, 6666, -6829 }, new long[] { -2788, 6315, -4504, 8609, 9777, -2427, -3766, -4906, -6038, -9028 }, new int[] { 5742, 6618, 4552, -5021, 7197, -6492, -5887, -3805, 9187, 7632 })]
		[TestCase(new int[] { -8200, 7805, 5014, 2427, 3754, -6138, 1546, 796, -5907, -4 }, new int[] { -6468, -5199, -8326, -9008, -7449, 9206, -7497, 6651, 2640, 4046 }, new int[] { -4458, 5114, 4904, -3544, 6836, 3175, 7213, 7891, 58, 3711 }, new long[] { 9859, 3551, -9902, 9033, -8627, -595, -8698, 3067, -5144, 5916 }, new int[] { 6025, 5436, -8998, 3964, 7438, 943, 4945, 3561, -7571, 7989 })]
		[TestCase(new int[] { -8994, -2540, 3552, -4858, 2091, -3316, -7098, -1440, 5590, -9419 }, new int[] { -3352, 3654, -9261, 379, 135, -20, -5296, -7360, 9617, 3145 }, new int[] { 7905, -565, 1797, 6723, 8020, 104, 4113, -9058, -984, -4105 }, new long[] { 8229, -6347, 5463, 2067, 2707, 2401, 9997, 4954, -3057, 4687 }, new int[] { -3496, 2740, 7475, -5723, -730, -7627, 4698, 620, -6169, -2539 })]
		[TestCase(new int[] { -3759, 2306, 3942, -717, -9915, 1570, 5661, 6828, -2879, -8011 }, new int[] { 2568, -8038, 9543, -303, -7650, -7004, 8189, -1330, 7671, 7732 }, new int[] { -19, -251, 5696, -5068, -3357, -4833, 1957, -2478, -2545, 5648 }, new long[] { 5405, -6505, 7109, -8443, 9652, -4076, -291, -3817, 1984, -8862 }, new int[] { 6739, -6829, -2165, -5044, -7879, -5456, 3196, -2219, -8072, -3724 })]
		[TestCase(new int[] { -5817, -3970, 2948, -3903, 7478, 6491, 6609, -987, -7358, 4917 }, new int[] { 9611, -1859, -625, 1470, -3417, -924, -5148, 7987, 43, 6424 }, new int[] { 3285, 2007, 6684, 6534, -9005, -3188, -8085, 741, -7188, -7899 }, new long[] { 1968, -5821, -4404, -8819, 1467, -623, 545, 1013, -5923, -6837 }, new int[] { -686, -9303, -6457, 7065, -8474, -1400, 3795, 6363, 8372, 3043 })]
		[TestCase(new int[] { 9690, 5207, 7736, -4497, 2988, 2174, -656, 6412, -4897, 668 }, new int[] { 4578, -4131, -3797, -9457, -7049, 5434, -7453, -1805, -9995, 7204 }, new int[] { 8529, 3836, 3912, -3118, -2888, 2590, -1534, 9618, 5010, 2393 }, new long[] { 3014, -4449, 2368, -232, -7591, 6759, -3558, -9905, -1808, 9291 }, new int[] { -9966, 4131, -4087, 3406, -1416, -6553, 4493, -6998, 4115, -3910 })]
		[TestCase(new int[] { -3945, -4398, 6359, -8831, 4513, -4144, -8703, 855, 8389, -9600 }, new int[] { -6290, -275, -8597, 2708, 7652, -971, 3498, 6433, 8132, -3810 }, new int[] { -1006, -7546, -9995, -9288, 7171, -5601, -2074, -9493, 8296, -6333 }, new long[] { 8095, -4535, -4496, -1078, -3660, -2585, -810, 1201, 5252, 6552 }, new int[] { 5464, 5584, -8296, -2206, 5583, 308, 2730, 3202, 5753, 9553 })]
		public void Any(int[] a, int[] b, int[] c, long[] d, int[] val)
		{
			NKeyHash<int, int, int, long, int> nKeyHash = new NKeyHash<int, int, int, long, int>(UnderlyingHashType.Dictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<int, int, int, long, int>(UnderlyingHashType.ConcurrentDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<int, int, int, long, int>(UnderlyingHashType.SortedDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<int, int, int, long, int>(UnderlyingHashType.HashTable);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());
		}

		[TestCase(new int[] { -6397, -4401, 5648, -6003, 115, 7928, -9208, 2557, 4723, -7697 }, new double[] { 0.912255548831194, 0.211064776503977, 0.623989876650269, 0.318441296610255, 0.511957573011498, 0.991953473068752, 0.11488510859892, 0.0590588734760223, 0.0790172829660667, 0.536242936521882 }, new short[] { 3408, -9249, 2209, -4872, -3136, 1667, 4721, -5247, 8742, 3718 }, new int[] { -9962, -9402, 7575, 1825, -7261, -8182, 3540, -2794, -4861, 8622 }, new double[] { 0.733725755351468, 0.151361740264744, 0.348952215327393, 0.274565211625102, 0.86693011450904, 0.30436773472669, 0.0125442612974645, 0.341721835239661, 0.275723277253901, 0.985781488933499 })]
		[TestCase(new int[] { -2350, 6877, -6711, 7201, -6312, -7146, 3387, 521, 7131, 8447 }, new double[] { 0.160360941272397, 0.801907387004191, 0.690759349936042, 0.0502659809078397, 0.11327007418185, 0.882437739932182, 0.332262418853241, 0.0326840975474027, 0.181574610612157, 0.421116414210348 }, new short[] { -3701, 5091, 6042, -7042, 6049, 381, 3769, -3280, -2211, -9222 }, new int[] { 1416, -2112, 9236, 9026, -3930, -6841, 7308, -9625, -1860, 9883 }, new double[] { 0.421466322346342, 0.150933717447768, 0.50367531576365, 0.334491468190444, 0.77082776360718, 0.931818368347277, 0.460602390328703, 0.298686234419554, 0.161295137443251, 0.984492374576857 })]
		[TestCase(new int[] { 9441, 9596, -6796, 7091, 3416, 2556, -9163, -9668, -8847, 3305 }, new double[] { 0.454149304634961, 0.333436451541929, 0.136672060534671, 0.817788621325879, 0.351577034849477, 0.765979522264553, 0.840034058243052, 0.739395541483255, 0.746791445997912, 0.955366199349689 }, new short[] { -9659, -3728, 2514, -6252, 9992, -6719, -4980, -646, -2459, 7413 }, new int[] { -8829, -2203, -6506, -1901, -8664, 1819, -5314, -7853, -4389, 3512 }, new double[] { 0.11614456172853, 0.848907633148556, 0.961112169065099, 0.741650130479434, 0.540063953744277, 0.0880298708044132, 0.0142616569130969, 0.685886694437771, 0.982914433340968, 0.00484824134262662 })]
		[TestCase(new int[] { -8163, 4423, 1037, -5880, 9349, 3170, -2917, 9454, 7098, 137 }, new double[] { 0.376922687225473, 0.574087802122388, 0.639539984352672, 0.186887690884475, 0.606836716461385, 0.0643314160706156, 0.158793204072301, 0.731738218447072, 0.751081710565408, 0.760609807335124 }, new short[] { 634, 4654, -822, -8575, 6783, -6637, -2950, 7680, 2945, 8231 }, new int[] { -7004, 1300, -304, -2556, 5577, -3254, 6757, 9373, -1251, -1836 }, new double[] { 0.236844372580221, 0.261448321985755, 0.252309694538037, 0.773631548403591, 0.298695531347159, 0.542056759606142, 0.209367648795884, 0.774224478180625, 0.134813414018049, 0.475732537673662 })]
		[TestCase(new int[] { 8583, -4349, 8695, -5553, -537, -2819, -4753, -385, -2665, 5987 }, new double[] { 0.306089992777486, 0.470035676597634, 0.325488473905944, 0.943336550119955, 0.357146145476562, 0.811875752551423, 0.0893307244821129, 0.267387411215989, 0.407973188165563, 0.269583623516179 }, new short[] { -5471, -6197, -4113, -3141, 475, -4593, -390, 3704, 5449, -4056 }, new int[] { 9173, 1564, 4984, -6568, 9646, 7343, 2604, -4750, 7980, -1601 }, new double[] { 0.0749379876418682, 0.357201539146342, 0.602007008903663, 0.638009383640256, 0.102075348190067, 0.766808695982587, 0.935959848079812, 0.308973144418082, 0.416485402927029, 0.486819778795736 })]
		[TestCase(new int[] { -945, 8838, -2674, 7303, -5013, 4782, 9763, 1837, 3970, -5943 }, new double[] { 0.878558819591328, 0.577054910164818, 0.708243864918241, 0.0695424224573851, 0.840707365814926, 0.72786289394268, 0.720761912279186, 0.153923613090964, 0.960952995792475, 0.489943479881596 }, new short[] { -6366, 6536, -2632, 9760, -6106, 7383, 1761, 3125, -5182, 5138 }, new int[] { -3312, -6569, -4624, -4286, 6888, -9664, -5759, 7680, 8443, -5134 }, new double[] { 0.878986670113628, 0.0383533365271768, 0.563913260383491, 0.696243752118314, 0.541338965548826, 0.497883077477051, 0.648957674228101, 0.532464586446278, 0.797302017825331, 0.374212454247387 })]
		[TestCase(new int[] { -9078, 5640, -3039, 8529, -3895, 2516, 1472, -2436, 3411, -2397 }, new double[] { 0.151085886243305, 0.331917936136908, 0.351047592866722, 0.941582452478624, 0.868468749741311, 0.70707406602198, 0.308280117953327, 0.422585947635856, 0.225103579566397, 0.823973577387619 }, new short[] { 317, 6733, -5365, 4354, 2218, -7133, -4740, 3441, -1065, 3934 }, new int[] { -5594, -8886, 7179, 7331, 4217, 1045, 6468, -3155, 9608, -5627 }, new double[] { 0.443091302385131, 0.833799921830092, 0.213459819189021, 0.542123194105049, 0.0921398960482981, 0.54706873397672, 0.687305743660454, 0.622330807904867, 0.827775002377003, 0.834264899526846 })]
		[TestCase(new int[] { -6207, -5472, -3852, 9465, 7165, -5812, 1006, 2605, -3687, -6761 }, new double[] { 0.362882749812157, 0.901548486622771, 0.93143944951307, 0.973821596230297, 0.159868342410712, 0.0954785868970112, 0.472921894617808, 0.484419025706322, 0.230672497409709, 0.316167826911513 }, new short[] { 7671, 9320, -1157, -9868, -2382, 3641, 2464, 3790, 2511, -8721 }, new int[] { -880, 2812, 6885, 2249, 143, 9876, 4964, 7712, -9832, 31 }, new double[] { 0.00194766186268426, 0.193171669819007, 0.0266477558885923, 0.818566428412947, 0.855708330802484, 0.541542815762359, 0.902360472317022, 0.239638222958724, 0.382254851694337, 0.996661309151287 })]
		[TestCase(new int[] { -8516, -5941, -2166, 232, 9012, -5528, 5684, -3982, 1848, -6474 }, new double[] { 0.586070725967209, 0.860793481050429, 0.00470561767216102, 0.251697037486218, 0.705930790261333, 0.722248545252834, 0.0572294895803693, 0.318967911563333, 0.46666199735676, 0.165990966449487 }, new short[] { -3055, 1744, -477, 4581, -3715, 3808, 8787, 2470, -6983, 6786 }, new int[] { 5593, -2327, -3853, 2578, 9793, -4937, -5019, -3345, 3235, -4327 }, new double[] { 0.20961965676845, 0.447397784538287, 0.293221435646164, 0.832064992204339, 0.915510383860911, 0.141154180812256, 0.188466052146846, 0.774950718402374, 0.112635638151614, 0.13345978554965 })]
		[TestCase(new int[] { -313, 1667, 5458, -5674, 2988, -262, 4534, 3251, -6051, -4795 }, new double[] { 0.284156217837779, 0.16071014020625, 0.150044339778854, 0.753106706195095, 0.396511514855787, 0.202450829652348, 0.553488552828081, 0.375779609370874, 0.261955801053883, 0.45284278665336 }, new short[] { -534, 4489, 3142, -6338, 9126, 7995, -4118, 2880, 6270, -6538 }, new int[] { 39, -6710, 218, -9652, -2899, -6072, 2212, -8178, 9588, 56 }, new double[] { 0.526317113324216, 0.586408971150596, 0.13532481116025, 0.401598452311754, 0.999447670299303, 0.0489095165621999, 0.297353444759433, 0.540114729451069, 0.435553477348552, 0.713059554208563 })]
		public void Forloop(int[] a, double[] b, short[] c, int[] d, double[] val)
		{
			bool[] found = new bool[9];
			bool allFound = false;
			NKeyHash<int, double, short, int, double> nKeyHash = new NKeyHash<int, double, short, int, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, short, int, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, short, int, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<int, double, short, int, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, short, int, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, short, int, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<int, double, short, int, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, short, int, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, short, int, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<int, double, short, int, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, short, int, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, short, int, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);
		}

		[TestCase(8523, 0.589918116382285, -4801, 4991, -6142, -8344)]
		[TestCase(6979, 0.024321026180089, 5164, -7605, 2995, -7345)]
		[TestCase(-2038, 0.200177384633654, 1835, -750, -2074, 5181)]
		[TestCase(8529, 0.886863680038072, 1783, -4888, -6327, 8148)]
		[TestCase(2049, 0.753918128439187, -5829, -7988, 1707, 3785)]
		[TestCase(3028, 0.851119089336656, -2856, 1904, -4597, -9584)]
		[TestCase(6622, 0.229902488752223, -3799, -1127, 4747, -7779)]
		[TestCase(2866, 0.879740226957826, -2017, -6706, -7158, -5291)]
		[TestCase(-7574, 0.125218118133591, -1671, 5077, 4664, 5465)]
		[TestCase(-6587, 0.670687388941034, -1873, -2951, -7057, -1221)]
		public void Add(int a, double b, int c, long d, long e, long val)
		{
			NKeyHash<int, double, int, long, long, long> nKeyHash = new NKeyHash<int, double, int, long, long, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e));

			nKeyHash = new NKeyHash<int, double, int, long, long, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e));

			nKeyHash = new NKeyHash<int, double, int, long, long, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e));

			nKeyHash = new NKeyHash<int, double, int, long, long, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e));
		}

		[TestCase(0.775542708940591, 6056, 8600, true, 2625, -6671, -1017)]
		[TestCase(0.482928614822649, -7010, -436, true, -3922, 166, -1243)]
		[TestCase(0.611883972125074, 9461, 9584, false, -4541, 7950, -7642)]
		[TestCase(0.583833793915731, -1507, 1987, true, -425, -8343, 7420)]
		[TestCase(0.569374361806258, 9778, 3441, true, -1770, 2008, -2217)]
		[TestCase(0.339184058056764, -3893, 1003, false, -4999, -3904, -4992)]
		[TestCase(0.623882826242541, 3847, -8829, false, 6880, 4185, 6540)]
		[TestCase(0.901101431297651, 5383, 9573, true, 1413, 3616, -6165)]
		[TestCase(0.378222424713067, -3386, 9132, false, -8327, 1561, 8270)]
		[TestCase(0.160482045803444, 6121, -9242, true, 8157, -9024, -4545)]
		public void Upsert(double a, long b, int c, bool d, int e, long val, long newVal1)
		{
			NKeyHash<double, long, int, bool, int, long> nKeyHash = new NKeyHash<double, long, int, bool, int, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e));
			nKeyHash.Upsert(a, b, c, d, e, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e));

			nKeyHash = new NKeyHash<double, long, int, bool, int, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e));
			nKeyHash.Upsert(a, b, c, d, e, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e));

			nKeyHash = new NKeyHash<double, long, int, bool, int, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e));
			nKeyHash.Upsert(a, b, c, d, e, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e));

			nKeyHash = new NKeyHash<double, long, int, bool, int, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e));
			nKeyHash.Upsert(a, b, c, d, e, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e));
		}

		[TestCase(9198, 4643, 0.540919419164266, true, 2692, 0.373503186913907)]
		[TestCase(-9119, 3365, 0.219763166839147, true, 5565, 0.840799104813858)]
		[TestCase(8391, -6051, 0.960961633343697, true, 1869, 0.341337718228501)]
		[TestCase(-6670, 4533, 0.336784310330071, false, 7725, 0.0206776904038515)]
		[TestCase(-5798, 8722, 0.660569063229751, true, -5334, 0.340097151855052)]
		[TestCase(-9749, 5463, 0.977891184844957, true, -5364, 0.646008480641064)]
		[TestCase(5794, -1106, 0.517943979016479, true, 681, 0.245281322507784)]
		[TestCase(8813, -7744, 0.259496092917163, false, 9765, 0.851314935298318)]
		[TestCase(-3764, 3863, 0.835591200662587, true, 7127, 0.866097316549205)]
		[TestCase(614, -68, 0.845906171410301, true, -3961, 0.698475340706518)]
		public void Delete(long a, int b, double c, bool d, int e, double val)
		{
			NKeyHash<long, int, double, bool, int, double> nKeyHash = new NKeyHash<long, int, double, bool, int, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Delete(a, b, c, d, e);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));

			nKeyHash = new NKeyHash<long, int, double, bool, int, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Delete(a, b, c, d, e);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));

			nKeyHash = new NKeyHash<long, int, double, bool, int, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Delete(a, b, c, d, e);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));

			nKeyHash = new NKeyHash<long, int, double, bool, int, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Delete(a, b, c, d, e);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));
		}

		[TestCase(7257, -7873, 9311, 0.314953152702634, -6302, false)]
		[TestCase(6467, -873, -6147, 0.0915029878222863, 453, true)]
		[TestCase(5223, -6829, 8956, 0.809254127931434, -5147, true)]
		[TestCase(90, -2248, 8335, 0.111793868295752, -4347, true)]
		[TestCase(6001, -4609, -7144, 0.819468638309962, 9942, false)]
		[TestCase(6204, -8778, -1362, 0.25440467579961, -6225, true)]
		[TestCase(7712, 9934, 167, 0.686767454113237, 6030, false)]
		[TestCase(3469, -1215, 9476, 0.0723596723155862, 5180, false)]
		[TestCase(5012, 8072, -5059, 0.894943516186878, -2496, false)]
		[TestCase(-8233, 5021, 6473, 0.2304361561455, 296, true)]
		public void Remove(long a, int b, int c, double d, long e, bool val)
		{
			NKeyHash<long, int, int, double, long, bool> nKeyHash = new NKeyHash<long, int, int, double, long, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Remove(a, b, c, d, e);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));

			nKeyHash = new NKeyHash<long, int, int, double, long, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Remove(a, b, c, d, e);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));

			nKeyHash = new NKeyHash<long, int, int, double, long, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Remove(a, b, c, d, e);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));

			nKeyHash = new NKeyHash<long, int, int, double, long, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Remove(a, b, c, d, e);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));
		}

		[TestCase(false, true, 9394, false, 8470, -5082)]
		[TestCase(false, true, 1720, true, -1233, 6866)]
		[TestCase(true, true, 209, true, -8622, -8129)]
		[TestCase(true, true, 3717, false, -6677, -1248)]
		[TestCase(false, true, -361, true, 3613, 5951)]
		[TestCase(true, true, -6839, true, 4613, -4953)]
		[TestCase(false, true, 9600, false, 7264, 1148)]
		[TestCase(true, true, -3743, true, -618, 5741)]
		[TestCase(false, false, 8700, false, -2985, -2682)]
		[TestCase(true, false, -3186, true, -9848, -4632)]
		public void ContainsKey(bool a, bool b, int c, bool d, short e, int val)
		{
			NKeyHash<bool, bool, int, bool, short, int> nKeyHash = new NKeyHash<bool, bool, int, bool, short, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Delete(a, b, c, d, e);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));

			nKeyHash = new NKeyHash<bool, bool, int, bool, short, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Delete(a, b, c, d, e);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));

			nKeyHash = new NKeyHash<bool, bool, int, bool, short, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Delete(a, b, c, d, e);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));

			nKeyHash = new NKeyHash<bool, bool, int, bool, short, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Delete(a, b, c, d, e);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));
		}

		[TestCase(3706, -5017, true, -4836, 6512, 0.384042185444404)]
		[TestCase(-7731, 5924, false, -7429, -1374, 0.594530101676718)]
		[TestCase(-7503, -8439, false, 3896, -6236, 0.673933269769854)]
		[TestCase(7249, 1503, false, 5841, 4729, 0.527622664592984)]
		[TestCase(8231, 2828, true, 4234, -5253, 0.4245694002251)]
		[TestCase(-1592, 8376, true, -2003, -4099, 0.219996455693616)]
		[TestCase(5800, -7065, false, 1020, -4952, 0.554476452318242)]
		[TestCase(-3723, 2945, true, 4922, -1850, 0.929542734720531)]
		[TestCase(-8354, -8617, false, -737, 8516, 0.000654094852811701)]
		[TestCase(4768, 7863, true, -611, -3068, 0.184201681606565)]
		public void Clear(long a, int b, bool c, long d, int e, double val)
		{
			NKeyHash<long, int, bool, long, int, double> nKeyHash = new NKeyHash<long, int, bool, long, int, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d), 0);

			nKeyHash = new NKeyHash<long, int, bool, long, int, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d), 0);

			nKeyHash = new NKeyHash<long, int, bool, long, int, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d), 0);

			nKeyHash = new NKeyHash<long, int, bool, long, int, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d), 0);
		}

		[TestCase(1975, 4498, 5658, 9321, 8094, -9170)]
		[TestCase(-143, -3769, -3543, 2401, -433, -8214)]
		[TestCase(5115, -6689, -5320, 4954, 2590, -6635)]
		[TestCase(-6518, 9144, 9859, 9900, 3226, -1964)]
		[TestCase(4147, -3586, 6002, 9937, 6885, 7013)]
		[TestCase(9908, 3725, 8782, -4810, -7052, 3649)]
		[TestCase(-7067, -7677, -6712, -5817, 9405, 2287)]
		[TestCase(3556, -7632, -1701, -1532, 4271, -6377)]
		[TestCase(9003, 9179, 5441, -2184, -930, 5015)]
		[TestCase(387, 2073, -8727, -2375, -4824, 1681)]
		public void Get(long a, int b, int c, long d, long e, int val)
		{
			NKeyHash<long, int, int, long, long, int> nKeyHash = new NKeyHash<long, int, int, long, long, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));

			nKeyHash = new NKeyHash<long, int, int, long, long, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));

			nKeyHash = new NKeyHash<long, int, int, long, long, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));

			nKeyHash = new NKeyHash<long, int, int, long, long, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e));
		}

		[TestCase(-6998, -72, -9636, 1029, 2023, 269)]
		[TestCase(-9921, 9297, 9738, -2427, -3654, 860)]
		[TestCase(9735, -4318, 2140, 2381, -9065, 7704)]
		[TestCase(-8426, 2094, -5343, -6232, 4800, 873)]
		[TestCase(2377, 5306, 7145, 1604, 9355, -511)]
		[TestCase(-7055, -5885, -125, 2456, -4533, -5654)]
		[TestCase(-6740, -2024, -2843, -4827, -2262, -228)]
		[TestCase(5276, -7183, -4271, 411, -2112, 9493)]
		[TestCase(9540, 2443, -1016, 1638, -2129, -9601)]
		[TestCase(1185, 9232, 5126, -511, 8650, 6715)]
		public void TryGetValue(short a, int b, int c, int d, long e, long val)
		{
			long fetch;
			bool b1;
			NKeyHash<short, int, int, int, long, long> nKeyHash = new NKeyHash<short, int, int, int, long, long>(UnderlyingHashType.Dictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(long));
			nKeyHash.Add(a, b, c, d, e, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<short, int, int, int, long, long>(UnderlyingHashType.ConcurrentDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(long));
			nKeyHash.Add(a, b, c, d, e, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<short, int, int, int, long, long>(UnderlyingHashType.SortedDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(long));
			nKeyHash.Add(a, b, c, d, e, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<short, int, int, int, long, long>(UnderlyingHashType.HashTable);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(long));
			nKeyHash.Add(a, b, c, d, e, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);
		}

		[TestCase(new long[] { -9012, -2720, -9784, -2203, -877, 2958, 549, 6399, -5642, 4883 }, new int[] { -1509, 1985, -4853, -8032, -2580, 7651, 2063, -3087, -9493, 1305 }, new double[] { 0.812204754358253, 0.473850669559953, 0.0635901820210694, 0.311606433387662, 0.460894953208461, 0.688525079138821, 0.466190714140511, 0.521996047125196, 0.602475049720367, 0.963220302929739 }, new long[] { -170, -4973, 8187, -6502, -574, -9391, 9278, 1744, -6677, 6024 }, new short[] { -8909, 1469, 6040, 6300, 743, -6858, -5656, 6684, -702, 5469 }, new short[] { 6409, 3029, -254, 3321, -4012, 1508, -3991, 3982, 8577, 5351 })]
		[TestCase(new long[] { -6364, -9889, -5648, -4907, -4944, -6534, 3797, -8350, 2540, -3188 }, new int[] { 8372, -9680, -6408, -5519, 216, -5225, 3435, -5028, 5488, -3922 }, new double[] { 0.471369785476182, 0.631937596309901, 0.0571358707068189, 0.828954070261192, 0.142723325240763, 0.83998554658144, 0.764000441769138, 0.2433042275921, 0.875457025075078, 0.895810420110733 }, new long[] { 4599, -4703, 3165, -2029, 2389, -9019, -2880, 948, 1245, -2721 }, new short[] { -656, -7305, -5855, -7513, 7096, 6090, -560, -4733, -6894, -8785 }, new short[] { 8072, -8961, 8492, 2501, -4075, 995, 8965, -2228, -7761, -1744 })]
		[TestCase(new long[] { -1814, -1068, -5859, 4624, 2211, 3076, -2846, 5619, 2089, -763 }, new int[] { 7654, -7511, 3724, -1789, 6732, -3266, -1505, 8656, 9480, -3236 }, new double[] { 0.368024183608603, 0.500719232717864, 0.0880472008548897, 0.814797460946626, 0.992163941260504, 0.678142523243158, 0.340140599450162, 0.0331891058167392, 0.102298214613599, 0.0697093187224629 }, new long[] { -7985, 9346, -1289, -7008, 9092, -9586, 8553, -480, 273, -5978 }, new short[] { -1062, 3818, 3175, 3868, -6441, 5584, -2687, 282, 5768, 9190 }, new short[] { -7498, -9689, -1710, 5473, -9104, 8169, -2829, -2155, 4781, 8647 })]
		[TestCase(new long[] { -3725, -3510, 3573, 695, -2776, 8306, 3776, 733, -882, 6320 }, new int[] { -1820, 8974, -1616, 5460, 7825, 3541, 6838, -2107, 2737, -5741 }, new double[] { 0.312524782639241, 0.825994572521185, 0.244744213877592, 0.142751352462336, 0.944650656983559, 0.0852183555649679, 0.55291445625616, 0.661820294643669, 0.104792478077483, 0.0461380547127398 }, new long[] { 3241, 710, 4736, 1625, 7745, -7551, -9754, -7519, -3354, -4748 }, new short[] { -8190, 6577, -8833, 9447, 1011, -6474, 1925, 2827, 7647, -2646 }, new short[] { -8667, 9277, 5105, 523, 2398, -245, -8404, 719, 1802, -4481 })]
		[TestCase(new long[] { -2750, -9458, -1361, -1805, -6920, 7468, -5760, 6757, 7714, 5377 }, new int[] { 3296, 4358, -8752, -2513, -7549, -327, 5353, -4552, 1843, 5367 }, new double[] { 0.488909465954131, 0.911509638145338, 0.7794017716215, 0.737119178630933, 0.979547282205684, 0.698186938510363, 0.780186979463411, 0.210681939130035, 0.961345349420489, 0.399624759517435 }, new long[] { -9145, -474, 677, -8872, 8001, -8731, -2059, 2970, 6368, 3542 }, new short[] { 9285, 5167, 5112, -7728, 4056, -3026, 8030, -2379, -1925, -7273 }, new short[] { 4399, 6147, 8874, 6434, 5739, -981, -5047, 3895, -1396, -884 })]
		[TestCase(new long[] { -8133, -9974, 7530, -277, 4523, -6228, -6317, -9879, -516, -8817 }, new int[] { -8267, -7615, -922, 8300, 6080, 4609, -6882, 3317, -9313, 2617 }, new double[] { 0.796620278990185, 0.399185385275253, 0.806977682657064, 0.825041538954266, 0.679646614324137, 0.235280338318683, 0.532504270566862, 0.712104094080675, 0.269337786021334, 0.449202019930446 }, new long[] { 6314, 4043, -5632, -2745, 1676, 9260, 7636, -4608, -2253, 286 }, new short[] { -6708, 7910, 8135, -3107, -9005, 2015, -2929, -9424, -9644, -8868 }, new short[] { -4098, 1634, 3210, 5985, 3182, 3881, -6114, -8968, 6128, -181 })]
		[TestCase(new long[] { 3120, -560, 4732, -9499, -5133, -2311, 8016, -8175, -3375, 6818 }, new int[] { 6972, 7725, -4428, 398, -673, 8019, -152, -752, 5506, -8422 }, new double[] { 0.881765779518413, 0.503761399771907, 0.694396528273074, 0.212817728152879, 0.154127497763432, 0.234018239767299, 0.0416859416485233, 0.419053484880856, 0.703557166598531, 0.88976491237514 }, new long[] { 5376, 6606, -738, 7926, 7165, 3851, -6820, 7635, -7973, 3305 }, new short[] { 3998, -4752, 3950, -6464, -5841, -1824, -3935, -7187, -3340, 5161 }, new short[] { -5965, 4637, -4476, 4551, 2183, -6954, 5551, 476, 7416, -9813 })]
		[TestCase(new long[] { -3145, -364, -2247, -1171, -8556, -9633, -1534, -2356, 3232, 5474 }, new int[] { 4841, 2210, -2778, -7798, -2421, 2388, 6123, 352, -9900, 4906 }, new double[] { 0.930830543828584, 0.90110251582279, 0.0860926332353114, 0.945451880314132, 0.688049597054743, 0.0369209288791385, 0.554185288284992, 0.735439652453847, 0.287204469687866, 0.706037141245807 }, new long[] { 8299, 2702, -9779, -8159, -3547, -5636, 7493, -4877, -7906, -6207 }, new short[] { 9708, 8419, -421, 1184, -9678, 1823, -2582, -6676, -3025, 9793 }, new short[] { -3078, -4800, 377, -7489, -8429, -1167, -2085, -1156, 5067, -9295 })]
		[TestCase(new long[] { -717, 3756, -8099, 9111, 7174, -7859, 1991, -4618, 5748, -6784 }, new int[] { 4893, 1001, -1739, 6306, 5196, -9802, -1556, 537, 8587, -8061 }, new double[] { 0.66607610865779, 0.388064567180381, 0.386730704170992, 0.297466569252995, 0.359985941722983, 0.655060442469577, 0.116223529966652, 0.885482584072967, 0.0135288341033872, 0.880983380079727 }, new long[] { 6448, -1349, 54, -8610, 4509, -4046, 6519, 466, 4009, 8179 }, new short[] { 9831, -7963, -2426, -6240, -5099, 5918, 6938, 4070, -2687, -8626 }, new short[] { -9610, 7375, 254, 3129, -2617, -8478, -3977, 5949, 1912, -5925 })]
		[TestCase(new long[] { 9814, 4281, -4888, 8128, -3233, -3755, -9052, -3128, -8202, -756 }, new int[] { -6323, 7975, 6527, -9590, -7893, 1285, -9811, -6023, -8950, 1280 }, new double[] { 0.808124115135578, 0.412670852808594, 0.5198668360337, 0.944889684182075, 0.861537116980896, 0.953639756866563, 0.919805132280944, 0.846241526699737, 0.700304130418368, 0.649457646370613 }, new long[] { 9930, -9429, 8553, -64, 8364, -4449, 6924, -556, 6992, 8655 }, new short[] { 4971, 67, 2273, 8067, 7695, -7586, -9150, -153, 1024, 6096 }, new short[] { -8666, -7952, 4900, -9367, -2088, 1561, -6114, -3786, -9100, -2306 })]
		public void Count(long[] a, int[] b, double[] c, long[] d, short[] e, short[] val)
		{
			NKeyHash<long, int, double, long, short, short> nKeyHash = new NKeyHash<long, int, double, long, short, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0]), 9);

			nKeyHash = new NKeyHash<long, int, double, long, short, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0]), 9);

			nKeyHash = new NKeyHash<long, int, double, long, short, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0]), 9);

			nKeyHash = new NKeyHash<long, int, double, long, short, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0]), 9);
		}

		[TestCase(new short[] { 9421, -3407, -7956, 6554, 4360, 743, -3017, -7606, 6307, -3904 }, new short[] { 5978, 2328, -8797, 4817, 8223, -1450, -4099, 7908, 1656, 7884 }, new long[] { -4330, 7921, -7974, -3195, -8333, 711, -1454, -699, 808, 950 }, new int[] { 7201, -6532, -1243, 4589, -7009, 4255, -2195, 4468, -8263, 588 }, new int[] { 5063, 2508, -5675, -8183, 5581, 1555, -4987, -3919, -531, 9297 }, new bool[] { true, true, true, true, true, false, false, true, true, false })]
		[TestCase(new short[] { -7800, 7681, 1583, -4641, -1106, 2512, -6426, -3388, 1827, -6031 }, new short[] { -9253, 1431, 6173, -8931, -7177, 3159, 3598, -9790, 1221, 110 }, new long[] { -4299, -7534, 9830, 1510, 2828, -7753, -3684, 7329, 7151, -8508 }, new int[] { -311, 2564, 9578, 8085, -1609, 7381, -9073, 8964, 2922, -6929 }, new int[] { -2016, 8399, 4251, -4499, 8551, -3309, 8781, 6083, -1394, -5721 }, new bool[] { false, false, false, false, true, true, true, false, true, false })]
		[TestCase(new short[] { -3801, -3757, -541, 337, 4278, -1818, 1851, 8086, 2677, -4560 }, new short[] { 2234, 4632, -2713, -1848, -7872, -2699, -1787, 4330, 2958, -3861 }, new long[] { -6535, 231, -1274, 2874, 3589, -4669, -1452, 4799, -9860, -1343 }, new int[] { 9530, -9146, -3563, -3725, 6871, -8258, -1057, -6084, 1221, 371 }, new int[] { 4838, -9303, -6593, -6833, 2042, 3267, 7071, 5865, -7346, 648 }, new bool[] { true, false, false, false, false, true, true, true, true, false })]
		[TestCase(new short[] { 9632, 7051, 7947, -5978, -4091, 1382, -1802, -8987, 1279, -9612 }, new short[] { 8356, -5701, -6889, -7411, 1299, -7231, -3174, -4440, -9166, -9676 }, new long[] { -1741, 2681, 2147, -510, 7134, 6011, 3738, -9954, -6908, -9093 }, new int[] { -5776, 2358, -2832, -7726, 737, 7786, -7252, 9384, 7256, -9338 }, new int[] { -4929, 6059, -5413, -7732, 2290, -2776, -9589, -5473, 5092, -9583 }, new bool[] { false, true, true, true, false, false, false, false, false, false })]
		[TestCase(new short[] { 7642, -1846, 7920, 374, 6162, -4000, 7129, -9162, 1849, 3511 }, new short[] { -9977, -2559, -1697, -9827, 5251, 2198, -1904, -118, 7198, -88 }, new long[] { 5601, -787, -5047, -7324, 1763, 2264, 6607, 741, -8416, -6213 }, new int[] { 2882, 4287, 2498, -2637, -6982, 6916, 8137, 4211, -3896, -3707 }, new int[] { 93, 9571, 2676, -8418, -9604, -8297, -6343, 5579, -8825, -1508 }, new bool[] { true, true, true, true, true, false, false, true, true, false })]
		[TestCase(new short[] { -608, -3611, 9253, -1935, -9369, -4265, 4940, -9059, 7153, 8333 }, new short[] { 4060, 3883, -6221, 906, 9817, 6028, 6535, -6627, -7719, 62 }, new long[] { -1390, -8971, -431, 3091, -5069, 7858, -6971, 5523, 3068, 4585 }, new int[] { 3715, -7108, 5600, -7793, 6900, -6294, -9680, -5387, -9048, 4660 }, new int[] { -3239, -7283, 8424, -7160, 4429, -5027, 1245, -9645, 7155, 8263 }, new bool[] { true, true, true, false, true, false, true, false, false, false })]
		[TestCase(new short[] { -7293, 9416, -2128, -7430, -5380, 1170, 8281, -8426, 4005, 6113 }, new short[] { 5710, 1923, -7578, -2380, -6696, -4106, -7396, -3270, 8660, 9956 }, new long[] { -3386, -7324, 8366, 4803, -7308, 3885, -76, -2945, -3083, -1461 }, new int[] { -3115, 4156, -8521, 8178, 1954, -2656, 4844, 5856, 8219, -6739 }, new int[] { -3310, -327, -3652, -8956, -7445, 9969, 7408, -4651, -4754, -604 }, new bool[] { false, true, false, false, true, false, false, true, true, true })]
		[TestCase(new short[] { -8751, 1228, 4655, -4531, -770, -8445, 445, -5757, 5663, 5958 }, new short[] { 1048, -3253, -1491, 5401, 3268, 6939, 6326, 7324, 2250, -7279 }, new long[] { 6475, -5424, -8190, 7520, -7221, 6791, -3343, 8300, -7977, 1923 }, new int[] { -3706, -8221, 5979, -2513, -7986, 5460, 5016, -9119, 1812, -8999 }, new int[] { -474, 3166, -315, -714, 8346, 9013, -8416, 2098, -92, 9215 }, new bool[] { false, false, false, true, true, true, false, true, false, true })]
		[TestCase(new short[] { 4897, 2143, -7779, -6258, -334, -728, 765, -8976, 3388, 7806 }, new short[] { -8075, 5447, -4486, 1251, 3194, -6690, 4889, 2522, 9172, -6235 }, new long[] { 5208, 4557, -1606, -7194, -1780, -7429, -9037, 8822, 3229, -4659 }, new int[] { -3958, 7880, 8188, 9374, -3898, 7380, 947, -4055, 9618, -923 }, new int[] { -1751, -9438, 8708, 2099, 7292, -1743, 8210, -435, -6037, 948 }, new bool[] { false, true, true, true, true, false, false, true, true, false })]
		[TestCase(new short[] { -1689, 1942, -2206, -1950, 1766, -5957, 7257, -3862, -4849, 5813 }, new short[] { 2361, -1053, 2903, 97, 5514, 4648, 5847, 6292, -4487, 9962 }, new long[] { -5641, 1396, 4860, -7718, -6441, -855, 9918, 9262, -7852, -4238 }, new int[] { 3630, 1532, 423, 2522, -9232, 6305, 2767, 659, -9665, 3250 }, new int[] { 998, 2073, -5585, -1852, 8585, 2835, -6006, -2135, -6587, -7419 }, new bool[] { false, false, true, true, false, true, true, false, false, false })]
		public void Any(short[] a, short[] b, long[] c, int[] d, int[] e, bool[] val)
		{
			NKeyHash<short, short, long, int, int, bool> nKeyHash = new NKeyHash<short, short, long, int, int, bool>(UnderlyingHashType.Dictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<short, short, long, int, int, bool>(UnderlyingHashType.ConcurrentDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<short, short, long, int, int, bool>(UnderlyingHashType.SortedDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<short, short, long, int, int, bool>(UnderlyingHashType.HashTable);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());
		}

		[TestCase(new short[] { 8522, -9618, -668, 9208, -8118, -4811, 5959, 2261, -1034, 2283 }, new double[] { 0.349141493136595, 0.335681651409567, 0.184721618511119, 0.536080199543424, 0.257537962523074, 0.602763450985199, 0.792588028960204, 0.978372728907677, 0.0634343275164414, 0.308695334619235 }, new short[] { 7629, 4865, -215, -6146, 9223, -2743, -3831, 7709, -871, 3003 }, new double[] { 0.404157294148652, 0.251213685726381, 0.298207590960994, 0.887892852019469, 0.715638615524228, 0.180637216745241, 0.926668794325864, 0.210130786621073, 0.034924177934846, 0.965182270838498 }, new short[] { 1496, -8358, -3407, 454, -69, 367, -8181, 3769, 7471, 2066 }, new short[] { -7856, -5576, 8120, 6008, -6800, -6342, 595, -4521, 9983, 4624 })]
		[TestCase(new short[] { 9019, 8249, -6865, 5960, -5798, -8040, -9249, -4063, 6408, -8461 }, new double[] { 0.676094656659334, 0.582457242339131, 0.943448550972831, 0.0982520566779431, 0.733886347494035, 0.799492818210038, 0.41369941337672, 0.966511559657059, 0.696124451093434, 0.442822158077183 }, new short[] { -4560, 2397, -9761, 7060, 861, -6339, -3096, -45, 4559, 655 }, new double[] { 0.650850199000375, 0.652756530164162, 0.210896638320245, 0.303679527390599, 0.0141647919147111, 0.662274886696727, 0.925356375950089, 0.531555185342, 0.312675963301526, 0.398592834546507 }, new short[] { -381, 5880, 7360, 5933, 8544, 493, -4445, 6155, -8667, -2791 }, new short[] { 5382, 1265, 1555, 1128, -813, -3377, 8012, -3927, -4899, -9457 })]
		[TestCase(new short[] { 5054, 794, 1376, -4246, -1478, -9532, -2568, 2795, -8317, -8566 }, new double[] { 0.874136442259949, 0.88214422803472, 0.653835596355533, 0.297531616546927, 0.961902555060528, 0.477896942048286, 0.751834673691464, 0.215150871879957, 0.925789848866775, 0.0183951007287927 }, new short[] { 8104, 747, -1377, -2648, 5271, -8247, -8499, 3089, 6886, 3660 }, new double[] { 0.761612579581147, 0.621735554943669, 0.276577357797221, 0.285622883255418, 0.6458301100162, 0.941173930159385, 0.2251851089416, 0.580404303772563, 0.370670374655477, 0.903925165489281 }, new short[] { -6937, 2758, 4473, 9898, -274, 7739, 8187, -4394, 1889, 9627 }, new short[] { 1585, 3709, -2443, -5267, -7563, -5691, -7827, -5973, 480, -3230 })]
		[TestCase(new short[] { 8966, 4341, 5907, -1978, -3799, -4951, 2111, -2635, 3033, -9584 }, new double[] { 0.252711833106685, 0.171430369918901, 0.84448049722448, 0.0218646833774935, 0.86528005584389, 0.267330474344702, 0.813659255306078, 0.436154136637298, 0.881263545659028, 0.876608214749307 }, new short[] { -6436, 5893, -8799, 7258, -7923, -8477, -5121, -9199, -6722, -1391 }, new double[] { 0.832563789017761, 0.02388347965846, 0.0563659086154615, 0.032194568790586, 0.955555756090002, 0.436039088962618, 0.842547687628561, 0.322669094113013, 0.684982513862188, 0.233886980560556 }, new short[] { -4370, 824, 2570, 1475, 4573, -1842, 6819, -2880, -2573, 7088 }, new short[] { -1965, 3448, -3598, 2948, -6792, -6926, 3141, 8647, -4054, -5321 })]
		[TestCase(new short[] { -9829, 1311, -5912, -5574, -6236, -5422, -7697, 6245, -8672, -1415 }, new double[] { 0.42478278671614, 0.490990161193064, 0.751171622775109, 0.647376565098472, 0.595160907877218, 0.636907730548134, 0.166157830583936, 0.48619440267151, 0.134256574387782, 0.695911365885246 }, new short[] { -5298, 7757, 3373, -3811, -9425, -6797, 4076, -1821, 7436, 6037 }, new double[] { 0.778938345973817, 0.910105990669739, 0.025392943539374, 0.451084776991552, 0.225390676048301, 0.715875067615823, 0.336861453641607, 0.407289105657157, 0.385615974378593, 0.499872428132162 }, new short[] { -4143, -9424, -4206, 8840, -1406, 8214, 8424, 3452, -8953, 468 }, new short[] { 9749, -6581, 5963, 2027, 9975, -7588, 7936, 7898, -6148, -9437 })]
		[TestCase(new short[] { 499, 4122, 8807, -4711, 3005, 293, -687, -3997, -1560, 7584 }, new double[] { 0.300046276906527, 0.758868724926779, 0.100578428292916, 0.63438414625562, 0.403123156355286, 0.206325196757133, 0.598280932567213, 0.726630255918312, 0.879739023223398, 0.117956218364628 }, new short[] { -5223, -9375, -2866, -3031, 6287, 2160, -7760, -1519, -954, -7902 }, new double[] { 0.818994788368696, 0.441897385959466, 0.214724511008116, 0.357558923008646, 0.974889470718284, 0.586659476434188, 0.0883127232493426, 0.0252473014524427, 0.29175908318337, 0.914985808038612 }, new short[] { -1096, 2423, -4985, -6539, -5531, -5426, -8592, -6723, -6034, 5849 }, new short[] { 445, -6594, -9694, -8506, 5784, -124, -3010, 1840, -999, -9153 })]
		[TestCase(new short[] { -1944, -9167, 6955, -3656, -8793, 7162, 882, 4859, 3189, 6328 }, new double[] { 0.11801247350779, 0.57303363111477, 0.434871172734942, 0.964753215184786, 0.67280866469853, 0.617625866838557, 0.780508248033239, 0.183683023407908, 0.125033526739587, 0.585769475710471 }, new short[] { 754, 8961, -5483, 3194, 1650, 2974, -1466, -7196, 1366, -378 }, new double[] { 0.237197199015504, 0.496300882890961, 0.575237050454708, 0.249488467932441, 0.51222988009091, 0.403578494863388, 0.7733679366174, 0.933522406003216, 0.112692380376483, 0.365238028282876 }, new short[] { 3689, -3453, 86, -2364, 3489, 8983, 4707, -8989, -1963, -6567 }, new short[] { 4265, -6683, -660, 7284, 91, -907, 6315, -6237, 4691, -1768 })]
		[TestCase(new short[] { -1370, -1919, -6505, -6431, 1585, 2433, 9954, -6291, -949, -4614 }, new double[] { 0.844257930221156, 0.846985842030023, 0.0709906430314251, 0.759795498456711, 0.901283356315123, 0.210395686892046, 0.443813591005194, 0.844008582105864, 0.985265052404844, 0.633312140886352 }, new short[] { 8266, -2475, 4765, -2065, 5355, -8570, -9412, 4219, 4897, -8847 }, new double[] { 0.587795966578552, 0.585293249965316, 0.198924770205712, 0.701146093523664, 0.933761478836537, 0.280458040200387, 0.152614175878751, 0.325902016053862, 0.802511467506416, 0.0527782696545023 }, new short[] { 9028, 999, 1958, -7347, -3452, 7325, -8103, 4143, 9258, -4116 }, new short[] { -9782, 9434, -5943, -7973, -36, -8893, 3313, 5558, -1787, 156 })]
		[TestCase(new short[] { 1847, -4263, -1190, -2101, 3628, -4820, 2960, -2602, 6520, 2416 }, new double[] { 0.0577815110132943, 0.117911574951332, 0.0414971145994482, 0.932486782750341, 0.681865274758015, 0.363369768654634, 0.778252018046683, 0.605746881387079, 0.0693676411497256, 0.901494569099273 }, new short[] { 9531, -3556, 4960, -984, -9063, 2320, -2350, -8046, -5940, 7568 }, new double[] { 0.614746384143246, 0.37463743769314, 0.915297290270821, 0.294662931605551, 0.460389248309838, 0.664646560635719, 0.109535387302533, 0.203019003012692, 0.451135338494152, 0.0683851712701773 }, new short[] { -5634, 4498, 7622, -3157, -5271, 7857, 8604, -4593, -1611, -7303 }, new short[] { -4459, -8799, 4171, 182, 624, -4594, 775, 9793, -3036, -8690 })]
		[TestCase(new short[] { 7528, 1008, -6661, 8950, -9877, 3662, -5947, 4936, -557, -9654 }, new double[] { 0.253834381352102, 0.575233015033991, 0.154611542892927, 0.000982469879548284, 0.683250651081675, 0.251685272553789, 0.44099095856817, 0.405906753337899, 0.214361787873489, 0.153860528559359 }, new short[] { 3714, -7756, 3564, -8636, 2029, 1095, 3320, -1876, 5268, -6196 }, new double[] { 0.125885111338405, 0.119825740400621, 0.854860910612559, 0.385723155637143, 0.191904106732413, 0.667822121487848, 0.558065233080678, 0.9336002175387, 0.336053170885915, 0.553245250393285 }, new short[] { 3805, -6330, 5963, -1955, 7618, 4035, 8106, 4152, 6516, -4408 }, new short[] { 6584, -7342, 5506, -6113, -2406, 5285, 7443, -8024, -3077, -973 })]
		public void Forloop(short[] a, double[] b, short[] c, double[] d, short[] e, short[] val)
		{
			bool[] found = new bool[9];
			bool allFound = false;
			NKeyHash<short, double, short, double, short, short> nKeyHash = new NKeyHash<short, double, short, double, short, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<short, double, short, double, short, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<short, double, short, double, short, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<short, double, short, double, short, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);
		}

		[TestCase(true, 6180, 0.0154285295938274, 3872, 0.507390741029471, false, 3222)]
		[TestCase(false, 46, 0.313935447164781, -4479, 0.187178894964596, true, 2988)]
		[TestCase(true, 1606, 0.483909800408366, -2782, 0.993030415378991, false, 3210)]
		[TestCase(false, -1448, 0.795619380099522, -813, 0.587513061979559, true, 722)]
		[TestCase(true, -5998, 0.516267763691148, 217, 0.746967581448596, true, -7269)]
		[TestCase(true, 6207, 0.585913889848587, -3562, 0.0630011135074315, false, 4614)]
		[TestCase(true, -992, 0.596185192277741, 8230, 0.446416737253972, true, -8824)]
		[TestCase(false, -10, 0.921075880956406, 7965, 0.789530759579284, false, 5256)]
		[TestCase(false, -5603, 0.234278517418671, 8396, 0.185097734064375, false, 1393)]
		[TestCase(false, 5952, 0.765149645863636, -1195, 0.918251518587699, true, -8802)]
		public void Add(bool a, long b, double c, short d, double e, bool f, long val)
		{
			NKeyHash<bool, long, double, short, double, bool, long> nKeyHash = new NKeyHash<bool, long, double, short, double, bool, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<bool, long, double, short, double, bool, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<bool, long, double, short, double, bool, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<bool, long, double, short, double, bool, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f));
		}

		[TestCase(9543, 0.19943418782178, true, 0.141096324725587, -8341, 0.477415498568404, true, true)]
		[TestCase(1903, 0.612564715842048, true, 0.921610142067825, -2527, 0.517053707277893, true, false)]
		[TestCase(-1960, 0.877903379443057, true, 0.161039112210758, 1502, 0.652717169678173, true, false)]
		[TestCase(563, 0.288905411627565, true, 0.446202871131805, 2029, 0.882061776184506, true, true)]
		[TestCase(-7399, 0.634140517857922, false, 0.0203749616725254, 3729, 0.778781354324325, false, true)]
		[TestCase(7837, 0.601678802446313, false, 0.152584930021588, -344, 0.996641376519874, false, true)]
		[TestCase(-6413, 0.546360538129863, true, 0.0521259224285027, -5179, 0.768790613752227, true, false)]
		[TestCase(-2631, 0.0764632034471553, true, 0.793981491957783, -428, 0.231567040193624, false, true)]
		[TestCase(2885, 0.398152622114007, true, 0.739492101007836, -7744, 0.570246864841435, true, true)]
		[TestCase(5513, 0.341672780616988, false, 0.97343530644357, -995, 0.678450616392517, true, true)]
		public void Upsert(long a, double b, bool c, double d, short e, double f, bool val, bool newVal1)
		{
			NKeyHash<long, double, bool, double, short, double, bool> nKeyHash = new NKeyHash<long, double, bool, double, short, double, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f));
			nKeyHash.Upsert(a, b, c, d, e, f, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<long, double, bool, double, short, double, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f));
			nKeyHash.Upsert(a, b, c, d, e, f, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<long, double, bool, double, short, double, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f));
			nKeyHash.Upsert(a, b, c, d, e, f, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<long, double, bool, double, short, double, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f));
			nKeyHash.Upsert(a, b, c, d, e, f, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f));
		}

		[TestCase(false, -8387, -8402, true, 2200, 0.16585024826501, -3835)]
		[TestCase(false, 3206, 51, false, 165, 0.084621869532681, -5899)]
		[TestCase(false, -1399, 2180, true, -9722, 0.276433373464473, 7985)]
		[TestCase(false, 1602, 7484, true, -8241, 0.0814072639129158, 2887)]
		[TestCase(false, 9291, -9119, false, 4562, 0.0798706803842777, -1391)]
		[TestCase(true, -9340, 8364, false, -852, 0.467463210442785, -6546)]
		[TestCase(true, -583, 9216, false, 8077, 0.326513576007687, 4994)]
		[TestCase(false, 3157, -6521, false, 2794, 0.41895246432114, 7229)]
		[TestCase(true, -5887, 9239, true, -8310, 0.663822343882091, -7068)]
		[TestCase(true, -827, -9573, true, -9903, 0.774567573691983, 4817)]
		public void Delete(bool a, int b, short c, bool d, short e, double f, short val)
		{
			NKeyHash<bool, int, short, bool, short, double, short> nKeyHash = new NKeyHash<bool, int, short, bool, short, double, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Delete(a, b, c, d, e, f);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<bool, int, short, bool, short, double, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Delete(a, b, c, d, e, f);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<bool, int, short, bool, short, double, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Delete(a, b, c, d, e, f);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<bool, int, short, bool, short, double, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Delete(a, b, c, d, e, f);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));
		}

		[TestCase(-7813, 8266, 0.519791508335523, -6320, 0.754893687905229, 7892, 0.996474912388471)]
		[TestCase(-3864, 7400, 0.236870668473128, -8230, 0.660918216063137, 1378, 0.158508555571785)]
		[TestCase(6546, 9123, 0.533020537594808, -2541, 0.803640866560694, -9476, 0.913038395304716)]
		[TestCase(-9754, 8791, 0.390005284170623, 7982, 0.551946002315705, -9822, 0.628921834579167)]
		[TestCase(9341, -3042, 0.674764482153004, 6614, 0.692279175246264, 9410, 0.391121638189592)]
		[TestCase(-4155, -1155, 0.33814736424859, -3408, 0.769151033260464, -6998, 0.388979653077656)]
		[TestCase(1771, 5687, 0.69172295494551, -3123, 0.205637200365605, 1647, 0.569726475779771)]
		[TestCase(4689, -4138, 0.183542094278867, -9892, 0.700539591582743, 9556, 0.0970850903992937)]
		[TestCase(9473, -7403, 0.284781098964057, -5940, 0.885845257847498, -2648, 0.339596240473723)]
		[TestCase(443, 1241, 0.257683850944826, 9371, 0.598337195160956, 5347, 0.53514221335535)]
		public void Remove(short a, long b, double c, int d, double e, long f, double val)
		{
			NKeyHash<short, long, double, int, double, long, double> nKeyHash = new NKeyHash<short, long, double, int, double, long, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Remove(a, b, c, d, e, f);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<short, long, double, int, double, long, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Remove(a, b, c, d, e, f);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<short, long, double, int, double, long, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Remove(a, b, c, d, e, f);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<short, long, double, int, double, long, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Remove(a, b, c, d, e, f);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));
		}

		[TestCase(-6894, true, true, false, 0.426424977102515, -8815, -5346)]
		[TestCase(-8903, false, true, true, 0.992712432515208, -4118, -3629)]
		[TestCase(-3750, false, false, true, 0.782494500643804, -9011, -8671)]
		[TestCase(-5553, false, false, true, 0.81501415828942, -9307, -5589)]
		[TestCase(-8035, false, true, true, 0.453822003423153, 3468, 6368)]
		[TestCase(-1369, true, true, false, 0.308357719009909, -7859, -651)]
		[TestCase(-8581, false, true, true, 0.473350369591895, -5667, -5968)]
		[TestCase(-7169, true, false, false, 0.474675329623127, -2854, 8658)]
		[TestCase(-4714, false, true, true, 0.0246110963749751, -9756, 9131)]
		[TestCase(-2978, true, false, true, 0.620581317981976, 1, 7618)]
		public void ContainsKey(int a, bool b, bool c, bool d, double e, int f, int val)
		{
			NKeyHash<int, bool, bool, bool, double, int, int> nKeyHash = new NKeyHash<int, bool, bool, bool, double, int, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Delete(a, b, c, d, e, f);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<int, bool, bool, bool, double, int, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Delete(a, b, c, d, e, f);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<int, bool, bool, bool, double, int, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Delete(a, b, c, d, e, f);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<int, bool, bool, bool, double, int, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Delete(a, b, c, d, e, f);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));
		}

		[TestCase(-9963, -2033, -9965, -3166, 0.817968501624637, -9619, true)]
		[TestCase(-5531, 6392, 4616, 9581, 0.316209240498119, 7708, false)]
		[TestCase(985, -7646, 6959, -4324, 0.094850940208347, 215, true)]
		[TestCase(1553, 6191, -8664, 7054, 0.716531473079944, -3587, true)]
		[TestCase(2935, 4545, 2388, 645, 0.758268567620902, 5631, false)]
		[TestCase(5636, 4746, -4604, -5866, 0.993162993338501, 9997, false)]
		[TestCase(-9300, -1271, 1194, -3912, 0.614625877986954, 4273, true)]
		[TestCase(-6952, 1517, -6191, 6950, 0.0881863753721986, -1368, false)]
		[TestCase(1773, 8697, -222, -7970, 0.698346572787662, -7217, true)]
		[TestCase(-8152, -7771, -1062, 1158, 0.103867149028865, 8094, true)]
		public void Clear(short a, short b, int c, int d, double e, int f, bool val)
		{
			NKeyHash<short, short, int, int, double, int, bool> nKeyHash = new NKeyHash<short, short, int, int, double, int, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e), 0);

			nKeyHash = new NKeyHash<short, short, int, int, double, int, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e), 0);

			nKeyHash = new NKeyHash<short, short, int, int, double, int, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e), 0);

			nKeyHash = new NKeyHash<short, short, int, int, double, int, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e), 0);
		}

		[TestCase(-2535, 139, true, false, 2138, -9141, -110)]
		[TestCase(-6970, -1418, true, true, -2998, 6767, -6135)]
		[TestCase(6047, 5616, false, false, 7216, 1020, 8850)]
		[TestCase(-3499, -7742, true, true, 6177, -9853, 5440)]
		[TestCase(9951, -7733, true, true, 6786, 7625, -5689)]
		[TestCase(-1440, 8809, true, false, -8075, -8356, 8817)]
		[TestCase(3646, 5243, true, true, -8671, 1484, 1557)]
		[TestCase(5947, 9437, true, true, -9175, 2003, -9035)]
		[TestCase(-2117, 6038, true, true, -9286, 4448, -6923)]
		[TestCase(-3684, 8775, false, true, 9140, 9552, -2510)]
		public void Get(short a, int b, bool c, bool d, int e, int f, int val)
		{
			NKeyHash<short, int, bool, bool, int, int, int> nKeyHash = new NKeyHash<short, int, bool, bool, int, int, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<short, int, bool, bool, int, int, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<short, int, bool, bool, int, int, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));

			nKeyHash = new NKeyHash<short, int, bool, bool, int, int, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f));
		}

		[TestCase(0.350668639107919, true, 5138, 4849, -1338, false, -5995)]
		[TestCase(0.141387669435417, true, 8545, 5962, -4377, false, -9322)]
		[TestCase(0.138532193442123, false, -4131, -8787, -2805, true, -2668)]
		[TestCase(0.823367963928435, true, -5136, -7813, 1930, false, 9140)]
		[TestCase(0.866224328925006, true, 7706, 1445, 1971, false, -9129)]
		[TestCase(0.943392645541296, true, -8888, 2051, 565, true, -6511)]
		[TestCase(0.999816872645084, false, 4249, 3519, 6206, false, 4036)]
		[TestCase(0.697289565437142, true, 4081, -7815, -5709, false, 545)]
		[TestCase(0.063457308366642, true, 2663, 6729, 9812, false, -4496)]
		[TestCase(0.335524816222268, false, -5481, 3649, 5235, true, -6096)]
		public void TryGetValue(double a, bool b, short c, long d, int e, bool f, long val)
		{
			long fetch;
			bool b1;
			NKeyHash<double, bool, short, long, int, bool, long> nKeyHash = new NKeyHash<double, bool, short, long, int, bool, long>(UnderlyingHashType.Dictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(long));
			nKeyHash.Add(a, b, c, d, e, f, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<double, bool, short, long, int, bool, long>(UnderlyingHashType.ConcurrentDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(long));
			nKeyHash.Add(a, b, c, d, e, f, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<double, bool, short, long, int, bool, long>(UnderlyingHashType.SortedDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(long));
			nKeyHash.Add(a, b, c, d, e, f, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<double, bool, short, long, int, bool, long>(UnderlyingHashType.HashTable);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(long));
			nKeyHash.Add(a, b, c, d, e, f, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);
		}

		[TestCase(new long[] { 2593, 612, -1333, 5722, 7256, -4894, -6620, 3869, -6373, -737 }, new short[] { -2318, -7411, 323, 7597, -3590, -1553, 5321, 752, 4208, 7983 }, new int[] { 3285, -7530, -267, 9868, -9028, -2994, 133, -7536, 3441, -5077 }, new double[] { 0.277768111451421, 0.38098381151491, 0.0839381912182729, 0.703749583896133, 0.433750922993641, 0.983144800170858, 0.199898985773278, 0.050355413020754, 0.127833899170083, 0.987914581311827 }, new double[] { 0.106228577022547, 0.642037177291716, 0.860669626323818, 0.762759786920044, 0.298438362450543, 0.632437398486043, 0.474189759452916, 0.315204210726174, 0.253727656441614, 0.815568374849655 }, new short[] { 3837, -4124, -7538, -4140, -6814, 125, -9118, -1203, 4751, 251 }, new double[] { 0.748550483374181, 0.0458107451190291, 0.0213779006252894, 0.935202376886831, 0.185351138089481, 0.0030927266939975, 0.0454476513180172, 0.812413943378448, 0.446184414181013, 0.337293090455836 })]
		[TestCase(new long[] { -5551, 4314, -1803, 4450, 5859, -9553, -4744, 4476, 3900, -1677 }, new short[] { 7520, -6169, 7387, 7130, 1083, 9678, -4841, 5819, 889, 8548 }, new int[] { 8781, 5200, -3744, 2305, -5212, -8790, 2412, 8508, 1548, -4092 }, new double[] { 0.586989747168026, 0.661775816074468, 0.869019796545161, 0.916434565985778, 0.593153667912424, 0.976176141750149, 0.883981177529311, 0.400519267842415, 0.499946419382443, 0.137004155729434 }, new double[] { 0.243490242512659, 0.32013341566554, 0.74478207283876, 0.321499900110764, 0.63648343022749, 0.557071905376889, 0.176414383191808, 0.164836537169682, 0.381006512502677, 0.201360357087739 }, new short[] { 4902, -4910, -4641, 373, -2036, -753, -1940, 5889, -336, 4651 }, new double[] { 0.401595602464674, 0.337306008831275, 0.146462914602115, 0.399696911405631, 0.8291208254309, 0.214305963001356, 0.322458781452132, 0.952961795941443, 0.263387695543183, 0.578019722634004 })]
		[TestCase(new long[] { -7999, 7147, -4178, -1850, 3679, 2379, -9693, 9823, 9574, 3645 }, new short[] { 7679, -883, 889, -2478, 1003, -3348, -2122, -2993, 365, -7382 }, new int[] { 1463, -8210, 8345, 5346, 4707, 8122, -6525, -3097, -152, -1556 }, new double[] { 0.234613123924757, 0.223452587250365, 0.901448841626499, 0.802986789868673, 0.101350753615308, 0.88776897261281, 0.963408446388044, 0.860437001036684, 0.834699812268233, 0.779146863976096 }, new double[] { 0.447048048231307, 0.411732355790088, 0.81574220341432, 0.800886742212291, 0.848577679064394, 0.945772862967929, 0.792845271896965, 0.770414622859291, 0.849522491381281, 0.496585917424683 }, new short[] { 6408, 9441, -1306, -7347, -9902, -9787, 8800, 473, 3441, 5555 }, new double[] { 0.445335904343676, 0.670207131500452, 0.498865965520435, 0.556607792413145, 0.447679068636, 0.660550861461345, 0.554373897870245, 0.741473947065637, 0.274697538127516, 0.66240544741154 })]
		[TestCase(new long[] { -2617, 668, 312, 4782, 3674, -6769, -4525, -7670, 8374, 5792 }, new short[] { -7732, -1934, -88, 9914, 2034, -4749, 5774, 5376, 5962, -8183 }, new int[] { 8953, -1205, -6232, -8861, -3323, 5536, 8256, -4816, -2935, -6238 }, new double[] { 0.391398965097684, 0.0513713248313271, 0.495717084731775, 0.187117043969742, 0.12745945580651, 0.287038120574801, 0.456512984566629, 0.695546066712377, 0.44880909027942, 0.843354586904568 }, new double[] { 0.736844377935326, 0.823608319192942, 0.604893488625481, 0.882442149744575, 0.664473984234256, 0.0420800261395425, 0.174644461448604, 0.503072808265254, 0.954883866456749, 0.185201921586507 }, new short[] { 7434, 5709, 8865, -6321, 4293, 8587, -3098, -825, -1893, 8137 }, new double[] { 0.248599999700021, 0.0145771000602176, 0.763245917280785, 0.730760794938896, 0.398236725199147, 0.0619676369530929, 0.907538793472358, 0.308445626082106, 0.868333701448671, 0.314685805381595 })]
		[TestCase(new long[] { 6118, -8134, -3598, 9095, -2920, -7517, 6696, -3881, -2151, -4164 }, new short[] { 2043, -1803, -3914, -6639, -3674, 2117, -7837, -3763, -551, -6038 }, new int[] { 8838, 9954, -4195, 837, 1894, 4444, -8791, 7481, -315, 2049 }, new double[] { 0.134541232667184, 0.866198835366498, 0.634739106816584, 0.640198061075154, 0.379237759103644, 0.778552752350714, 0.465434042487961, 0.988496907981344, 0.829952186825663, 0.5905996414789 }, new double[] { 0.0945652598024184, 0.0391392484489545, 0.0663232440437764, 0.113592539501187, 0.304727906503122, 0.838806417695622, 0.710326555515792, 0.595240165291, 0.414512750885688, 0.792337185140856 }, new short[] { 9077, 1914, 6719, 3405, -2545, 6163, 6059, 5563, -2798, 2633 }, new double[] { 0.0637363414576912, 0.960701162908553, 0.821711586705275, 0.789906534734139, 0.157189700825694, 0.735997619915753, 0.775054475187815, 0.664052483469272, 0.788767992886141, 0.537695291702494 })]
		[TestCase(new long[] { -7189, -7607, -362, 7635, -7929, 8056, 8628, -6466, -5256, 5118 }, new short[] { -9760, -697, -807, 3836, 2971, 776, -9395, 9288, -4649, 1420 }, new int[] { 9510, 3744, 2568, -6034, 537, -7321, -5650, -4471, 9127, 1374 }, new double[] { 0.0637519425078071, 0.0462740720465193, 0.806472172404859, 0.876817459183194, 0.651871687570527, 0.834338163414196, 0.113862157852325, 0.95420794931902, 0.566778282433179, 0.469861332080262 }, new double[] { 0.876733689511537, 0.626373373263689, 0.541023832066461, 0.604108469376391, 0.619742486448839, 0.598614104836534, 0.501081220107657, 0.129843347300702, 0.141304633645948, 0.61837285040802 }, new short[] { 4116, 6211, -2068, -5645, 1242, -935, -177, -4327, -2900, 9391 }, new double[] { 0.685414950682509, 0.655036905154137, 0.220227215541632, 0.668426535403555, 0.692196227001118, 0.965666650312797, 0.658650064216298, 0.582802483617702, 0.0399965518340452, 0.814263737673994 })]
		[TestCase(new long[] { -1500, -8479, -2046, 5952, 3885, -3016, -7074, -9512, 1570, 8564 }, new short[] { 2655, -8247, -7297, -3239, 7257, -4936, 2994, 1774, -3706, -6026 }, new int[] { -3135, 6604, 1984, 1942, 5688, -5565, -1876, 7451, 8237, 3081 }, new double[] { 0.939964040620236, 0.918278736489955, 0.0898467954666572, 0.327040895971954, 0.193418157842671, 0.629861832424003, 0.412901268067258, 0.59892558241213, 0.523400772141014, 0.212970015226384 }, new double[] { 0.306982552775639, 0.466794213963111, 0.705066754811009, 0.42670652243621, 0.336848105926462, 0.597830636239532, 0.519924829490448, 0.88219722727416, 0.805522000326552, 0.439033014904257 }, new short[] { -3680, -8601, -4636, 6826, -578, 1893, -465, 6010, -9735, -547 }, new double[] { 0.943029793884153, 0.273632259701207, 0.112419557344364, 0.924450655432628, 0.988285154564439, 0.714504140296254, 0.99773751897632, 0.808071179691735, 0.144611830424802, 0.233042702653 })]
		[TestCase(new long[] { 6804, -8983, -8692, -7965, 7832, 7527, -7495, -6548, -4793, -6267 }, new short[] { 4035, 478, -8657, -542, -3237, 7400, 3002, -5029, 7119, 1974 }, new int[] { -6936, 2246, 1714, -8983, -4600, -9332, -2912, 5611, -1231, 2446 }, new double[] { 0.600093117263211, 0.711853649798713, 0.737585396849357, 0.572479297673553, 0.598771070874655, 0.265160822433029, 0.00454156706321126, 0.166429514142885, 0.949659947748138, 0.594633652174209 }, new double[] { 0.469483624431064, 0.304165978126305, 0.540240968829133, 0.826570657932465, 0.770848026392445, 0.419080863436256, 0.206556963364853, 0.639540329873348, 0.586325764463435, 0.118216543513451 }, new short[] { -8712, 4984, 9040, 917, -8401, -5441, -698, -9707, 6634, 7165 }, new double[] { 0.52204327914959, 0.344586057283257, 0.734124341390154, 0.63795522816384, 0.58652262789501, 0.989918305068239, 0.78636353359854, 0.494595998662801, 0.874108156596361, 0.0729640685361643 })]
		[TestCase(new long[] { 7309, -325, -4022, -4772, -7414, 6978, -8556, 5182, -4400, 7016 }, new short[] { 6535, 4296, -6113, -3595, 1159, 7016, 5194, -6165, -148, -2582 }, new int[] { 6001, 9798, -3306, -8172, -8547, -7501, 1400, 8044, -5198, 5618 }, new double[] { 0.632717329837716, 0.711960964702052, 0.765432173276987, 0.513361695927271, 0.252689499525674, 0.580638163993432, 0.450377822597687, 0.690726215807128, 0.41663070135593, 0.230908390707759 }, new double[] { 0.155780701970579, 0.705882422023398, 0.734640307135247, 0.980901897876012, 0.0315334028711232, 0.80720895240419, 0.150295722368311, 0.413919517031833, 0.0799676576070337, 0.735657207544733 }, new short[] { -5396, 1892, -9958, 64, -4542, 7510, -7018, -5849, -6224, -9911 }, new double[] { 0.278942530173316, 0.169834395949652, 0.519120491351523, 0.499003043164966, 0.218142028068258, 0.114832365007527, 0.949402153468412, 0.680928638987676, 0.0675153248326459, 0.977349406563374 })]
		[TestCase(new long[] { -1990, -8618, 5500, -4765, -5697, -8114, -4892, -2924, -8803, -4691 }, new short[] { 9491, -6876, 6445, 87, 1015, -9237, 4198, -4755, -5189, -2457 }, new int[] { -1368, -5142, 39, -1754, 9038, 9717, -6264, -5286, 5254, 8333 }, new double[] { 0.857806798935778, 0.469367083380635, 0.346404192199187, 0.10261825104366, 0.335169609792144, 0.161100964602596, 0.819582348605423, 0.740330909257909, 0.288148393988678, 0.178626732518257 }, new double[] { 0.620230360245439, 0.795283612234184, 0.1477168468515, 0.923383862210151, 0.0297493403916011, 0.122820410468998, 0.347516312891392, 0.0147296688588009, 0.948219848772613, 0.180082288654559 }, new short[] { -1902, 3743, -1191, 3807, 915, -6846, 1341, -2743, -3805, -5416 }, new double[] { 0.907465526325379, 0.0196909243332645, 0.591006490677133, 0.143098774432716, 0.407574621684651, 0.505234761398861, 0.809717927505131, 0.7196998320146, 0.169221212700578, 0.389682229789757 })]
		public void Count(long[] a, short[] b, int[] c, double[] d, double[] e, short[] f, double[] val)
		{
			NKeyHash<long, short, int, double, double, short, double> nKeyHash = new NKeyHash<long, short, int, double, double, short, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0]), 9);

			nKeyHash = new NKeyHash<long, short, int, double, double, short, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0]), 9);

			nKeyHash = new NKeyHash<long, short, int, double, double, short, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0]), 9);

			nKeyHash = new NKeyHash<long, short, int, double, double, short, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0]), 9);
		}

		[TestCase(new short[] { 1571, -2349, 6582, 2768, -6558, -4251, 1653, 236, -6587, -9420 }, new double[] { 0.656019818343231, 0.556857035754648, 0.177543175489429, 0.594016335249886, 0.456786622971663, 0.430618420443786, 0.0590051696910547, 0.271161206192878, 0.600539435912175, 0.204277121557052 }, new double[] { 0.00461807241878383, 0.5158092405255, 0.524514578992741, 0.313102482963867, 0.627816480876792, 0.845508456158223, 0.558537618982856, 0.961604897846284, 0.435259862074284, 0.713162049517577 }, new bool[] { false, true, true, false, true, true, false, true, true, true }, new long[] { -9832, 2625, -5259, -474, -6925, -6742, 9832, 5912, 5233, 779 }, new long[] { 8299, 5813, -6872, -1359, -8188, -8743, 7159, 320, -9786, -3469 }, new bool[] { true, true, false, false, true, true, true, false, true, false })]
		[TestCase(new short[] { 9000, -634, 714, 7364, -6080, -2532, -4422, -9034, -6811, -700 }, new double[] { 0.853830418947074, 0.762871724442985, 0.199914130009671, 0.896257485680402, 0.798121364227553, 0.58782079098179, 0.77712262830563, 0.477429178765709, 0.97195587352475, 0.925739728345415 }, new double[] { 0.122249953040038, 0.964524071647098, 0.580099718915345, 0.408909458857453, 0.00339371292078575, 0.387256226217028, 0.554717878603711, 0.779538882327983, 0.825883218471838, 0.431162073943374 }, new bool[] { true, true, false, false, true, false, false, false, false, true }, new long[] { 5678, 6195, -2866, 912, -546, 9319, -1576, -6393, 3185, -8747 }, new long[] { 8907, -6599, -7137, 3595, -2914, 9709, 7763, -7462, 7296, 6173 }, new bool[] { true, false, false, true, true, true, true, true, false, false })]
		[TestCase(new short[] { -3343, -219, -5172, -4904, -7163, -3750, 2157, -9309, 8723, -9251 }, new double[] { 0.966097672919788, 0.374414847406752, 0.120223401635989, 0.763298417331324, 0.485748667030478, 0.345471176014036, 0.733511795165721, 0.510388069558138, 0.930898574614385, 0.603423684650764 }, new double[] { 0.558556527159436, 0.128173143196932, 0.423223014186706, 0.427387259633926, 0.898564768907877, 0.284639686012938, 0.587447278475131, 0.628396293441018, 0.596108539773202, 0.495479947186764 }, new bool[] { false, true, true, false, true, false, true, true, true, false }, new long[] { -2446, 7073, -6187, 6549, 6851, -1115, -2418, -819, -5149, 2080 }, new long[] { -5125, -8752, 9675, 4077, 5855, -5906, -8683, 6278, -2875, 7142 }, new bool[] { true, true, false, false, true, false, true, true, false, false })]
		[TestCase(new short[] { -1662, 6902, 9447, 7780, -5483, 4096, 8750, 1914, 1695, -912 }, new double[] { 0.905568456698939, 0.128403145879695, 0.385902660612903, 0.992048427924536, 0.251778302831472, 0.33096692819659, 0.522568257303242, 0.169113733884466, 0.515126772930439, 0.525099614413967 }, new double[] { 0.390581620573337, 0.114658613742636, 0.532131340602474, 0.680797911566122, 0.316798149289935, 0.398152646794055, 0.415380976821939, 0.749866285710533, 0.183394396763013, 0.382910757969558 }, new bool[] { true, true, false, false, false, false, false, false, false, false }, new long[] { -4657, -598, -5416, 8036, 9031, 1932, 1871, -1073, -6220, -3737 }, new long[] { 8741, -3353, -4056, 168, 2775, -3955, -3738, -4167, 1445, 6551 }, new bool[] { false, false, false, false, true, false, true, false, true, true })]
		[TestCase(new short[] { -5178, -1443, 3819, -1457, -4839, 8409, 7709, 2605, 4583, 4403 }, new double[] { 0.80456612250049, 0.969078053240235, 0.560908463579094, 0.870269149015783, 0.44579546034606, 0.610484070428873, 0.269636925435456, 0.917058184704305, 0.574349932640023, 0.885018948412044 }, new double[] { 0.0854811505812598, 0.798275583329739, 0.522468851656871, 0.650471747224439, 0.798548669460485, 0.0793808424283661, 0.057725899879693, 0.0272875381760707, 0.390277545149567, 0.612819502881178 }, new bool[] { true, false, true, false, false, true, true, true, false, true }, new long[] { -1665, 3654, 1248, 7041, -9537, -3592, 2535, 841, 5121, 8020 }, new long[] { -8616, 5716, 1968, 8395, 5354, -1144, 8106, -9188, 2571, -6426 }, new bool[] { true, true, false, false, true, false, false, false, true, true })]
		[TestCase(new short[] { 9382, -2007, 3332, 7120, -633, -1945, -5282, 3407, 2547, -436 }, new double[] { 0.452584859194506, 0.515653004178616, 0.271200809754059, 0.489192441333641, 0.543678662527203, 0.107864296114009, 0.822393080602583, 0.721645462662748, 0.567933821383833, 0.629271183455955 }, new double[] { 0.603964197730629, 0.600750759523711, 0.241432672013264, 0.0717953588216544, 0.855479587733503, 0.558501039426076, 0.442752879319132, 0.446044738146497, 0.0256204377047813, 0.639311797283269 }, new bool[] { true, false, true, true, true, true, false, true, false, false }, new long[] { -5860, -5300, -1737, -6991, 4520, -3056, 1739, 5015, 1453, 4371 }, new long[] { 1227, 2119, 3145, -6620, -3349, -2630, -6835, 1896, -9986, 8195 }, new bool[] { true, true, true, true, false, false, true, false, true, true })]
		[TestCase(new short[] { 9772, -8398, -4596, -5941, -1553, -2619, -6247, -8178, -3084, 166 }, new double[] { 0.971500500557712, 0.691938244594232, 0.873342260659366, 0.307004190658687, 0.0779535915134258, 0.386783962783769, 0.744323370393516, 0.574926628998912, 0.487070649157777, 0.563451308088122 }, new double[] { 0.51133742952316, 0.524380282277418, 0.741736205640126, 0.541687174952443, 0.405081913995129, 0.417134568289451, 0.590225820238807, 0.425035503425186, 0.664971045062398, 0.67505653047704 }, new bool[] { true, false, false, true, true, false, false, false, true, true }, new long[] { -6382, -8656, -5017, -154, 8765, -4638, 8328, -3244, 8202, -8026 }, new long[] { -3866, -6062, 9289, 9875, -2743, -714, -3233, 4568, 5955, -9895 }, new bool[] { true, true, false, true, true, true, false, false, true, true })]
		[TestCase(new short[] { -8979, -4200, 6565, 470, -2347, -1116, -4493, -5009, 2067, -7258 }, new double[] { 0.500671861926407, 0.252482577810289, 0.514892228653139, 0.566323341599816, 0.368387807797821, 0.37848373380419, 0.170862748367182, 0.199666712526077, 0.335728179819755, 0.265696470283762 }, new double[] { 0.142986623636906, 0.607369513068055, 0.656584126714889, 0.741408813624368, 0.184769872196377, 0.41824024190113, 0.641096493062143, 0.578397044249995, 0.559259287807745, 0.10221083886093 }, new bool[] { true, true, true, false, false, false, false, false, true, true }, new long[] { -6219, -8222, -7497, 3214, 90, 525, -5045, 7193, -3953, 1090 }, new long[] { 3304, -4024, 6780, -3772, -926, -1128, 2666, -8260, -3224, 9286 }, new bool[] { true, true, true, true, false, true, false, false, true, false })]
		[TestCase(new short[] { -9800, 4596, 1768, -1657, -8464, -8916, -354, 9915, -5261, 3169 }, new double[] { 0.170549584166403, 0.781360919019841, 0.276094647252976, 0.00474414415878437, 0.436969405709286, 0.470850333790691, 0.902599592647794, 0.449363766447345, 0.859831339148726, 0.604099500739993 }, new double[] { 0.383377717055091, 0.281629547142251, 0.102232137276899, 0.646832189358227, 0.115550885496452, 0.492080725027286, 0.398620895295693, 0.62392212153595, 0.293304838376727, 0.745520415597372 }, new bool[] { false, false, false, true, true, true, true, false, false, false }, new long[] { 9225, 2750, 6999, 3605, 5876, -9564, -1583, 3709, -8715, 7931 }, new long[] { 7127, -9150, -3168, 8289, 9364, 4565, 2552, 8831, -3968, 1692 }, new bool[] { true, true, true, false, true, false, false, false, false, true })]
		[TestCase(new short[] { 5210, -387, -5704, -793, 2855, 4916, -1367, -1560, 7059, -8122 }, new double[] { 0.0712793832976741, 0.713146286882994, 0.55973021153348, 0.396710175739932, 0.889115205914301, 0.992091695774389, 0.704725529861043, 0.426566082717183, 0.982366811475887, 0.816260161258401 }, new double[] { 0.307743909446403, 0.76869553130525, 0.120434819311106, 0.649982715328216, 0.743989599749441, 0.102939314722521, 0.934989694009996, 0.358665146100645, 0.0562963667587826, 0.669581193788713 }, new bool[] { true, false, false, true, false, false, true, true, false, false }, new long[] { -4065, -5885, -8226, -5845, 267, 8846, -4026, -3883, 2044, 2637 }, new long[] { -1609, -9725, -3138, 2877, -6122, 9835, -2795, 1295, 4326, 797 }, new bool[] { true, false, false, false, true, true, false, true, false, true })]
		public void Any(short[] a, double[] b, double[] c, bool[] d, long[] e, long[] f, bool[] val)
		{
			NKeyHash<short, double, double, bool, long, long, bool> nKeyHash = new NKeyHash<short, double, double, bool, long, long, bool>(UnderlyingHashType.Dictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<short, double, double, bool, long, long, bool>(UnderlyingHashType.ConcurrentDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<short, double, double, bool, long, long, bool>(UnderlyingHashType.SortedDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<short, double, double, bool, long, long, bool>(UnderlyingHashType.HashTable);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());
		}

		[TestCase(new short[] { 8253, -7266, 6031, 6085, 2583, 5127, -1511, -4998, 1355, 5044 }, new double[] { 0.581392239118643, 0.36875021335145, 0.144209380794414, 0.0155922444609889, 0.262912217650056, 0.164925176261424, 0.731881846548934, 0.411551489220723, 0.223775421839103, 0.840021694935868 }, new short[] { 8103, 3906, 748, -909, -3969, -9095, -8220, -650, 1920, 7176 }, new double[] { 0.583135643314168, 0.124362439440732, 0.0917839948515333, 0.311769904248309, 0.44746885795494, 0.428136237165023, 0.914716253017409, 0.73555134503895, 0.181698459285171, 0.316518902926016 }, new long[] { 8824, 8666, 8890, -5526, 8128, 2567, -7670, -45, 8029, 3170 }, new short[] { -1540, -3031, -4084, -4758, 5496, -5652, 1983, -3058, 56, 1679 }, new long[] { 3349, 9137, 3079, 4177, -6616, -859, -4460, 6648, 1362, 6694 })]
		[TestCase(new short[] { -4995, 9925, -5402, 8144, 7974, 9435, 5014, -3724, 961, 3462 }, new double[] { 0.928716819234526, 0.591172441649797, 0.565962262715195, 0.937508217495637, 0.435920966526457, 0.234740685780878, 0.82858919670274, 0.829740791036627, 0.536902851675126, 0.230101738232235 }, new short[] { 6578, 1352, -5344, 1953, 2980, 9685, -4412, -5285, -8908, -1011 }, new double[] { 0.351414672728355, 0.284007062336433, 0.929618257530787, 0.0667319754449334, 0.408340194918374, 0.426614971098776, 0.118541927597738, 0.388516723824906, 0.3632728501052, 0.803022212257153 }, new long[] { -667, -4291, 5979, 6592, 3105, -8472, -2180, 4329, -4539, 8687 }, new short[] { 2568, -1055, -4088, -3239, -9882, 3650, 5271, 2642, -4834, 8288 }, new long[] { 3849, 301, -4814, -8025, -3565, 2893, 3230, -15, 583, -9812 })]
		[TestCase(new short[] { -7675, -1198, -670, 4677, 5269, 870, 5372, -1938, 8847, 1453 }, new double[] { 0.593342092164486, 0.562886839528981, 0.962702325527883, 0.120127865169257, 0.820980301974798, 0.904189245265065, 0.988470437465455, 0.591596609256974, 0.0609018695824323, 0.725774568377889 }, new short[] { 3260, -272, -7393, -1023, -7788, 9029, -9475, 4006, 159, -9787 }, new double[] { 0.414776460460749, 0.891743205902978, 0.187315987975949, 0.263677608344554, 0.818195262839177, 0.188368130097337, 0.980757486531864, 0.561655985453006, 0.574524434085248, 0.462298481940431 }, new long[] { 8277, -2789, 3794, 3710, -3577, -7407, 1047, -7216, -4445, -1649 }, new short[] { 3124, -8599, -1233, 6067, -3074, 2596, -3803, -9646, 2466, 6238 }, new long[] { 347, -8632, 7901, 8635, -6841, 4031, -2488, 3980, -3960, 2651 })]
		[TestCase(new short[] { 8467, -1463, -9657, 1971, 6236, -3949, 5931, -1105, -7445, 9618 }, new double[] { 0.399153516813718, 0.887033664568809, 0.422636632538697, 0.0904562836934143, 0.354341162533658, 0.344818885598713, 0.453414788215149, 0.383922533776575, 0.917404493744208, 0.188376803504479 }, new short[] { 7570, 9261, 8765, 5250, 8897, 6910, -691, 5158, 552, 2390 }, new double[] { 0.754016299151823, 0.853349623667705, 0.837193758151119, 0.645072766414412, 0.494086070216301, 0.229424867420189, 0.0528853996903102, 0.839725030045828, 0.991528026755679, 0.0437550996633969 }, new long[] { 6663, 7300, 7798, 2847, -1743, 2606, 2913, 6092, 1549, 6261 }, new short[] { -5035, 9831, 5631, -7728, 5080, 9205, -230, -4909, 3073, 9324 }, new long[] { 6741, -9225, 8340, 163, -5460, 915, -9002, 5550, 1927, -7500 })]
		[TestCase(new short[] { -4160, 2273, -2151, 7472, -2896, -9729, -8535, -4080, -3004, -3707 }, new double[] { 0.199875943921449, 0.660784926107519, 0.18046026824995, 0.714556992386727, 0.371329691899628, 0.762367981375366, 0.071729400228583, 0.723637959325518, 0.891032273364734, 0.533761938816757 }, new short[] { 4818, 5966, -6278, -9494, -5866, 5889, 8959, -2364, -1691, 7339 }, new double[] { 0.580498027885565, 0.868134416112739, 0.208266614567613, 0.452563222708443, 0.521156340148838, 0.634494339877038, 0.599253810755561, 0.907970829358311, 0.758377622234811, 0.740544773983091 }, new long[] { 7742, -6148, 8094, -3217, 5327, -6473, 7163, -5949, -7262, -708 }, new short[] { -518, -3475, 7729, -8746, -2320, -128, -1447, -2656, 3339, 1213 }, new long[] { -8689, 3827, 7609, -345, 4681, -3364, -949, 4557, -6131, 4736 })]
		[TestCase(new short[] { -6737, -6724, 9304, -6989, 2931, 967, 7871, 6938, -4823, -9392 }, new double[] { 0.93629880246534, 0.745485606019146, 0.24489091441263, 0.950849783118279, 0.392937453646649, 0.254296080793392, 0.981602823353188, 0.145658339907256, 0.0685809110610657, 0.027591156320456 }, new short[] { -5862, -5357, -5179, -6045, 3500, -6084, -3759, -1558, 2099, -1306 }, new double[] { 0.723793023137279, 0.130322732557693, 0.00911602843977326, 0.400026571657521, 0.301462620171468, 0.310315922047159, 0.360941610001466, 0.736044093377909, 0.416007293581966, 0.835586990153225 }, new long[] { 1999, 1613, -7832, 2732, 2486, -3599, -1069, 8592, -8203, -404 }, new short[] { -2996, -3862, 3186, -6683, 599, 8619, 8454, 5350, -491, -982 }, new long[] { -5271, -569, -5160, 6482, -3868, 6118, 4726, 6896, 2987, -8346 })]
		[TestCase(new short[] { 7866, -5088, 4592, -5339, -1447, 2523, -7524, 2086, 1466, -2898 }, new double[] { 0.749231201014123, 0.382337148945004, 0.332260730831074, 0.125201794842818, 0.0845350250995415, 0.416933051504629, 0.471006598077252, 0.843306532522341, 0.870044326814843, 0.370444578756785 }, new short[] { -2249, 1867, -4787, 9302, 1983, -7430, -3225, -4315, -3397, 6367 }, new double[] { 0.583638248771261, 0.601655078400697, 0.280288702007518, 0.00716830604112163, 0.58644036929423, 0.104579974480243, 0.57720892530736, 0.4263222135726, 0.738193081104286, 0.903809400696219 }, new long[] { 6144, -3630, -6115, -7591, 4031, 7080, -7213, -7663, 4791, 7791 }, new short[] { -3300, 7860, 9495, -4420, 3901, -4000, 9698, 5289, 2675, -4015 }, new long[] { -4250, 6790, -4514, 5098, 5427, -7047, -7958, -3497, 775, 9598 })]
		[TestCase(new short[] { 6793, -9105, -7896, 9323, 1263, -8617, -2015, -7194, -4728, 4902 }, new double[] { 0.989155724639611, 0.221953388406873, 0.544575461440056, 0.440467140376785, 0.48341525182287, 0.690575203714229, 0.626835062460431, 0.00134611781749228, 0.31208439977471, 0.286485197621624 }, new short[] { -7606, 6253, 5850, -1219, 2326, 9352, -9115, -1215, -3019, 1080 }, new double[] { 0.751996711712329, 0.81418671822836, 0.578001114343293, 0.75965776283278, 0.0498973033623292, 0.290285087325743, 0.787949593638978, 0.00858508982164091, 0.715756031086555, 0.625987354491831 }, new long[] { 8014, 6894, 19, 7771, -3799, -8689, -4099, 6674, -4568, -8382 }, new short[] { 414, -7985, -9738, -4953, 7205, -9458, -4956, 3321, -3002, 1909 }, new long[] { -9500, 9199, 5823, 4189, 9862, -6499, 2878, 5697, -2188, -6136 })]
		[TestCase(new short[] { 8051, 2364, -4287, 3721, -2284, -4501, -3764, 8077, -7419, 1016 }, new double[] { 0.672690005354905, 0.21041090749689, 0.1676553120686, 0.26815731323704, 0.0333019751279158, 0.651294382592335, 0.801178693213118, 0.325724886416329, 0.899331892328026, 0.0228879908206351 }, new short[] { -9236, -7562, 3173, -7594, 2021, 8813, -8928, 5828, 7908, -7298 }, new double[] { 0.421551253377251, 0.510078580821901, 0.443211675827956, 0.0784270926743872, 0.178204452701939, 0.902491087514204, 0.815112242389057, 0.326910979732364, 0.866531981093125, 0.585432191651981 }, new long[] { 4304, -3034, 742, 5980, 8455, 6289, 5846, 461, 3523, -3162 }, new short[] { -2523, -3635, 7710, -2646, -6899, 5614, 9190, -6692, -8298, -1099 }, new long[] { -5571, 405, -9830, 9877, -7413, -6747, 5343, -8214, -8200, -7383 })]
		[TestCase(new short[] { 6722, -514, -816, -3721, -3846, 3797, 1694, 7192, -6050, 5731 }, new double[] { 0.14839295956697, 0.530436980319413, 0.115268827004018, 0.553598472640663, 0.761266502906227, 0.103323865730001, 0.624492774542651, 0.0755298296341346, 0.923430606221515, 0.397426518796676 }, new short[] { 8857, 2995, -5161, -1569, -2718, -6100, -3203, 863, 3394, 5203 }, new double[] { 0.0472939922694555, 0.703118120181895, 0.433117743317558, 0.54538187875663, 0.505686289400648, 0.89952259971738, 0.859034482324046, 0.571686105603206, 0.0600446891319215, 0.46511095690779 }, new long[] { -6078, -8001, 9356, -4031, -4067, 3818, -1899, -903, -5346, -9479 }, new short[] { 762, 3833, -6683, 3850, -6242, -6271, -5352, -9245, 8996, -7745 }, new long[] { -2998, -9168, -6200, -1254, 4785, -1094, -8052, 1397, -9040, 7234 })]
		public void Forloop(short[] a, double[] b, short[] c, double[] d, long[] e, short[] f, long[] val)
		{
			bool[] found = new bool[9];
			bool allFound = false;
			NKeyHash<short, double, short, double, long, short, long> nKeyHash = new NKeyHash<short, double, short, double, long, short, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, long, short, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, long, short, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<short, double, short, double, long, short, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, long, short, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, long, short, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<short, double, short, double, long, short, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, long, short, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, long, short, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<short, double, short, double, long, short, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, long, short, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, double, short, double, long, short, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);
		}

		[TestCase(-7500, true, true, 7698, -3789, 0.643761941531562, -5557, 0.355624590234656)]
		[TestCase(746, true, false, -3613, 3342, 0.821368610403207, 2436, 0.947361480420158)]
		[TestCase(-7698, false, true, 612, 1182, 0.851337148738716, 1872, 0.835141110157194)]
		[TestCase(-1861, false, true, -293, 3523, 0.707477963858972, -177, 0.344801520157979)]
		[TestCase(90, false, true, -4464, -3544, 0.46509983551926, 4619, 0.546171443325547)]
		[TestCase(-5696, false, true, -2865, -5751, 0.72863011561736, -6107, 0.422920773002748)]
		[TestCase(-1380, false, false, -9061, 8661, 0.151246931474305, -2312, 0.273577896539857)]
		[TestCase(-8409, true, false, 8791, 7240, 0.736768207390219, 3588, 0.829842543150225)]
		[TestCase(-5010, false, true, -2434, 8171, 0.345075880803669, 2491, 0.649937381804892)]
		[TestCase(-1530, false, false, -6490, 8866, 0.236902041936713, 2455, 0.67829558703969)]
		public void Add(short a, bool b, bool c, int d, short e, double f, long g, double val)
		{
			NKeyHash<short, bool, bool, int, short, double, long, double> nKeyHash = new NKeyHash<short, bool, bool, int, short, double, long, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<short, bool, bool, int, short, double, long, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<short, bool, bool, int, short, double, long, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<short, bool, bool, int, short, double, long, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g));
		}

		[TestCase(true, 2783, false, -2640, 9740, 5827, 3681, -431, 4084)]
		[TestCase(false, -7853, false, 8276, 6326, 286, -8281, -1129, 3866)]
		[TestCase(true, 1386, true, -5821, -3395, 6850, -3359, 5994, 5265)]
		[TestCase(true, 3648, false, -686, 6102, 2020, -769, -525, -4610)]
		[TestCase(false, -4866, true, 2641, 3593, 6740, -575, 7304, -7406)]
		[TestCase(false, 5288, false, 6888, 9367, -6708, 3416, 6416, 6845)]
		[TestCase(true, 3912, false, -2905, -9279, -6253, -9436, -6383, 5918)]
		[TestCase(true, 2249, false, 1972, -952, -3147, -5102, 8761, -6261)]
		[TestCase(false, 9825, true, 9972, 4752, -701, 4258, 8177, -9292)]
		[TestCase(false, 3176, true, 8135, 5895, 9685, 5173, 8879, 5560)]
		public void Upsert(bool a, short b, bool c, long d, short e, int f, int g, short val, short newVal1)
		{
			NKeyHash<bool, short, bool, long, short, int, int, short> nKeyHash = new NKeyHash<bool, short, bool, long, short, int, int, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g));
			nKeyHash.Upsert(a, b, c, d, e, f, g, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<bool, short, bool, long, short, int, int, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g));
			nKeyHash.Upsert(a, b, c, d, e, f, g, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<bool, short, bool, long, short, int, int, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g));
			nKeyHash.Upsert(a, b, c, d, e, f, g, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<bool, short, bool, long, short, int, int, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g));
			nKeyHash.Upsert(a, b, c, d, e, f, g, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g));
		}

		[TestCase(0.25280624919236, 6549, 6489, -3758, -9651, 1991, false, 0.977653227270419)]
		[TestCase(0.640391179192993, 6590, 9052, 376, 9159, 6880, true, 0.127050769574498)]
		[TestCase(0.151978816907843, 2496, 438, -8359, 4519, 6352, false, 0.83992706418034)]
		[TestCase(0.508362641794776, 1291, -4311, -7098, 9323, 1097, false, 0.390768901161276)]
		[TestCase(0.957584265134104, 7984, -5757, 7707, -8310, 4464, false, 0.0592505550287899)]
		[TestCase(0.683663259113051, 8582, -6911, -6904, 6120, -1495, true, 0.116413206847577)]
		[TestCase(0.15128320183199, -8126, -3527, 9580, 9538, 9181, false, 0.435138000843645)]
		[TestCase(0.509709768234617, 9690, 6073, -944, -3695, 7704, false, 0.085518604649938)]
		[TestCase(0.442162214052939, 1237, 1224, -8824, 2638, 5126, false, 0.428726594163443)]
		[TestCase(0.238908273279159, -746, -2033, 5935, 3264, -6738, false, 0.0831639892808925)]
		public void Delete(double a, long b, short c, int d, long e, int f, bool g, double val)
		{
			NKeyHash<double, long, short, int, long, int, bool, double> nKeyHash = new NKeyHash<double, long, short, int, long, int, bool, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Delete(a, b, c, d, e, f, g);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<double, long, short, int, long, int, bool, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Delete(a, b, c, d, e, f, g);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<double, long, short, int, long, int, bool, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Delete(a, b, c, d, e, f, g);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<double, long, short, int, long, int, bool, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Delete(a, b, c, d, e, f, g);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
		}

		[TestCase(5737, true, 0.375722794037183, 0.0998658868949236, 8390, 8662, 4880, 0.798385661467158)]
		[TestCase(8354, false, 0.712591104075588, 0.244138115199347, 7278, 5226, -310, 0.394937053506699)]
		[TestCase(-8979, true, 0.740186158912343, 0.514295697917368, 1216, -3688, 5436, 0.346659674936281)]
		[TestCase(9012, true, 0.708210660008812, 0.147233500213937, 7829, -7222, 7084, 0.0338694481336835)]
		[TestCase(-7037, true, 0.271780281454222, 0.854956190034261, -2387, 8854, 183, 0.305736029663)]
		[TestCase(4372, true, 0.879082241039296, 0.594376152192418, -990, 5794, -5615, 0.983218796077752)]
		[TestCase(3669, true, 0.821592979050052, 0.336383346624851, 3361, 7989, -1247, 0.471394765875952)]
		[TestCase(-9896, false, 0.149202190874704, 0.199005535430743, -5500, 1935, 8136, 0.778893551220602)]
		[TestCase(-5706, true, 0.0960386661328555, 0.301212628046615, -208, 2590, -9712, 0.108233253987615)]
		[TestCase(-2285, false, 0.795658342910771, 0.960890712198285, -1270, -6449, 7923, 0.160909029730088)]
		public void Remove(long a, bool b, double c, double d, short e, int f, int g, double val)
		{
			NKeyHash<long, bool, double, double, short, int, int, double> nKeyHash = new NKeyHash<long, bool, double, double, short, int, int, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Remove(a, b, c, d, e, f, g);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<long, bool, double, double, short, int, int, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Remove(a, b, c, d, e, f, g);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<long, bool, double, double, short, int, int, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Remove(a, b, c, d, e, f, g);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<long, bool, double, double, short, int, int, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Remove(a, b, c, d, e, f, g);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
		}

		[TestCase(-7496, 6007, 6996, -2968, 5870, -3796, -8383, -7562)]
		[TestCase(3860, -7995, -2404, 5434, 3873, 8358, -126, -8919)]
		[TestCase(1690, 4266, 9012, -5326, -7922, -465, -9300, 6551)]
		[TestCase(-7342, 9764, 3952, 0, -7337, 2283, -767, 3934)]
		[TestCase(-3740, 6948, -6477, 3782, 5592, 3254, -3706, -8488)]
		[TestCase(-2926, 3476, -4642, -3274, 5954, -7509, -656, 1667)]
		[TestCase(-5372, -1804, 4162, 2077, 1343, -7357, -7104, 2967)]
		[TestCase(5308, -9554, -5625, 6104, 2250, 1615, 9774, -8421)]
		[TestCase(2770, 3659, -824, 6924, 4837, 6089, -4513, 8434)]
		[TestCase(-2026, 7502, 7598, -1399, -5821, 3973, -9402, -9831)]
		public void ContainsKey(int a, long b, int c, short d, short e, int f, short g, short val)
		{
			NKeyHash<int, long, int, short, short, int, short, short> nKeyHash = new NKeyHash<int, long, int, short, short, int, short, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Delete(a, b, c, d, e, f, g);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<int, long, int, short, short, int, short, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Delete(a, b, c, d, e, f, g);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<int, long, int, short, short, int, short, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Delete(a, b, c, d, e, f, g);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<int, long, int, short, short, int, short, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Delete(a, b, c, d, e, f, g);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
		}

		[TestCase(4053, true, 8473, 5147, 0.444055662231546, 0.509405760331734, false, true)]
		[TestCase(3700, false, 3953, -7703, 0.66568483396698, 0.620917266989554, true, false)]
		[TestCase(-7290, true, -5895, 3840, 0.252125568805321, 0.714739690867597, false, false)]
		[TestCase(9846, false, -4316, -34, 0.312160626199171, 0.265439145856276, false, true)]
		[TestCase(1068, false, -7127, -5715, 0.880774556137982, 0.516886360252689, false, true)]
		[TestCase(-1756, false, 4898, -9600, 0.000970949884956214, 0.915075680667104, false, true)]
		[TestCase(-4544, true, 1757, -7606, 0.652524095332494, 0.437538806552784, true, true)]
		[TestCase(-8235, true, 5300, -5324, 0.225238725647907, 0.964738710301341, false, false)]
		[TestCase(-9676, true, 1227, -2244, 0.477325991018361, 0.627285566938708, true, true)]
		[TestCase(-3825, false, -4401, -7098, 0.969791363445013, 0.419560713423211, false, false)]
		public void Clear(int a, bool b, short c, long d, double e, double f, bool g, bool val)
		{
			NKeyHash<int, bool, short, long, double, double, bool, bool> nKeyHash = new NKeyHash<int, bool, short, long, double, double, bool, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f), 0);

			nKeyHash = new NKeyHash<int, bool, short, long, double, double, bool, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f), 0);

			nKeyHash = new NKeyHash<int, bool, short, long, double, double, bool, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f), 0);

			nKeyHash = new NKeyHash<int, bool, short, long, double, double, bool, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f), 0);
		}

		[TestCase(0.349199184379167, -6886, -7479, -9522, 5036, false, true, false)]
		[TestCase(0.646399507134408, -3493, -9923, -8317, -2925, true, false, true)]
		[TestCase(0.295765834066908, 9385, 6217, -3267, -6846, true, false, true)]
		[TestCase(0.791171209323765, 3753, -2676, 6824, 4784, true, true, true)]
		[TestCase(0.788598199276532, -1089, -9227, -3566, 25, true, true, false)]
		[TestCase(0.651888693986409, 6648, -27, 2889, -1684, true, true, true)]
		[TestCase(0.961127296537686, 1599, -6507, 4164, -5154, true, true, true)]
		[TestCase(0.13749304792727, -852, -5346, -8716, 7554, true, true, true)]
		[TestCase(0.583253508705298, -9182, -4089, 8163, 8327, false, false, true)]
		[TestCase(0.102621776565268, 4923, 3693, -3495, -4297, false, false, true)]
		public void Get(double a, short b, short c, int d, long e, bool f, bool g, bool val)
		{
			NKeyHash<double, short, short, int, long, bool, bool, bool> nKeyHash = new NKeyHash<double, short, short, int, long, bool, bool, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<double, short, short, int, long, bool, bool, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<double, short, short, int, long, bool, bool, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));

			nKeyHash = new NKeyHash<double, short, short, int, long, bool, bool, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g));
		}

		[TestCase(0.487285642180259, -538, 0.184186462864367, false, 0.289598863706737, true, -6260, 0.82910093703731)]
		[TestCase(0.124300237337267, 6850, 0.0612181141326288, false, 0.686230887512784, true, 9923, 0.859949933765433)]
		[TestCase(0.435800520906132, -1978, 0.605620375185097, false, 0.10699598775571, true, -4391, 0.763811238465743)]
		[TestCase(0.204512742443249, -1536, 0.100052506243835, false, 0.942660497940453, true, 6804, 0.549429428553874)]
		[TestCase(0.320165063869285, -4027, 0.420925648147671, false, 0.916990899907887, false, -321, 0.300073225656558)]
		[TestCase(0.559217557105803, 7111, 0.200888720434573, false, 0.312463695328899, true, -7534, 0.148697743727219)]
		[TestCase(0.457310377367451, -9595, 0.723438115196041, false, 0.428203704966327, false, 7797, 0.854262534926768)]
		[TestCase(0.19267844464289, -1592, 0.83939568877192, true, 0.702496044664875, true, 7728, 0.575371157645886)]
		[TestCase(0.00234228698645825, 235, 0.0547811398537742, false, 0.394473977570643, true, 8858, 0.335501882403857)]
		[TestCase(0.917123808021249, -3888, 0.93687000541802, false, 0.432134386818919, true, -972, 0.326602296590154)]
		public void TryGetValue(double a, int b, double c, bool d, double e, bool f, long g, double val)
		{
			double fetch;
			bool b1;
			NKeyHash<double, int, double, bool, double, bool, long, double> nKeyHash = new NKeyHash<double, int, double, bool, double, bool, long, double>(UnderlyingHashType.Dictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(double));
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<double, int, double, bool, double, bool, long, double>(UnderlyingHashType.ConcurrentDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(double));
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<double, int, double, bool, double, bool, long, double>(UnderlyingHashType.SortedDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(double));
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<double, int, double, bool, double, bool, long, double>(UnderlyingHashType.HashTable);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(double));
			nKeyHash.Add(a, b, c, d, e, f, g, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);
		}

		[TestCase(new int[] { -1826, 1333, -4986, -67, -4781, 2349, 1951, 5929, 9382, 2510 }, new double[] { 0.440168530419547, 0.800675009750144, 0.823129305999321, 0.735580730128838, 0.754223766156576, 0.904401628721692, 0.0772182913856666, 0.387936232792184, 0.497615458675481, 0.122656555437789 }, new double[] { 0.287712866574392, 0.638509298972091, 0.422128148107849, 0.354796156918069, 0.96902768126178, 0.512793392181766, 0.566463920085907, 0.751141282148259, 0.795810245348052, 0.963957266399617 }, new double[] { 0.749880193150546, 0.576839730412159, 0.390562961991207, 0.959198947976902, 0.97896619000424, 0.827810864349739, 0.302262845589902, 0.446343358348284, 0.0745989326735022, 0.299613807024254 }, new double[] { 0.707969968536855, 0.140386361694143, 0.282229511198695, 0.806616824030232, 0.397713757305273, 0.6506725333867, 0.503472990590834, 0.564372564463118, 0.197130996360039, 0.0625220393121811 }, new int[] { 6904, -1248, 8556, 9970, 6156, 5402, -7108, 7916, 551, 4961 }, new short[] { -8978, 6928, -9985, -9894, 7511, 7265, -1797, 7277, 5131, 8527 }, new short[] { 2042, 2617, -3732, -6039, -1706, -7052, -2874, 2309, 9140, -3632 })]
		[TestCase(new int[] { -9812, -9957, 1080, 4665, -7625, -3753, 2978, -2159, -6972, -5823 }, new double[] { 0.683275899236685, 0.406413099452114, 0.9187553641008, 0.326489375124913, 0.248567726113167, 0.86153406969343, 0.139712963318319, 0.277023758868232, 0.930979454392092, 0.534384957297884 }, new double[] { 0.240560485627763, 0.639542632568415, 0.80775802433852, 0.270718094553202, 0.46038325618039, 0.214389948274191, 0.124217431584474, 0.729885446247591, 0.583882581248825, 0.660542820422232 }, new double[] { 0.413892347558351, 0.529023641035437, 0.938767346524991, 0.209232846372404, 0.738789155957656, 0.0489547252882993, 0.292425613055204, 0.267385192339954, 0.886513367242419, 0.563311908190749 }, new double[] { 0.214376167494048, 0.0181182539174884, 0.712600735347998, 0.547820485452106, 0.243137002570153, 0.195725683679676, 0.712119568936582, 0.986847924993768, 0.94943392553806, 0.553152517207504 }, new int[] { -9846, -8414, 3690, -1545, -8443, -2604, -6112, -4333, -4541, 8085 }, new short[] { -6237, 8380, 6161, -184, 5897, -6914, -647, 4190, 1753, -6007 }, new short[] { 1382, 7445, -2189, -2646, -3599, -5550, 8537, -4800, -9447, -4706 })]
		[TestCase(new int[] { 45, -7251, 5608, -9384, 3058, -3306, 6889, 321, -7370, -2619 }, new double[] { 0.854621394004031, 0.00913342182018488, 0.994480242484473, 0.982210930428566, 0.375203878327833, 0.295308981228298, 0.210007041324865, 0.221813933095808, 0.752918778337966, 0.0888847443689055 }, new double[] { 0.728079930752553, 0.00259705120818552, 0.399147705826511, 0.749820924713193, 0.984044060569277, 0.135285770583565, 0.688745637279351, 0.316864323484183, 0.102688652511075, 0.855352430537041 }, new double[] { 0.442835871802101, 0.934395792397855, 0.25571109925197, 0.00824737735476688, 0.402032057476245, 0.05073852327221, 0.138615665556218, 0.777381148551303, 0.837857523391888, 0.460265388460953 }, new double[] { 0.309760486851335, 0.951575848717045, 0.57808433360331, 0.218688832232118, 0.344991606820836, 0.559975034818042, 0.877847528493892, 0.408299461197247, 0.992463667873509, 0.0246998085755388 }, new int[] { -9750, 4102, 140, 8773, 731, -6, 4763, -9386, -9065, 352 }, new short[] { 2917, 552, -1732, -4477, 8522, 8403, 5067, 9723, 1603, -3510 }, new short[] { -6865, -1347, -2320, -4146, 5581, 5529, -1509, -6390, -1903, -1518 })]
		[TestCase(new int[] { -4850, -4390, -3511, -8439, 6857, 4753, -1452, -3659, -566, 8046 }, new double[] { 0.312516722508015, 0.10798506955988, 0.730695145079258, 0.320214015115152, 0.814374707087118, 0.782133038985605, 0.538194597018042, 0.301998580015264, 0.29251331709908, 0.42476600521466 }, new double[] { 0.806552712249827, 0.891614663364186, 0.828120588244926, 0.667998312817886, 0.868006492903459, 0.579809297611848, 0.321171554420689, 0.214365370671435, 0.159572090096572, 0.760073559712653 }, new double[] { 0.0751606105245466, 0.557762927169801, 0.625801278103982, 0.622616977720809, 0.260205266187063, 0.365444505291732, 0.203226792255056, 0.335392407763466, 0.433168513436415, 0.188467607455546 }, new double[] { 0.492848569756769, 0.436407570930388, 0.5145631295231, 0.677820143605499, 0.0119486325476079, 0.0487082461121996, 0.701930747694304, 0.0637423945887677, 0.478278682789895, 0.996991218531966 }, new int[] { -5233, -7548, 7758, 9600, 2350, -2683, -953, 3127, -5799, -4737 }, new short[] { -1669, -5739, -6850, 4231, 6543, 5094, -356, -7837, -8798, -1021 }, new short[] { 1577, -5943, 7375, -7918, 8637, -2596, -2458, -6993, 3120, 6385 })]
		[TestCase(new int[] { 7556, -4850, 4721, -6747, 435, 9052, 3396, 2914, -9896, 7886 }, new double[] { 0.913118917454555, 0.546824449462269, 0.125410056731389, 0.170060570896631, 0.771931254198743, 0.279836908578797, 0.278964909389133, 0.802966953629147, 0.850622024783223, 0.257194837209394 }, new double[] { 0.566524454656301, 0.593852580335854, 0.00373364566067869, 0.0293484809945098, 0.418084971801417, 0.0355072957628906, 0.253684071010763, 0.783899846851779, 0.0481458772198045, 0.247371172181969 }, new double[] { 0.988772044884401, 0.302025143197749, 0.000352662522510003, 0.390684104240818, 0.385229392622239, 0.159107193424882, 0.476924973296432, 0.994861789976648, 0.189832101198766, 0.874551645887341 }, new double[] { 0.0849364246637264, 0.836445826029613, 0.10297750313905, 0.165627061466513, 0.53581128434083, 0.0320817972682797, 0.0773921325231866, 0.698769495682218, 0.332114455444792, 0.652080526879095 }, new int[] { -8175, 1481, -4006, -2022, -4944, -4319, -4925, 4134, 4889, -274 }, new short[] { 3978, 7717, 1951, 5154, 8111, 2221, 929, 4694, 5696, 2256 }, new short[] { 6057, -4317, 2262, 9520, -6554, 4601, -182, 6761, -129, -2279 })]
		[TestCase(new int[] { 9161, 1098, -964, -2078, -6875, -1706, -9952, 2029, -7241, -7975 }, new double[] { 0.90541167925364, 0.770186766409402, 0.250365890213459, 0.70357532226647, 0.17558924396317, 0.199018900841018, 0.238853737823131, 0.345248011101618, 0.260017418889337, 0.924717510084024 }, new double[] { 0.485610010328521, 0.342666180032616, 0.913938317407825, 0.719290394670931, 0.84916859159673, 0.807077112517821, 0.960949727781559, 0.323608040960323, 0.226596430515217, 0.52269516350827 }, new double[] { 0.793150892384886, 0.415588929977077, 0.213201010233351, 0.358492725230052, 0.528141615692592, 0.144047826595627, 0.434132132415721, 0.201526737865772, 0.601538551785768, 0.490922177904715 }, new double[] { 0.608747050915261, 0.944973967478133, 0.596815640384711, 0.683627755233845, 0.707412381520221, 0.0327251688729623, 0.0337372291990264, 0.90955953016391, 0.800481134932712, 0.97323951170465 }, new int[] { -175, -7086, 1561, 1376, 8007, 2308, 2819, 4649, 937, -3017 }, new short[] { -925, 3574, -2501, 2304, -3838, -203, 1139, 7836, -6490, -9368 }, new short[] { 5297, -9252, 4873, 5381, -3680, 812, 4916, -5393, -9761, 6328 })]
		[TestCase(new int[] { 5466, -8971, 462, -4932, -9369, 2950, 6749, 2887, -837, 8253 }, new double[] { 0.503071568674907, 0.701637135679665, 0.654629979121792, 0.252424724051927, 0.0371844410138132, 0.93000836853404, 0.570072578531724, 0.981600491787121, 0.375575224578183, 0.217589632243658 }, new double[] { 0.475739412696911, 0.141864064215619, 0.734125823590032, 0.768939717565169, 0.208352743279353, 0.453897890846197, 0.401917606779336, 0.808993924320207, 0.252849227400892, 0.359757121354228 }, new double[] { 0.869598443559184, 0.410665695746739, 0.720616983585347, 0.730453336020211, 0.575773944415047, 0.402347539273253, 0.155611776353611, 0.121544470135842, 0.583744875892878, 0.660528704365962 }, new double[] { 0.652322984604315, 0.912604432512356, 0.433773603957972, 0.262741074088375, 0.528469848692636, 0.0632496327456318, 0.382697020835568, 0.491284735263924, 0.731910799970809, 0.385962090634723 }, new int[] { 9410, 5284, 7093, 5885, -3185, 2629, -3654, 5083, -9099, 1551 }, new short[] { -5087, -9428, -2169, -8032, -9137, -8151, 9619, 8482, 3532, 2696 }, new short[] { 5487, -1029, -2042, 4300, 1305, 1262, 4161, -572, -5190, -7097 })]
		[TestCase(new int[] { -8575, 8211, -8457, 7337, -2215, -7892, 1118, 8525, -2204, 8885 }, new double[] { 0.085083165245635, 0.401424587891169, 0.0765402946046276, 0.00617249403436319, 0.414922484855597, 0.623817144252275, 0.521072336249553, 0.335431164286766, 0.219646885162055, 0.436063975764468 }, new double[] { 0.0822294806513141, 0.458520377733987, 0.814633955627044, 0.0970738982302481, 0.611565498454294, 0.522035355922782, 0.366394431966541, 0.139688817383577, 0.229021733267709, 0.777569029842303 }, new double[] { 0.923385358845529, 0.84587962452596, 0.513717319589908, 0.899901064997493, 0.506371511847885, 0.334973347994952, 0.951422716002642, 0.524644959496634, 0.709148782635643, 0.937745793227919 }, new double[] { 0.536475514777226, 0.0546915494160222, 0.534427317108227, 0.732352654325009, 0.549753736494926, 0.37297200428926, 0.371987813791254, 0.39168312185988, 0.300124035356624, 0.941449503387068 }, new int[] { -9157, -2546, -4964, 6087, -8741, 2253, -8079, 9599, -4893, 7342 }, new short[] { 4778, -1675, 3945, 2243, -9580, -5215, 7753, -6466, -3, -8400 }, new short[] { 3447, 9927, 2525, -4361, 7990, -9448, 8481, -8353, 946, -5227 })]
		[TestCase(new int[] { -6998, 9493, 6790, -4248, 4709, 1014, 1882, 4185, 6739, 7873 }, new double[] { 0.238974432106584, 0.971413489883492, 0.26932332118476, 0.841990481522861, 0.198791829496059, 0.120233974009861, 0.357384680005435, 0.922247020957175, 0.711439887858666, 0.310550195775251 }, new double[] { 0.485264735987999, 0.19534858418412, 0.891882139673402, 0.220174898495979, 0.269055075137436, 0.0456352671820835, 0.746376914319758, 0.969836772405466, 0.904817432120823, 0.0353356986471152 }, new double[] { 0.688587431650882, 0.0137176145863336, 0.432689064383828, 0.0167281441468411, 0.717110758981253, 0.764242653625199, 0.576676758740412, 0.409734639529947, 0.876673910243751, 0.470186703591694 }, new double[] { 0.645061780533316, 0.178395841819419, 0.339611794492049, 0.606109962615236, 0.840974704754061, 0.70098093836614, 0.727104055568159, 0.784291900128262, 0.0831092624380762, 0.779354486977381 }, new int[] { 3402, -9962, -2582, -5264, 5066, 9093, -8342, 2387, -9628, 3797 }, new short[] { 6086, 2485, 6089, 6033, -5897, -5494, 774, -4947, -7501, -1308 }, new short[] { 871, 8952, -9087, -5174, 3309, -3862, 7114, -4284, -2415, 1361 })]
		[TestCase(new int[] { -3629, 9240, 7733, -7489, -2696, 3734, 2857, -6081, -4731, 5247 }, new double[] { 0.68141348319194, 0.957286875209439, 0.391217484786742, 0.186802791518533, 0.665837555036804, 0.0207567927524246, 0.373901847458399, 0.537920058024079, 0.401006374694876, 0.615717887233811 }, new double[] { 0.162256512866475, 0.47450887853024, 0.659412177586654, 0.648560086567216, 0.235797271707932, 0.722503210754368, 0.95627292895516, 0.129588229176397, 0.571281550718137, 0.446459864008455 }, new double[] { 0.0989621682553376, 0.797056993375093, 0.240189689789056, 0.450443017971908, 0.371339907111293, 0.842264134363394, 0.737577477813502, 0.679031049217578, 0.436509289050712, 0.518362195938063 }, new double[] { 0.582380616377285, 0.342805327075909, 0.989195791068112, 0.362467921507763, 0.753135692678921, 0.58627034006001, 0.556432555688746, 0.858770319194892, 0.575415629230168, 0.64473162248951 }, new int[] { 8658, -3643, 7694, 5269, -1883, 6879, -3946, -5236, 7792, 2853 }, new short[] { 4608, 265, 2492, 6338, 3268, 7686, 4341, 8814, 6308, 6470 }, new short[] { -4335, 3897, -7970, 7652, -9332, 6388, -293, -4060, 7907, 2990 })]
		public void Count(int[] a, double[] b, double[] c, double[] d, double[] e, int[] f, short[] g, short[] val)
		{
			NKeyHash<int, double, double, double, double, int, short, short> nKeyHash = new NKeyHash<int, double, double, double, double, int, short, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0]), 9);

			nKeyHash = new NKeyHash<int, double, double, double, double, int, short, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0]), 9);

			nKeyHash = new NKeyHash<int, double, double, double, double, int, short, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0]), 9);

			nKeyHash = new NKeyHash<int, double, double, double, double, int, short, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0]), 9);
		}

		[TestCase(new bool[] { false, true, true, false, true, true, true, false, true, false }, new bool[] { true, true, true, true, false, true, false, false, false, false }, new int[] { 4602, 1727, -2825, -9884, -3144, -5196, -467, 2659, 9181, 3961 }, new double[] { 0.303446704663079, 0.882304196191162, 0.972065298805044, 0.240389802139434, 0.896149072747747, 0.288145310379632, 0.283982122914857, 0.783769260525596, 0.905505422458754, 0.307580716585545 }, new int[] { -8104, 9283, -7973, -3738, 1958, -9466, 5606, 1008, -8915, 6046 }, new long[] { 1299, -4491, 1294, 8202, 4930, -834, -6627, 677, -6865, 984 }, new double[] { 0.317221470790553, 0.154927879644059, 0.109977272390377, 0.0200801598932967, 0.868809564443682, 0.816714092538093, 0.896713904057031, 0.628783352500193, 0.719509016126166, 0.755162124408019 }, new int[] { -642, 1555, -3347, 8175, 8146, 5317, -298, -9086, -1843, -3677 })]
		[TestCase(new bool[] { false, true, true, false, false, false, false, false, false, false }, new bool[] { false, true, true, false, true, true, true, false, false, true }, new int[] { -7400, -6967, 6617, -4018, -3310, 9743, 8855, 3117, -9943, 9612 }, new double[] { 0.973175924258854, 0.122955901139861, 0.126060104056289, 0.840569186415788, 0.0894416692151882, 0.391025455384993, 0.576157201349808, 0.95319229175951, 0.886990161094344, 0.840759428609516 }, new int[] { -17, 6695, -7300, -4367, 2712, 4354, 9012, 9525, 8368, 9350 }, new long[] { 8231, -1922, 2027, 2531, -6276, -3835, -8093, -4404, 6445, -7081 }, new double[] { 0.0852443930158598, 0.661650494514802, 0.0590973417549847, 0.513165516086465, 0.464714192536061, 0.996581080833721, 0.624059301625965, 0.78653304920836, 0.266837119249085, 0.59933379041 }, new int[] { -2726, 8020, -6115, 2069, -4358, -4097, -9666, 985, 3267, 2334 })]
		[TestCase(new bool[] { false, true, true, false, false, true, true, false, true, true }, new bool[] { false, false, false, true, true, true, true, true, true, true }, new int[] { -8125, -6716, 4189, -3616, 2077, -9787, -5806, 9957, -3109, 7820 }, new double[] { 0.291600013753213, 0.546007814605724, 0.61632971959949, 0.20558504909537, 0.109341662893697, 0.118750687743887, 0.924202267045249, 0.0238475636690145, 0.444136632813204, 0.895418053444204 }, new int[] { -499, -7507, -7356, -287, -3927, -8654, 5403, -937, 6958, -1108 }, new long[] { 387, -2103, 4647, -9511, 460, 7446, -4859, -1633, -1372, -8829 }, new double[] { 0.359629439357496, 0.523633379733019, 0.15494113189864, 0.763349197694729, 0.489627115190787, 0.749725175439252, 0.680089854020667, 0.925292567780843, 0.631773073054744, 0.63676434784977 }, new int[] { 8265, 5036, -6446, 8428, -6719, 9380, -9358, -5522, -9688, 732 })]
		[TestCase(new bool[] { false, true, false, true, false, true, true, true, true, false }, new bool[] { true, true, true, false, true, true, true, false, true, true }, new int[] { -2256, 6897, 6425, -5775, 625, 5349, -5656, 6217, 7206, 1079 }, new double[] { 0.840368652176284, 0.0331538589825639, 0.4027846080264, 0.894729075904344, 0.818110342984139, 0.60306108910733, 0.373688821389195, 0.254976526952803, 0.391688043899689, 0.592851246051887 }, new int[] { 8721, -8236, -5144, -2103, 5500, -1851, -6811, 5839, -2285, -5747 }, new long[] { 9987, 3264, -5441, -766, -7009, -2090, 8703, 8773, -2625, 2082 }, new double[] { 0.679605473615045, 0.00273458007850432, 0.731615735092953, 0.128579996586116, 0.396587010657688, 0.828578041786597, 0.103101641453384, 0.697751956385445, 0.56755539941022, 0.932727524979379 }, new int[] { 1554, 4293, 9540, -1937, 2355, -4018, 2042, -1469, -1276, -7522 })]
		[TestCase(new bool[] { true, false, false, true, true, false, true, true, true, false }, new bool[] { true, false, true, true, true, true, false, false, true, true }, new int[] { -3913, -767, -5510, -940, 2697, -4304, 3722, 6494, 6876, 7008 }, new double[] { 0.793306558296693, 0.508735207612037, 0.502560121706948, 0.244840923810769, 0.996015356386088, 0.25442308478729, 0.577539328754665, 0.0838823323528666, 0.574065829894536, 0.219454489750534 }, new int[] { -9532, -6759, 9049, -7101, -4701, -7144, 6567, -6208, -202, 3687 }, new long[] { 8849, -240, -1434, -205, 6390, -7069, -5984, 9443, -9742, -4604 }, new double[] { 0.490989562352649, 0.98052138228925, 0.097251358952956, 0.894797995637543, 0.629348114891605, 0.159082807674577, 0.932392583197166, 0.641438018363639, 0.7915305498948, 0.658822687649551 }, new int[] { -2883, -4547, 802, 5574, 8462, -7152, 182, -8408, -6238, -156 })]
		[TestCase(new bool[] { false, false, false, false, true, false, false, false, false, true }, new bool[] { false, true, false, false, true, false, false, false, true, false }, new int[] { -5792, -6260, -2039, 6620, -3427, 3397, 8956, 2989, 1331, 3543 }, new double[] { 0.637350622861344, 0.121217900477917, 0.784163732446806, 0.520671683140412, 0.813366779039319, 0.994393870231879, 0.64565681509937, 0.937789489951818, 0.986872144037332, 0.324014898540459 }, new int[] { -8426, 8390, -5676, 8839, 2102, 5009, -5968, -5283, -8992, 7606 }, new long[] { -8446, -971, 1279, -8354, -4363, -4611, -8027, 76, 6616, -5238 }, new double[] { 0.357469814064666, 0.430956184133401, 0.446265112350818, 0.748080937074535, 0.212178230850109, 0.932455402767498, 0.821150859268918, 0.550385829783224, 0.490955245444065, 0.734071057166006 }, new int[] { -2057, -7460, -8582, -6168, -9455, -4183, 9415, -879, -5481, 1561 })]
		[TestCase(new bool[] { false, true, true, true, true, false, true, true, false, true }, new bool[] { true, false, false, true, true, true, false, false, true, true }, new int[] { 8586, 3023, 4896, -3674, -335, 9012, -2387, -2550, -8898, 9818 }, new double[] { 0.298611431055987, 0.642563955226244, 0.277887613641977, 0.25278627418577, 0.769698658385174, 0.645394326953867, 0.831765609715025, 0.76005500869828, 0.14848333417833, 0.0262570846948107 }, new int[] { -2495, -7614, -3769, 8939, 6764, -4894, -9598, -3559, -5499, -2409 }, new long[] { 6349, 54, 4523, 1064, 2974, 6342, 9343, -4340, -5939, 2978 }, new double[] { 0.805325928519166, 0.184797073800488, 0.646896762608968, 0.24789995106305, 0.245333638156454, 0.253250939423801, 0.863967803243533, 0.854133546284462, 0.97914543095005, 0.321150757521927 }, new int[] { 6317, 4264, -3608, 4070, -4050, 6202, -3206, 5955, -440, -5440 })]
		[TestCase(new bool[] { true, false, false, true, false, true, true, true, true, true }, new bool[] { true, true, true, false, false, false, false, false, true, true }, new int[] { -2173, -6681, -3142, 8076, 1272, -7913, -6336, -9546, -4884, 6771 }, new double[] { 0.477468673827811, 0.169420323879188, 0.804966886437017, 0.975012169207918, 0.71824480859481, 0.746720880617723, 0.0373481451707651, 0.971396848080399, 0.0744383656766444, 0.449468385171829 }, new int[] { -3262, -7213, -4998, -9467, 2859, -4657, -6876, 6399, -347, -7858 }, new long[] { -3243, -4478, -8076, 7858, 6732, 5295, 4314, -5127, -7761, -8615 }, new double[] { 0.612699841434462, 0.893747225819969, 0.468925217384903, 0.765471889062539, 0.47508315903837, 0.508731185695497, 0.743848074108291, 0.582068013764018, 0.781323394170647, 0.474210275557921 }, new int[] { -6937, 18, 9782, -4955, -5036, -4959, 8315, -3674, -4782, -4068 })]
		[TestCase(new bool[] { true, false, true, false, true, false, false, true, false, true }, new bool[] { false, true, true, false, true, false, true, false, true, false }, new int[] { 464, 1481, -9225, -9830, 9078, 6737, -4261, 6878, 2896, 1692 }, new double[] { 0.848985840496135, 0.399509168416033, 0.982764434992692, 0.815329267091737, 0.121043443736175, 0.249546993640041, 0.353757275898828, 0.320240135453753, 0.264694803051974, 0.273688168858033 }, new int[] { -1290, 6636, -1125, 6556, -1134, -2813, 2827, 9677, -1691, 6099 }, new long[] { 1632, -1375, 5294, -7467, 5465, -2518, -3510, 631, -6105, 3277 }, new double[] { 0.914487408899929, 0.229336565932881, 0.26713649102819, 0.553701318126964, 0.104467247661421, 0.631451403084887, 0.810976652340487, 0.0441971463357085, 0.884219280855832, 0.587221550097327 }, new int[] { -8211, -2997, -5601, -4443, 3975, 3827, -7391, -5783, 1303, 1892 })]
		[TestCase(new bool[] { false, false, false, true, false, false, true, true, false, true }, new bool[] { true, true, false, true, false, false, true, true, true, true }, new int[] { 966, 1943, -8005, 6563, 4311, -5369, -5773, -261, -1444, -8360 }, new double[] { 0.243674413880182, 0.113644814637324, 0.96638975616842, 0.600043630972525, 0.468410431159851, 0.611483205394579, 0.800838372577372, 0.427280005732216, 0.550678355875741, 0.686686453729256 }, new int[] { 9932, 9094, -9955, -7254, 3242, -4655, -5507, 2381, 8371, -146 }, new long[] { -7466, -5192, -251, 5067, -9073, 1965, -5933, 2005, -7514, 5430 }, new double[] { 0.206481777693369, 0.147850035292958, 0.428426558817004, 0.960107919275811, 0.503322565696818, 0.811438500793389, 0.855802518714127, 0.525497380888787, 0.132391315946538, 0.747717554563525 }, new int[] { -1894, -7250, -3212, -9264, 6301, 1871, 1900, 9248, -6677, -1031 })]
		public void Any(bool[] a, bool[] b, int[] c, double[] d, int[] e, long[] f, double[] g, int[] val)
		{
			NKeyHash<bool, bool, int, double, int, long, double, int> nKeyHash = new NKeyHash<bool, bool, int, double, int, long, double, int>(UnderlyingHashType.Dictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<bool, bool, int, double, int, long, double, int>(UnderlyingHashType.ConcurrentDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<bool, bool, int, double, int, long, double, int>(UnderlyingHashType.SortedDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<bool, bool, int, double, int, long, double, int>(UnderlyingHashType.HashTable);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());
		}

		[TestCase(new short[] { 1074, 7401, -1836, -5988, -3938, 5582, -395, 6975, 527, -9157 }, new long[] { 2677, 7013, -1772, 3981, -265, -6581, -8250, 9783, 8019, -985 }, new long[] { 8764, -945, -9934, -5182, -1315, 3515, 5291, 2285, 1590, -132 }, new double[] { 0.00484477542566358, 0.5000078373123, 0.185209491376397, 0.642789706421452, 0.971755429157873, 0.262259250628883, 0.339554455755071, 0.204723640440369, 0.834398377143963, 0.560183204505678 }, new double[] { 0.556511928586528, 0.966282463616823, 0.0672068163134189, 0.552974561021186, 0.328562060058379, 0.31538009052881, 0.0370603264482041, 0.307805535992517, 0.10548176574776, 0.397392965572604 }, new short[] { 6952, 9320, -7953, -6488, -4504, -7979, 7337, -6653, 5326, 2544 }, new long[] { -9708, 7317, -4613, -9338, -9254, -7321, 3309, 5371, 4546, -5510 }, new short[] { 6626, 7652, -6902, -3182, 7882, 9438, -2289, -994, 8245, -7622 })]
		[TestCase(new short[] { 2774, -863, 176, -6356, 2913, -9223, -2045, -9805, -2638, 7414 }, new long[] { -2092, -6554, -1232, -5856, 913, 3811, 3939, -9315, 315, -6105 }, new long[] { 2997, -4630, 1609, 7619, 1320, 9298, 6224, 5228, -4372, -3944 }, new double[] { 0.715479480435829, 0.41662079534336, 0.255008536975369, 0.647537709049665, 0.988514015911386, 0.557704803327892, 0.357112352436926, 0.0871196384947373, 0.387314952158981, 0.99842043826283 }, new double[] { 0.736173112753859, 0.655810559939505, 0.40055106412645, 0.85659269655896, 0.829083615834398, 0.659099832018418, 0.444319762496427, 0.947666561206647, 0.795184303445362, 0.203592974787388 }, new short[] { -4500, -2973, 8689, 4352, -621, -2594, 7526, 2555, 2322, 3613 }, new long[] { -5448, 2725, 4566, -8693, -6893, 9574, 8343, 5815, -5626, 9758 }, new short[] { -3330, 2197, 2937, 346, -829, 9880, 7357, 4476, -8960, 8138 })]
		[TestCase(new short[] { 413, 7270, 9324, -8444, -9443, -2716, -357, 747, -6427, 2364 }, new long[] { 3626, 4586, -579, 4131, 5416, -8001, 8548, -3293, 4026, 7005 }, new long[] { 4836, 3069, 4580, 6144, 7401, 3301, 4088, -1656, -4816, -502 }, new double[] { 0.502344741719935, 0.15248349269502, 0.575832796551209, 0.709173049176658, 0.160055327769395, 0.363995371090246, 0.670009929533121, 0.65058758372934, 0.0374706774193191, 0.79111615372408 }, new double[] { 0.496638417475223, 0.3798586830403, 0.61222066525939, 0.600385540444583, 0.306604076319655, 0.604146822171354, 0.138880082470775, 0.940284227458893, 0.746479813357107, 0.358596142082753 }, new short[] { -8667, 652, -9548, -5967, -6697, 7342, -7308, -6818, -5846, -2745 }, new long[] { 3193, -8700, -4434, 4074, -7681, 577, -6929, 5236, 930, -1862 }, new short[] { -1402, -4461, -4043, 8203, -2925, -2759, -9173, -7426, 12, -4680 })]
		[TestCase(new short[] { 524, 5282, 3413, 8009, -1834, 9393, -7400, -2515, 881, -4141 }, new long[] { -5410, 219, -1140, 3495, -7371, -1365, -7967, 8168, -310, 5554 }, new long[] { -987, -2458, -2125, -3207, 8573, 5793, -5303, -7752, 6957, 6061 }, new double[] { 0.825895116117734, 0.00588946929475734, 0.658404476315903, 0.941674324191024, 0.836488959303353, 0.895554491735787, 0.394246904363039, 0.377720509831663, 0.295511045165132, 0.146195082527676 }, new double[] { 0.398930269479253, 0.779279652414508, 0.217741789863325, 0.253657209339392, 0.177402853582708, 0.918912386018276, 0.833936778751172, 0.623045631043169, 0.778803123989516, 0.921996464916503 }, new short[] { -4791, -7343, 2883, 4457, 6305, -7016, -2591, -3378, 9435, 2370 }, new long[] { 4697, -9647, 526, 4819, -660, -5528, 7050, 25, 6764, -5282 }, new short[] { -9250, 4477, 2258, -3233, -2423, 3426, -6813, -7197, -6755, -9803 })]
		[TestCase(new short[] { 9114, 2235, -3328, 8517, 853, 3861, -2765, 8709, -7472, 3746 }, new long[] { 502, -8735, -1881, 3539, -1773, -2373, -4940, -465, 5732, 9075 }, new long[] { -8672, -3346, 5694, 858, 7690, 730, 397, -3882, -3118, -7120 }, new double[] { 0.98985475627233, 0.230338291837991, 0.168860960830404, 0.962034954671764, 0.662741901195954, 0.123113384527673, 0.684058523124111, 0.60039067855123, 0.19831303050663, 0.77390556865088 }, new double[] { 0.861846230394135, 0.917058220560224, 0.374920115049426, 0.150953623536487, 0.710714777796862, 0.974280715442393, 0.317991988881487, 0.935967486321911, 0.926979307051273, 0.997473204041586 }, new short[] { -1631, 3651, -2931, -5831, 8868, 2462, 6539, 5811, -9171, -9875 }, new long[] { -6534, -8882, 1828, 9647, 3949, -4103, 7885, -1122, -9714, -4235 }, new short[] { 3945, 3051, -4431, -9743, -8159, -7013, 9153, 2675, 6644, 8204 })]
		[TestCase(new short[] { -5629, 1677, -2421, -3067, 4510, -3853, 7537, 9208, -9627, -9206 }, new long[] { -4077, 7868, 1180, -6156, 2013, 6119, -3487, -2149, -930, -1681 }, new long[] { -8399, 7481, 8433, 2775, -3995, 5315, -1916, -3186, -7671, 5882 }, new double[] { 0.665379277274655, 0.193196597133389, 0.95834604229701, 0.131110597928572, 0.787662205653108, 0.589349283179897, 0.67694448245547, 0.244827956075234, 0.256838511329535, 0.390186102776875 }, new double[] { 0.417876408164332, 0.933831669825051, 0.425277374882846, 0.974623290344432, 0.992088738359552, 0.803801862431598, 0.0935636754583398, 0.0862927209056414, 0.41208718550023, 0.285984614531502 }, new short[] { 6472, 1304, -6392, -1673, 6605, -3112, 3242, 4801, -9070, 9194 }, new long[] { 8062, 725, 6880, -5511, -2514, -7941, 8701, -1441, -1910, -9772 }, new short[] { -7418, -8383, -7285, -8733, 9959, -7076, -1022, 8941, 2933, -72 })]
		[TestCase(new short[] { 3444, -3642, 8570, 6607, 9409, -7996, -9741, 840, -3983, -1134 }, new long[] { 8542, 8735, -6031, -4057, -259, 7631, -8204, -5981, 2007, 7782 }, new long[] { 7372, 3312, 3636, -1984, -6860, 4856, -1409, -7658, -1634, 3682 }, new double[] { 0.895527029361356, 0.715062105429853, 0.0934162824849674, 0.550015388312757, 0.287498699169373, 0.585289196383808, 0.607688306182478, 0.0136724687245081, 0.253888685374469, 0.274083698761688 }, new double[] { 0.0900410302402643, 0.393102835115559, 0.127089016664349, 0.961192246508408, 0.0841342108715951, 0.19222643468167, 0.882377431673174, 0.838591476361543, 0.576251074008761, 0.116425709387486 }, new short[] { -8871, -5039, -3065, 5149, 2554, -9867, 2720, 556, 3469, -5446 }, new long[] { 3412, 7915, -7524, 2333, 954, -5756, 6867, 2967, -9807, 8034 }, new short[] { -4521, -8477, 8938, -3473, 5982, -488, 771, 4412, -3666, 9293 })]
		[TestCase(new short[] { 7208, 1818, 815, -3962, 2555, 2950, -2632, -3281, 8445, -4381 }, new long[] { 8984, -8401, -3195, -9474, 2069, -6115, -4612, 208, -1731, 7439 }, new long[] { -3023, -5319, 6579, 3489, 6849, 9605, -3979, -9590, 9166, -6956 }, new double[] { 0.468023608656611, 0.915399586276803, 0.211174839740235, 0.708782302080087, 0.367170312147201, 0.0796697754783881, 0.35505057887875, 0.821892561308058, 0.988896965509698, 0.900209732307219 }, new double[] { 0.843781087009134, 0.507514519853291, 0.726108307356997, 0.728684995197079, 0.952496423363917, 0.194045474843143, 0.735886673785693, 0.920749106873176, 0.722832487767019, 0.604932103587749 }, new short[] { -5875, -9436, -3855, -1107, 2317, 2529, 5238, 7325, -812, 2948 }, new long[] { -3068, -3041, -2449, 5402, 6257, -9321, 7373, 2627, 3180, 475 }, new short[] { 6782, -1050, 430, 264, -9434, 6825, 157, -7992, 4439, 2968 })]
		[TestCase(new short[] { -5110, -2394, -4047, -2930, 8917, -1202, 2163, 5330, -8141, 4812 }, new long[] { -3645, -224, -2748, -3170, 1073, -82, -7399, 9118, 8315, 8371 }, new long[] { -3492, -7909, -4765, -6018, 5314, 5174, 132, 5878, -1671, 5491 }, new double[] { 0.118642466663682, 0.6616336399045, 0.144289124824241, 0.810901967254887, 0.403023070843435, 0.966285315326548, 0.0503359413940161, 0.024079071369059, 0.8242059735694, 0.373000937222038 }, new double[] { 0.425649545819335, 0.102154430515205, 0.53851343530161, 0.918402438479663, 0.206074579714832, 0.35039440931305, 0.0849265791871243, 0.180083761075551, 0.959560342579875, 0.532370792949745 }, new short[] { 4225, 1037, -6309, 6066, -3537, -7200, -7627, -8028, 1753, -6255 }, new long[] { 8664, 6284, -2996, -3633, 2440, 3121, -3110, 1032, 8767, 1747 }, new short[] { -1089, -7880, -7364, 855, -140, -5535, 1319, -3134, 9858, -1692 })]
		[TestCase(new short[] { 3476, -3469, 6687, 7679, -8733, 1334, -457, -3181, -244, -4738 }, new long[] { 6953, 9034, -1271, 2740, -1205, 2227, 5039, -5595, -4071, 999 }, new long[] { -9880, 665, -5166, -2556, -8262, 2107, -1596, 2833, -3792, -8000 }, new double[] { 0.573981191764577, 0.775284386600966, 0.105589109056438, 0.172289313363046, 0.51336362329934, 0.606742912720303, 0.979855391653187, 0.466134829198073, 0.255016897923787, 0.0552774928767595 }, new double[] { 0.178966940463971, 0.00354696111918751, 0.0638480075001009, 0.67534778857387, 0.739667960321376, 0.493736692934174, 0.669502604598879, 0.494740451450804, 0.10307068801628, 0.881589993313695 }, new short[] { -576, -3084, -9061, -1140, -1810, -7188, -8301, -755, 5942, -842 }, new long[] { -7067, 6707, -9388, -2242, 3781, -8550, 6923, -4717, -7526, 6659 }, new short[] { 2630, -4282, 9302, -5177, -2579, -9951, -611, 1326, 2649, 1862 })]
		public void Forloop(short[] a, long[] b, long[] c, double[] d, double[] e, short[] f, long[] g, short[] val)
		{
			bool[] found = new bool[9];
			bool allFound = false;
			NKeyHash<short, long, long, double, double, short, long, short> nKeyHash = new NKeyHash<short, long, long, double, double, short, long, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, long, long, double, double, short, long, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, long, long, double, double, short, long, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<short, long, long, double, double, short, long, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, long, long, double, double, short, long, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, long, long, double, double, short, long, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<short, long, long, double, double, short, long, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, long, long, double, double, short, long, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, long, long, double, double, short, long, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<short, long, long, double, double, short, long, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, long, long, double, double, short, long, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, long, long, double, double, short, long, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);
		}

		[TestCase(0.372831316838428, 0.521875800807903, 352, 3378, 5941, 8172, -3128, 9458, 3519)]
		[TestCase(0.986253630363501, 0.667234805723296, 2950, -1892, -2578, -4597, -4998, -6292, -2388)]
		[TestCase(0.805792754891232, 0.0719551677219361, -1858, 3421, 371, 6593, -5918, 439, -5575)]
		[TestCase(0.296767637737453, 0.601765860152322, 5181, -782, -3118, -6327, 25, 5015, -3777)]
		[TestCase(0.11390852980032, 0.616900685064914, -6637, -3351, -9449, -9411, 5868, 1601, 9304)]
		[TestCase(0.945571605090784, 0.530509338029897, 1086, -4628, -6424, -1131, 6952, 8451, 1812)]
		[TestCase(0.355743391604975, 0.701742052427373, -9932, 3757, -701, -4496, 3749, -9063, -2575)]
		[TestCase(0.916875628715789, 0.525385716709022, -3535, -720, 8081, 2404, 9178, -7276, 1368)]
		[TestCase(0.212491916125869, 0.473364933148662, -9109, -2445, 7551, 8769, 7288, -4829, 9828)]
		[TestCase(0.66688045191899, 0.0282097323929005, -1539, -3685, 2263, -1570, 1858, -7088, -9017)]
		public void Add(double a, double b, int c, int d, long e, short f, long g, long h, long val)
		{
			NKeyHash<double, double, int, int, long, short, long, long, long> nKeyHash = new NKeyHash<double, double, int, int, long, short, long, long, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<double, double, int, int, long, short, long, long, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<double, double, int, int, long, short, long, long, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<double, double, int, int, long, short, long, long, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h));
		}

		[TestCase(2841, -367, true, 0.934055579795528, -3807, 0.0425966950331799, 7499, 0.635174065192777, false, true)]
		[TestCase(9559, 6481, false, 0.823473401285463, -5871, 0.283638132402505, -9587, 0.018580716577629, true, true)]
		[TestCase(8242, 8033, true, 0.758544662854888, 1423, 0.65118168045356, 4202, 0.416424387794186, false, true)]
		[TestCase(-8722, 4390, false, 0.883821587489835, -5552, 0.776877579175345, -2698, 0.732824872123462, true, false)]
		[TestCase(-1185, 9559, true, 0.0467573809655185, -6649, 0.224976880580642, -5140, 0.602518074029367, true, true)]
		[TestCase(2486, 9240, true, 0.275400555820856, -7149, 0.740354434931816, 2211, 0.867872813655004, false, true)]
		[TestCase(-3350, -828, false, 0.62080857233182, -353, 0.258475353130361, 6460, 0.181004860988355, true, false)]
		[TestCase(8370, -4244, false, 0.56776838077594, -6789, 0.934155917230135, 8589, 0.824278945952784, true, false)]
		[TestCase(-1835, -7846, false, 0.710248485538293, -5917, 0.101731219376312, -9806, 0.725659671111805, true, false)]
		[TestCase(-6673, -56, false, 0.060219070436535, -9039, 0.982144534113884, 3247, 0.351419839706002, true, true)]
		public void Upsert(short a, int b, bool c, double d, long e, double f, long g, double h, bool val, bool newVal1)
		{
			NKeyHash<short, int, bool, double, long, double, long, double, bool> nKeyHash = new NKeyHash<short, int, bool, double, long, double, long, double, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<short, int, bool, double, long, double, long, double, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<short, int, bool, double, long, double, long, double, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<short, int, bool, double, long, double, long, double, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h));
		}

		[TestCase(-5832, true, true, -4462, -9665, -4995, -5503, true, true)]
		[TestCase(-1665, false, false, -8051, -1206, -7617, -4734, false, true)]
		[TestCase(-5204, true, false, -4564, 1561, -4802, 3639, true, false)]
		[TestCase(-7874, true, false, 7349, -1207, 7347, 2214, true, true)]
		[TestCase(-2399, false, false, 6200, 6462, 9887, -8858, true, false)]
		[TestCase(3203, false, true, 7645, -4942, -4612, -1625, false, true)]
		[TestCase(8731, true, false, 528, 1896, -8551, 8077, false, false)]
		[TestCase(1717, true, true, -2371, -266, 8132, -1040, true, false)]
		[TestCase(1290, false, true, -6321, -5705, 2867, -8477, false, true)]
		[TestCase(4479, false, true, 5002, -1024, -9654, -5098, true, true)]
		public void Delete(int a, bool b, bool c, int d, long e, short f, long g, bool h, bool val)
		{
			NKeyHash<int, bool, bool, int, long, short, long, bool, bool> nKeyHash = new NKeyHash<int, bool, bool, int, long, short, long, bool, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Delete(a, b, c, d, e, f, g, h);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<int, bool, bool, int, long, short, long, bool, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Delete(a, b, c, d, e, f, g, h);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<int, bool, bool, int, long, short, long, bool, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Delete(a, b, c, d, e, f, g, h);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<int, bool, bool, int, long, short, long, bool, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Delete(a, b, c, d, e, f, g, h);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
		}

		[TestCase(-5143, 0.278743545654576, 6357, 4311, 0.434332392380728, -2607, 0.068361428132449, 7083, 9852)]
		[TestCase(8514, 0.752701897990285, 4436, 1787, 0.450368131254971, 1460, 0.43268085896628, -6400, 7892)]
		[TestCase(-3379, 0.835719861479346, -7989, 8475, 0.136392061662111, 6250, 0.31025958122232, -9807, -9405)]
		[TestCase(1509, 0.283684490380662, 471, 9839, 0.222461230225145, 4870, 0.257941608902971, 6664, 4861)]
		[TestCase(6436, 0.00836267089860638, 5791, -3352, 0.681781143267537, 1891, 0.024512219254166, -3614, 8427)]
		[TestCase(7490, 0.849010947555774, -1935, -8949, 0.84818879368165, 4522, 0.809923250139655, 2608, 2708)]
		[TestCase(-4299, 0.318974204509973, -7152, -9892, 0.405351310691494, -1504, 0.339951873449586, -142, 1409)]
		[TestCase(-618, 0.933737834419002, 604, 9565, 0.331430135449129, 2341, 0.829942548568334, 2216, -6567)]
		[TestCase(-7898, 0.998685858677461, -6920, 117, 0.899300248780893, 6342, 0.891135607795387, -1285, -6788)]
		[TestCase(2528, 0.522999602613505, -1289, 5948, 0.182116846638786, 1840, 0.10810423321468, 9458, 286)]
		public void Remove(int a, double b, long c, short d, double e, long f, double g, int h, short val)
		{
			NKeyHash<int, double, long, short, double, long, double, int, short> nKeyHash = new NKeyHash<int, double, long, short, double, long, double, int, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Remove(a, b, c, d, e, f, g, h);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<int, double, long, short, double, long, double, int, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Remove(a, b, c, d, e, f, g, h);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<int, double, long, short, double, long, double, int, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Remove(a, b, c, d, e, f, g, h);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<int, double, long, short, double, long, double, int, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Remove(a, b, c, d, e, f, g, h);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
		}

		[TestCase(-2176, 0.896243094418311, 351, 5721, 0.222550892840396, false, true, 4097, 2634)]
		[TestCase(-369, 0.779105692999021, -1606, -3495, 0.114204641950412, true, false, 4269, 9396)]
		[TestCase(-7299, 0.671642348017377, 5031, 8763, 0.870205651908277, false, false, -5415, 5886)]
		[TestCase(1371, 0.740202547861358, -9872, 9299, 0.481809094772585, false, false, 0, 789)]
		[TestCase(2859, 0.840335439350612, -3990, -6036, 0.24288661277056, false, true, 2531, -6122)]
		[TestCase(-8106, 0.275508063507969, 4045, 2667, 0.100657680118763, false, false, 7780, 7674)]
		[TestCase(2677, 0.452963144729362, -9478, -6817, 0.683325271440356, true, false, 9718, 9292)]
		[TestCase(2508, 0.51648351993248, -4053, -8483, 0.893609552594651, true, false, 2423, 7462)]
		[TestCase(3388, 0.93685478993545, -1424, -4512, 0.977915998537986, false, false, -9835, 9073)]
		[TestCase(-8158, 0.935212839364639, 2790, 4547, 0.745981981393873, true, false, 5953, -9059)]
		public void ContainsKey(long a, double b, long c, short d, double e, bool f, bool g, int h, short val)
		{
			NKeyHash<long, double, long, short, double, bool, bool, int, short> nKeyHash = new NKeyHash<long, double, long, short, double, bool, bool, int, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Delete(a, b, c, d, e, f, g, h);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<long, double, long, short, double, bool, bool, int, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Delete(a, b, c, d, e, f, g, h);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<long, double, long, short, double, bool, bool, int, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Delete(a, b, c, d, e, f, g, h);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<long, double, long, short, double, bool, bool, int, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Delete(a, b, c, d, e, f, g, h);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
		}

		[TestCase(7930, -9622, false, -8238, -5935, -410, -1885, 992, true)]
		[TestCase(-899, -2809, false, 5647, 9888, 3502, -9206, -2980, false)]
		[TestCase(-3497, 7959, true, 4090, 2313, -8081, 1344, 8334, false)]
		[TestCase(4322, -2753, false, -6562, 5235, 2861, -7329, -4637, true)]
		[TestCase(1436, -9918, true, -6797, -3565, -6072, 2810, -9897, false)]
		[TestCase(1438, 4619, false, -363, -4649, -1915, -5876, -6250, false)]
		[TestCase(-3207, -6159, false, -4279, 416, -4270, -3157, 3790, false)]
		[TestCase(5409, -4336, true, 6638, 2978, 4527, 3716, -643, false)]
		[TestCase(-3624, -6698, true, 1482, -8718, 2212, 3154, 9904, false)]
		[TestCase(2957, -5313, false, 5549, 9313, 1486, -5874, 5877, false)]
		public void Clear(int a, int b, bool c, short d, long e, short f, int g, short h, bool val)
		{
			NKeyHash<int, int, bool, short, long, short, int, short, bool> nKeyHash = new NKeyHash<int, int, bool, short, long, short, int, short, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g), 0);

			nKeyHash = new NKeyHash<int, int, bool, short, long, short, int, short, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g), 0);

			nKeyHash = new NKeyHash<int, int, bool, short, long, short, int, short, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g), 0);

			nKeyHash = new NKeyHash<int, int, bool, short, long, short, int, short, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g), 0);
		}

		[TestCase(6808, 4798, -8357, 5260, 0.796003787683325, 5992, false, 0.88739455905156, -9550)]
		[TestCase(7209, 5308, -7440, 5849, 0.628281369632241, 510, false, 0.694229132353435, -895)]
		[TestCase(-8149, 9859, -3650, -9531, 0.625751334533911, 7100, true, 0.0996502126099776, -6359)]
		[TestCase(7274, 7462, -3058, 8882, 0.565102092719219, -6118, true, 0.817252265204327, -4893)]
		[TestCase(-7925, 7696, -1233, -4096, 0.72020178554589, -8432, true, 0.345707701680114, -9430)]
		[TestCase(8961, 5872, 3150, 9152, 0.344922382079494, -7524, false, 0.916547843681903, 7538)]
		[TestCase(-1910, 6341, -7714, -5458, 0.112762372061965, 3926, true, 0.193537406247825, -9714)]
		[TestCase(3506, 8326, -5992, 8677, 0.90379167203968, 6219, false, 0.996991716789543, 6186)]
		[TestCase(-9660, 5946, -4542, -5216, 0.471424390781403, -4398, true, 0.702135549253847, -3880)]
		[TestCase(489, 8120, 564, -5532, 0.76724539779464, 2970, false, 0.484278444426264, -9995)]
		public void Get(int a, short b, int c, int d, double e, long f, bool g, double h, long val)
		{
			NKeyHash<int, short, int, int, double, long, bool, double, long> nKeyHash = new NKeyHash<int, short, int, int, double, long, bool, double, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<int, short, int, int, double, long, bool, double, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<int, short, int, int, double, long, bool, double, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));

			nKeyHash = new NKeyHash<int, short, int, int, double, long, bool, double, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h));
		}

		[TestCase(true, 0.0142182088523257, 7796, 6929, 3748, -3041, false, 0.159978728815903, -7614)]
		[TestCase(true, 0.16530487600961, -3086, 6682, -1991, -1787, false, 0.0931740338416649, -4250)]
		[TestCase(false, 0.452002811921762, -7016, 1036, 2337, -1609, true, 0.129131891359171, -7592)]
		[TestCase(false, 0.274976279248938, -7602, 4922, -6497, 1896, true, 0.998553583863449, 3757)]
		[TestCase(false, 0.677979724797411, -5626, -6393, 8178, 2145, true, 0.712913045991637, -3620)]
		[TestCase(true, 0.306912284021691, -475, -2770, -2968, 1686, false, 0.578041935608742, -1507)]
		[TestCase(false, 0.276249704079819, -2052, -592, -9286, 1165, false, 0.277093053458768, 7699)]
		[TestCase(true, 0.857975607206102, 9803, 5016, 9668, -1962, true, 0.97429218654255, -1695)]
		[TestCase(false, 0.305736786362592, 860, 837, -9549, 8078, false, 0.156397149039617, 6443)]
		[TestCase(true, 0.675798962673079, 8467, 709, 139, 1940, false, 0.570484117870445, 4445)]
		public void TryGetValue(bool a, double b, long c, long d, long e, int f, bool g, double h, int val)
		{
			int fetch;
			bool b1;
			NKeyHash<bool, double, long, long, long, int, bool, double, int> nKeyHash = new NKeyHash<bool, double, long, long, long, int, bool, double, int>(UnderlyingHashType.Dictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<bool, double, long, long, long, int, bool, double, int>(UnderlyingHashType.ConcurrentDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<bool, double, long, long, long, int, bool, double, int>(UnderlyingHashType.SortedDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<bool, double, long, long, long, int, bool, double, int>(UnderlyingHashType.HashTable);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, e, f, g, h, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);
		}

		[TestCase(new int[] { -3424, 8071, -3530, -8512, 2774, -2454, -6616, -6591, -4553, 7630 }, new double[] { 0.738363880076615, 0.25378022028775, 0.493391110791541, 0.369832344059754, 0.879227378349391, 0.736085479490499, 0.583466447695841, 0.601294090785689, 0.96160199584514, 0.463888037700154 }, new long[] { -2979, -2135, 1612, -1740, 3590, -1357, -9427, 5456, -1830, -2939 }, new long[] { 8222, 6391, -149, -9018, 5435, -4944, -24, 1395, -9258, 922 }, new double[] { 0.36636014532594, 0.336544030037031, 0.324720960727297, 0.28866289057241, 0.832120237793829, 0.468523659495881, 0.797178092783866, 0.575883731514161, 0.763127819059011, 0.92425824698259 }, new long[] { -2614, -9387, 5212, -8677, 78, 8709, -3539, 8208, -2103, -5866 }, new long[] { -3025, -2073, 5238, 8384, 9407, 8374, 5224, -1112, 1960, 2528 }, new long[] { -5253, -9724, 1285, -1690, -8048, -9709, -8629, -4160, 1617, -5778 }, new double[] { 0.634962186047324, 0.452692379454473, 0.00971129257684168, 0.484200828002859, 0.983792932230883, 0.880553005673249, 0.0589285856387245, 0.426447209635026, 0.545103762552656, 0.836276903672273 })]
		[TestCase(new int[] { 8594, 1766, -6499, 6607, -6051, 9400, 1491, -1890, -3634, 8266 }, new double[] { 0.707257767071602, 0.352806569241363, 0.977854308661937, 0.136666873999251, 0.686954319796969, 0.3555362640673, 0.466332494032724, 0.345177042458755, 0.968539225854231, 0.48943824064426 }, new long[] { 7339, -9377, -3408, -6324, 1433, 7919, -2268, -4444, 8708, -8201 }, new long[] { 7196, -3303, 7984, 5234, 3933, 2979, 6773, 4676, -5637, -7449 }, new double[] { 0.439884442109561, 0.663042312796713, 0.973716761904637, 0.667522706402243, 0.503783655587483, 0.282155616805961, 0.474838070792536, 0.873044418577591, 0.79724650820589, 0.628256668163583 }, new long[] { -1715, 4274, -841, -8885, 9383, 7973, -4824, 9823, -4824, -3971 }, new long[] { 1669, -4062, -600, -5432, -8929, -2550, -929, -5677, -1200, -9239 }, new long[] { 336, 4649, -7457, 6820, -9008, -5919, -8852, 3240, 3598, -4209 }, new double[] { 0.421177077768919, 0.513542245381299, 0.48050355188572, 0.307223913402867, 0.675652753410699, 0.146092942052564, 0.876910699008457, 0.843602239081451, 0.792511873316258, 0.798018027002932 })]
		[TestCase(new int[] { -2195, 6949, -498, 8332, 879, -7138, -6137, 4906, 2280, -7372 }, new double[] { 0.828616808554445, 0.258736281310551, 0.433086499773472, 0.759262507203623, 0.111449498735112, 0.681729608998508, 0.586650395107758, 0.61683446151057, 0.00611172337369608, 0.765246700851827 }, new long[] { 6826, 1933, -3774, 9384, 7603, -8600, 6326, -6744, 1054, 8147 }, new long[] { -89, 2198, -1528, 2838, 2955, 3385, -4851, -5791, -4057, 8129 }, new double[] { 0.0109184975786686, 0.311990892659869, 0.0480353394746945, 0.5486210144817, 0.460887011355202, 0.162440796458368, 0.0804557456078267, 0.721241044682097, 0.195774414667755, 0.993923144412191 }, new long[] { 1188, -4797, 6749, -9453, 9132, 5869, 724, 116, -9269, -518 }, new long[] { -3465, -9392, -6146, 4131, 2716, -5625, 6702, 5822, -7769, -1156 }, new long[] { -1513, -2475, -3604, -8007, 5086, 587, 973, 5252, 167, 4355 }, new double[] { 0.989477533842194, 0.0950984852831338, 0.966968537292894, 0.558787456973822, 0.347967192692667, 0.235452147776006, 0.772446053462311, 0.396324743701296, 0.685268493222663, 0.854254612631283 })]
		[TestCase(new int[] { -7338, 5030, -6520, 6459, 1596, 9610, -7612, -3171, 8255, -5155 }, new double[] { 0.327294431313544, 0.289309137635543, 0.609747757487813, 0.753627093859775, 0.569598848265409, 0.183211543682596, 0.940325119504856, 0.737891230610149, 0.272936969191272, 0.427315662813986 }, new long[] { -5102, 5471, 9948, -3625, -308, -5367, -8731, 2676, -2826, -1992 }, new long[] { -1075, -1223, -7881, -4854, -3817, 3454, -5953, -65, 395, 5474 }, new double[] { 0.41000764882658, 0.207239779740218, 0.849832674418498, 0.266158398364744, 0.39048183261905, 0.700168396206651, 0.485350727795321, 0.21334144343312, 0.989188608708414, 0.164755649010071 }, new long[] { -4097, -9307, -7531, -4840, 2187, -2810, 5081, 7104, -3230, -3035 }, new long[] { 8343, -290, 9654, 248, 5918, 7768, -6330, -2949, -1109, 7936 }, new long[] { 9617, -1127, -5637, -16, -9652, -9246, 8474, 4625, 8563, 5687 }, new double[] { 0.746252617214924, 0.850022514746535, 0.644666740039674, 0.193887443371996, 0.105237009984086, 0.411679363069907, 0.315433846933504, 0.847925284340943, 0.647833835169596, 0.949644884536809 })]
		[TestCase(new int[] { 8372, -3059, -6833, -6567, 7129, 8489, -5510, -3251, -596, 40 }, new double[] { 0.516737373320729, 0.132841644870509, 0.768805966604876, 0.0923421518375828, 0.18382041257984, 0.851526582544449, 0.816452269356908, 0.62419300648579, 0.240644816421273, 0.571794845895746 }, new long[] { -1286, -9543, 8540, 1080, 2038, -8655, 6815, 5777, -1855, -2313 }, new long[] { 1460, -3289, 4093, -102, 9562, 2678, -4293, -9068, 2853, -8143 }, new double[] { 0.813152175775334, 0.586384412639953, 0.26112402708322, 0.426197576535026, 0.267673595933092, 0.613410972344415, 0.0812165481416586, 0.552324588202091, 0.0100670307921558, 0.253710427439637 }, new long[] { 1904, 3824, 2145, -8478, 279, 7916, -1600, 2084, 1392, 5785 }, new long[] { -8325, -1288, 8602, -8281, 8578, -6374, -1436, -4521, -7716, 997 }, new long[] { 1323, 5398, 9629, -7042, 5172, 6985, 5232, 17, -4272, 9769 }, new double[] { 0.985982981038272, 0.288501409948106, 0.778827487853741, 0.153493352771501, 0.78906612926585, 0.8817981224888, 0.728225270625309, 0.628636258481367, 0.98091614338612, 0.0823428356472137 })]
		[TestCase(new int[] { -5719, 3621, -462, 7066, -9816, -2447, 3123, -6494, -55, -8270 }, new double[] { 0.185244575229122, 0.807301173828217, 0.438180168829011, 0.460171811496919, 0.687506695598134, 0.825295963708915, 0.709722444745583, 0.459428754849093, 0.317396319153438, 0.664688425913774 }, new long[] { -7315, 8380, -3642, 1621, 6066, 5903, 3134, 5533, -4063, -9055 }, new long[] { -939, 5990, -4139, -9363, -3281, 7701, -4138, -7435, -7224, -2378 }, new double[] { 0.193089714363725, 0.586438362759742, 0.00363457156514496, 0.199920552410148, 0.803299098184006, 0.178681807210055, 0.850321241119095, 0.318655676356822, 0.465986657173367, 0.963770165556935 }, new long[] { -6557, -4623, -3774, -3675, 8962, -4101, -2735, 7915, -8998, -5721 }, new long[] { 4416, 7589, 7567, -998, 2668, -2285, 286, -1872, -7514, 6047 }, new long[] { 645, 1630, -3586, 8725, -567, 954, 8308, -7640, 5555, 2492 }, new double[] { 0.944866261419312, 0.338080134865865, 0.31070809406727, 0.333056294514358, 0.875096259580504, 0.184209848374226, 0.488290199305997, 0.976771513454975, 0.0836438443901222, 0.0410338794072316 })]
		[TestCase(new int[] { 438, -2055, -8436, 8495, 3203, -3727, 4160, 1071, 1329, -1648 }, new double[] { 0.66437986430916, 0.443942656015951, 0.194404269193487, 0.663602328236961, 0.431510960884165, 0.590517645976747, 0.948115283133516, 0.374897413595997, 0.844629005922298, 0.400411005784018 }, new long[] { -2411, -5094, -7638, -1492, -4618, -2344, 1375, 906, 1499, -1015 }, new long[] { 7947, 750, -3544, -8334, -4390, -7298, 68, -2082, -4476, -6839 }, new double[] { 0.839713348466769, 0.361874726303795, 0.551473464142286, 0.360199335198942, 0.960275975503156, 0.500923605403362, 0.143675865672378, 0.647105765830309, 0.901545333630194, 0.284578613603757 }, new long[] { -5277, -7731, -7356, 3664, 3231, -4466, -4415, 3055, 3115, -4450 }, new long[] { 4895, -6745, 9571, -7654, 403, -7462, -7575, -7775, -2337, -4070 }, new long[] { -8257, 1045, -8024, 3731, 1213, -9647, 3875, 5156, -698, 5362 }, new double[] { 0.239097064937976, 0.9216876974896, 0.643803349530233, 0.290380706214523, 0.213131183391964, 0.784031451579198, 0.405387921913242, 0.639501902106917, 0.421616454805069, 0.00378835573968867 })]
		[TestCase(new int[] { 7115, 7011, 4800, 9973, -1735, 3540, -2334, -1315, 6800, 6667 }, new double[] { 0.379715690100433, 0.0324891242349935, 0.263967793092117, 0.605068094378835, 0.197470922115012, 0.683829680869277, 0.014637169900647, 0.445524056183884, 0.122535181288857, 0.644042992798632 }, new long[] { 1657, 427, -6245, 7752, -9232, 6461, 377, 3764, 8081, 4722 }, new long[] { 4428, -365, 3791, -2412, -1187, -5269, 6243, -7998, -4531, 7672 }, new double[] { 0.634303026196688, 0.25955625216456, 0.917789033110155, 0.631657979745259, 0.388411131402669, 0.206607940702982, 0.657719904397484, 0.0387352551513981, 0.0929097840995108, 0.529301502522687 }, new long[] { 5387, 9196, 339, 5550, -1582, -3310, 3258, 7047, 9206, 1801 }, new long[] { -6836, 3899, 601, -7921, -7759, 7959, -3141, 7691, -6710, 9218 }, new long[] { 7431, 8291, -6556, -5222, -9804, -3532, 2071, 1120, -15, 6633 }, new double[] { 0.165387091769551, 0.4801460972429, 0.595329182034046, 0.374826520855923, 0.966734691041864, 0.76159764722064, 0.96473929237795, 0.911996824625878, 0.958466751481624, 0.106176463470876 })]
		[TestCase(new int[] { 1471, 9194, -7206, 3665, 4509, 8784, 4588, 6276, 393, -191 }, new double[] { 0.863689103100304, 0.773101728303871, 0.874308882222655, 0.131924180375377, 0.657666714236916, 0.854798727135546, 0.7877423999774, 0.278100550304214, 0.767833495404494, 0.0975336274586309 }, new long[] { 4617, -7861, -2936, -7426, -1505, 3559, -8005, -6894, -7255, -2992 }, new long[] { 8664, -1381, 8522, -8834, -2251, 8236, 5498, -223, 266, -8590 }, new double[] { 0.593879219886791, 0.789702131780657, 0.0363521292043627, 0.00884099957013549, 0.968033688593672, 0.39228536346568, 0.605837215020245, 0.463405001658669, 0.717159806619007, 0.111935963906318 }, new long[] { 9476, 3732, -7116, 7217, -2493, -666, 2131, -9779, -4828, -9048 }, new long[] { 6791, 1484, 3533, -6612, 1142, -1344, 6938, 6320, 4889, 4915 }, new long[] { -8401, -4021, 5294, 3947, 73, 8822, -8588, -3113, -6786, -9350 }, new double[] { 0.0721639818847943, 0.636281904129443, 0.438099906518171, 0.0252392832307328, 0.376512133226037, 0.246631642452735, 0.286758683755416, 0.0652183005889963, 0.682957477254308, 0.920727821961384 })]
		[TestCase(new int[] { -3894, 5278, -5394, -683, -5382, -9605, -7739, 7339, -965, 705 }, new double[] { 0.545335059773799, 0.789778242255458, 0.718900418709452, 0.971349394401232, 0.0320744440108884, 0.674940587335704, 0.9218826456563, 0.446782862044304, 0.357278716451153, 0.434110532716899 }, new long[] { -2076, -4754, 7006, -5476, 9506, -5933, -7277, 3028, 5855, -3789 }, new long[] { -7079, 5634, -7337, 6474, -1188, -3681, -8625, -4020, -669, -320 }, new double[] { 0.828183615500193, 0.203495544010538, 0.892623023079998, 0.625360189296939, 0.487101349740802, 0.282385739629336, 0.917381485419991, 0.466750512116938, 0.993164839219844, 0.701571545890333 }, new long[] { -3504, 6798, 4158, -5022, 491, -9139, 8270, -9916, -190, -9448 }, new long[] { 7670, -769, -8514, -7175, -2214, 5271, 3133, 7901, 615, 4322 }, new long[] { 2125, 2458, 9604, 7465, 2118, -6145, -2606, -5499, 4780, 3859 }, new double[] { 0.285936643036984, 0.669359886399172, 0.658299725343613, 0.0912418924696939, 0.985750430722605, 0.306032584656976, 0.0737924189650418, 0.884254550973072, 0.299218612862387, 0.397578457555537 })]
		public void Count(int[] a, double[] b, long[] c, long[] d, double[] e, long[] f, long[] g, long[] h, double[] val)
		{
			NKeyHash<int, double, long, long, double, long, long, long, double> nKeyHash = new NKeyHash<int, double, long, long, double, long, long, long, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0]), 9);

			nKeyHash = new NKeyHash<int, double, long, long, double, long, long, long, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0]), 9);

			nKeyHash = new NKeyHash<int, double, long, long, double, long, long, long, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0]), 9);

			nKeyHash = new NKeyHash<int, double, long, long, double, long, long, long, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0]), 9);
		}

		[TestCase(new int[] { 4469, 2513, -9553, 8718, -4459, -8093, 4035, 7193, 6692, 2858 }, new bool[] { false, true, true, false, true, true, false, true, true, false }, new double[] { 0.0832256074451029, 0.689810637705871, 0.772422195771906, 0.595905044859231, 0.133212292628927, 0.31379832993904, 0.541743086437575, 0.814485717478434, 0.541262786156155, 0.272866247348891 }, new int[] { -5213, -8731, 2364, 9777, -9688, -8653, -4725, 4667, -2374, 9918 }, new long[] { -4320, -1073, -5216, -5172, 9345, 4484, 4275, 5988, -9779, 3947 }, new short[] { -2275, 1268, -7073, 1918, -6941, -9325, 7065, -1472, 6054, 9263 }, new bool[] { true, true, false, true, false, false, false, true, false, true }, new long[] { -441, -383, -1560, 9739, 7429, 2737, -986, 621, 2571, -1820 }, new short[] { 1999, 4845, 6069, 6876, 7731, 3516, 8340, -9553, 6719, 9636 })]
		[TestCase(new int[] { -5719, 6745, 8612, -1638, -1151, -2067, -7442, 3546, 6753, 3976 }, new bool[] { true, false, true, false, false, true, false, false, true, true }, new double[] { 0.583023076217167, 0.322199124992918, 0.797782332542251, 0.393782005828704, 0.363212490157789, 0.811256235843178, 0.0837952462415189, 0.474589239095612, 0.675142212153944, 0.727781887039441 }, new int[] { -2971, -9342, 7271, -4645, 325, 2811, 1002, -9921, 892, -502 }, new long[] { 181, 5465, 3867, 8593, 4795, 1716, -6151, 455, 2487, 9623 }, new short[] { 687, 5155, -4042, -3598, -2023, 7834, -9208, 737, -8901, 2622 }, new bool[] { false, true, false, false, false, true, false, false, true, true }, new long[] { -2894, -7247, 2293, -5007, -9860, 6193, 2575, 7360, 3079, 5546 }, new short[] { 2377, 1220, 7003, 3878, -6131, 1872, 4698, 870, 7376, 2489 })]
		[TestCase(new int[] { 2020, -9733, 8979, 8268, -6758, 7115, 5420, 1669, 1645, -7929 }, new bool[] { false, true, true, false, true, false, false, false, false, true }, new double[] { 0.262972912873595, 0.171489536376432, 0.882902868968855, 0.277501567396103, 0.0122809265797403, 0.751832803595733, 0.803069464770644, 0.308289581122012, 0.916519808078427, 0.753807143659241 }, new int[] { 8026, 2139, -1733, -7199, 9555, -3159, -6227, 4023, -8248, -6977 }, new long[] { -9226, -9092, -4284, 1009, -3158, 4173, 6053, 6093, -8638, 5931 }, new short[] { -989, 3733, -5391, -4404, -2769, -1408, -7391, 3429, 8022, -1795 }, new bool[] { false, false, true, true, false, true, false, true, false, false }, new long[] { -5835, -1161, 9213, -6758, 1008, -5646, 7713, -3351, 8708, -3927 }, new short[] { 8981, 9966, -5193, -7600, -3933, -5706, -2467, -7328, 5569, 965 })]
		[TestCase(new int[] { -5766, 341, 5999, 3546, -8031, 1517, -2432, -854, -3032, 274 }, new bool[] { false, false, true, true, true, false, true, false, true, false }, new double[] { 0.54382707343615, 0.797962252422218, 0.736047750681661, 0.597583509328581, 0.461060037585469, 0.0543387118048681, 0.222505821018715, 0.547039770310297, 0.525196447281724, 0.987450627604244 }, new int[] { -965, -2733, 6796, 388, -8553, 3822, 2837, -4332, -8725, 9490 }, new long[] { 6785, -1430, 9679, -1564, -8163, 5294, -4771, -876, 630, -4106 }, new short[] { -226, -3834, -1915, 2692, -9910, -1726, 5619, -5950, -5673, -9118 }, new bool[] { false, true, true, false, false, true, false, false, true, true }, new long[] { -2664, -1147, -9905, 5094, -3908, -7692, 6278, -3713, 115, 3925 }, new short[] { 5858, 5325, -9689, -5389, -24, -7130, 9180, -5895, 299, 3171 })]
		[TestCase(new int[] { 8201, -1211, -8657, -9606, 2424, -9839, -72, 2461, -2803, -5133 }, new bool[] { false, false, true, true, true, false, false, true, false, true }, new double[] { 0.599737711064395, 0.466736695480876, 0.696646067638251, 0.519990400653328, 0.251090134145268, 0.58703727581866, 0.815819670826113, 0.701550961798779, 0.862146147462607, 0.918519516903218 }, new int[] { 7787, -7212, 4052, -8934, 9741, 8545, -2488, 9699, -7329, -4068 }, new long[] { 2379, -6182, 9088, -4749, -4477, 4982, -9559, -2376, -3947, -944 }, new short[] { 6795, -3807, 7502, 2517, -8821, -1132, 4855, 941, 5370, -9315 }, new bool[] { false, true, true, false, false, false, false, true, true, false }, new long[] { 3408, -3627, 319, -9328, -4597, -1821, 244, -1317, -5121, 38 }, new short[] { 1301, -1306, -2020, -1812, -8425, 1595, -4715, -8464, 9885, 874 })]
		[TestCase(new int[] { -6308, 6569, -5669, -8012, -7911, 6481, -1401, 264, 8172, 9902 }, new bool[] { false, false, true, false, true, true, true, true, false, true }, new double[] { 0.931143966005716, 0.308646406656432, 0.303169643181921, 0.266613209278608, 0.469106420161718, 0.757529896571082, 0.395885191110841, 0.351562821935659, 0.362581001763503, 0.774075116391329 }, new int[] { -9664, -4711, 3935, -7929, 6320, 6837, -7957, -1666, 8582, -1079 }, new long[] { 9578, 9979, 509, -5025, -8121, -5313, 4013, -8059, 2541, 1148 }, new short[] { 5722, -1548, 4419, -3112, 2251, 7517, 506, 8996, 2603, -3062 }, new bool[] { false, false, false, false, true, false, true, true, false, true }, new long[] { -1616, -2460, 8248, 8194, 3419, 8641, 5662, -8909, -6545, -5303 }, new short[] { -8862, -4021, 4489, 6101, 9757, 1882, 867, -2950, -181, 8801 })]
		[TestCase(new int[] { -3667, -6955, 5728, 1645, -9643, 8012, 6966, -2181, -4595, 9004 }, new bool[] { true, false, true, true, false, false, true, true, true, true }, new double[] { 0.0927460240632044, 0.470875158193929, 0.777176353511017, 0.395394981557222, 0.289999005054123, 0.129318676949161, 0.353837275576702, 0.345510559783089, 0.146659767323481, 0.384321195718051 }, new int[] { 2004, -4368, -7208, 915, 2475, -4660, 1810, -3396, 7838, 5405 }, new long[] { -8324, -2154, 5684, -5550, 2689, 9731, 3757, -9242, 3336, 1574 }, new short[] { -8317, 4642, 3580, 6208, 6947, 6913, -2499, -2178, -4153, 7768 }, new bool[] { true, true, false, true, false, false, true, false, false, true }, new long[] { 6372, -6400, 8384, 8060, 1934, 4009, 3732, 1094, 5217, -3932 }, new short[] { -1171, -3679, 3573, 1358, -3994, 7360, 2049, -3417, 3967, 5561 })]
		[TestCase(new int[] { 7837, -6009, -9242, -9928, -5529, 1617, -7039, 7965, 7446, -3684 }, new bool[] { false, true, true, true, true, true, true, true, false, false }, new double[] { 0.159082301966419, 0.820275963666046, 0.630165185607115, 0.98894213884554, 0.447016465220142, 0.230804932411204, 0.824193385813475, 0.676313896512759, 0.585642012574543, 0.481998083406127 }, new int[] { 4325, 2030, -2662, -4303, 9587, 2383, -7157, 8314, 3591, -9682 }, new long[] { 1050, 5765, 3647, -1097, -5051, 6375, -3178, 7662, 6157, -2076 }, new short[] { -8895, 6529, -7692, 1030, 2379, -8565, 1386, -9020, 1129, 9852 }, new bool[] { true, false, false, false, true, false, false, true, true, false }, new long[] { 5240, 7941, -8071, -6041, 1887, -2583, -7241, -6298, 4830, 2564 }, new short[] { 7793, 8819, 7367, -6209, -1463, 7794, -276, 6306, 3315, 8153 })]
		[TestCase(new int[] { -9001, -8135, -2814, 3737, -4816, -8382, -488, -4159, 6912, 5858 }, new bool[] { true, true, false, true, true, false, true, true, true, false }, new double[] { 0.933760498619527, 0.384291233208166, 0.307351261986117, 0.928284306511415, 0.102966048337038, 0.815665675707006, 0.603249797878438, 0.123196329047529, 0.963561618217994, 0.709698769594402 }, new int[] { 9363, -1190, -9512, 8166, -8179, 3376, 756, -1809, 8773, 270 }, new long[] { 7903, 6917, -3212, 8971, -8694, -5223, 7477, -5971, 1107, -4624 }, new short[] { -6806, 1374, 7163, -1648, 9478, 3311, 5716, -1380, 1678, -1129 }, new bool[] { false, false, false, false, true, false, true, false, true, true }, new long[] { 2404, -3587, 9573, -1127, -2939, -8241, -9100, -2824, 7260, 7282 }, new short[] { 8834, -1962, 1355, 3896, 1000, -2009, 1645, 2134, 8686, -1491 })]
		[TestCase(new int[] { 7659, -7861, 6511, -95, -9280, 855, 349, -5932, -7521, 8852 }, new bool[] { true, true, true, true, true, true, true, false, false, true }, new double[] { 0.620633627111387, 0.427077274968418, 0.567905519887761, 0.71973743509489, 0.501759951236546, 0.0757397902550827, 0.784592749450632, 0.633616368115701, 0.585939645108739, 0.425232979201355 }, new int[] { 805, -9602, -5512, -6986, -8354, 266, -100, -329, -1845, 6203 }, new long[] { 1407, 6831, -5301, 8407, -4959, -5468, 5530, 9552, -9073, 4219 }, new short[] { 6189, -6645, 843, -9033, 6094, -881, 779, -7881, 9868, 9202 }, new bool[] { true, true, true, true, false, true, false, false, true, false }, new long[] { -3117, -7869, -9862, -4912, -3685, 5580, -6155, 2949, -644, -4495 }, new short[] { -4015, 6137, 1746, 7498, 2314, -2548, -446, -6477, -3082, 2526 })]
		public void Any(int[] a, bool[] b, double[] c, int[] d, long[] e, short[] f, bool[] g, long[] h, short[] val)
		{
			NKeyHash<int, bool, double, int, long, short, bool, long, short> nKeyHash = new NKeyHash<int, bool, double, int, long, short, bool, long, short>(UnderlyingHashType.Dictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<int, bool, double, int, long, short, bool, long, short>(UnderlyingHashType.ConcurrentDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<int, bool, double, int, long, short, bool, long, short>(UnderlyingHashType.SortedDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<int, bool, double, int, long, short, bool, long, short>(UnderlyingHashType.HashTable);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());
		}

		[TestCase(new double[] { 0.659650128641934, 0.735717825468498, 0.301843070099989, 0.46981058151918, 0.911132839001311, 0.366879384204223, 0.703005579627587, 0.160863304119959, 0.287824005022563, 0.732546265112491 }, new int[] { -9484, -4724, 7828, 2762, 4364, 3218, 9024, -4068, 4848, -8341 }, new int[] { -9401, -7705, -3704, -7423, 7630, -6783, 9098, 2328, 1185, -5952 }, new int[] { 2583, 1097, 3118, -7408, 6161, 789, 9946, -3257, 3523, 161 }, new short[] { 8253, -5765, -6202, -1129, -3596, -2748, -8340, 5019, 5435, 5731 }, new long[] { -7984, -2199, -365, -932, -237, 899, -1580, -6538, 1764, 5006 }, new short[] { -1761, -8267, 2031, -8289, -7931, -582, 2155, 5238, 6599, -6423 }, new long[] { 3271, 2283, 2406, -5312, -6596, 6362, 8495, 7423, 6172, 379 }, new long[] { -8441, -5919, 6892, 5453, -7967, -5216, -8536, -5947, 2827, -4737 })]
		[TestCase(new double[] { 0.118523892536072, 0.824331040878003, 0.748843891894838, 0.925838637131191, 0.0961926533357206, 0.826161323965602, 0.610116588701548, 0.10435823216306, 0.340158356512039, 0.849294649366892 }, new int[] { 5094, -3579, 8418, 1860, -7539, -269, 5392, -5052, -4335, 3398 }, new int[] { 2403, 994, -2712, -8613, 3448, -5841, -5160, 6576, 9676, 7283 }, new int[] { -2045, -1895, -7588, 1338, -8794, 6784, 7306, 3889, -7235, -3119 }, new short[] { -5838, 6408, 621, 9186, 5283, 5137, -4338, -4967, 2993, 2301 }, new long[] { -610, 6515, 8386, 9428, 2858, 1375, -800, 3591, -4932, 7765 }, new short[] { 1684, 5624, -7589, -481, -968, -3009, -5990, -2918, 655, -4324 }, new long[] { 2423, -8496, -7815, 8783, -762, 5993, -9625, -1899, -3898, 8310 }, new long[] { 8496, 9805, -6415, -2623, -2105, 1438, -282, -7018, 8478, -170 })]
		[TestCase(new double[] { 0.379309606449357, 0.185775916644268, 0.441144595593747, 0.249877141439299, 0.759775702264055, 0.426818158210636, 0.69998643859289, 0.0551314242440888, 0.507779382871361, 0.41469639745294 }, new int[] { 1128, 8578, 4376, -2680, 9876, -2112, 4331, 9602, 191, 6863 }, new int[] { 1002, -8900, -2509, -3243, 9267, 1877, 2041, 5032, -8375, 7592 }, new int[] { 7272, -8971, -1398, -9172, 8087, -1291, 2679, 7185, -6410, -9297 }, new short[] { -8004, 9269, 7943, 7806, -2816, 9916, -4569, 6263, -2500, -9991 }, new long[] { 7106, 113, 2788, -8384, 8826, -3512, 6224, -7932, -4270, -6681 }, new short[] { 6494, 8965, 9477, 2562, 1020, 100, -22, 3550, -769, 1169 }, new long[] { 5206, 7144, 6014, -509, 4869, 1731, -6845, -316, 9571, 9349 }, new long[] { -3551, 5776, -2465, -8383, -9512, -2839, -1761, -3012, -8000, 1600 })]
		[TestCase(new double[] { 0.62416058621563, 0.530650569373113, 0.572859646087913, 0.0135435294422989, 0.210305415657491, 0.151389341871901, 0.989606326906759, 0.269111874638643, 0.339328746003718, 0.854120905443151 }, new int[] { -59, 1879, -2965, 6329, -5198, 9960, 4097, -6700, -3254, -2903 }, new int[] { -6665, -3457, -7505, -3621, 6868, -9280, 1432, 7862, 2076, -6138 }, new int[] { -8137, -7008, 1551, 7628, 8685, -5405, -4311, 5743, -4714, 1841 }, new short[] { 1938, 7770, -7102, -7508, -589, 4568, -1257, 1204, 6814, -9473 }, new long[] { 3061, -5059, -9757, 4902, -1732, -4058, -1880, -4920, -6598, -6511 }, new short[] { 1594, -8069, 3305, -7073, 5220, -3050, -9671, -595, 7642, -9791 }, new long[] { 4272, 8353, 8013, 4902, 5156, -4437, -6354, -9995, 6967, -7698 }, new long[] { 1975, -9770, -8950, 1551, 798, 6920, -7249, 6647, -638, 2744 })]
		[TestCase(new double[] { 0.823744971688718, 0.030484993024955, 0.617146543980179, 0.0898380438284194, 0.0123580955026476, 0.500493253814286, 0.223282648820096, 0.998538354411041, 0.363491773774611, 0.123075712995173 }, new int[] { 4240, 9336, 3560, 6606, -3747, 4707, -3073, -4660, 9745, -7293 }, new int[] { -7702, -1884, -1889, -8898, 1511, 1366, -9117, -8244, 2126, 8298 }, new int[] { -5799, -6319, -9956, -5100, -6266, 3662, -3988, 6216, 4655, -4852 }, new short[] { -8902, -6325, 2733, 4506, -1939, 2637, -3331, -5558, -4700, 6090 }, new long[] { -4, 7409, 6901, -3343, 447, -1640, 2498, 1242, 284, -1119 }, new short[] { -871, -7288, -2156, -1029, 8261, 560, 9293, -1338, 2874, 2588 }, new long[] { -1303, 708, 682, 4598, -8390, 8621, 5380, 3603, 3039, 8873 }, new long[] { -5301, 6439, 6455, 6035, -1696, -3210, -3221, 3386, 4450, 5372 })]
		[TestCase(new double[] { 0.0582036953690479, 0.738434166060031, 0.296633226935115, 0.288746107038458, 0.80090981992004, 0.919277033731005, 0.791522200587914, 0.188150985254045, 0.812234046315883, 0.874968527292352 }, new int[] { 3342, 8006, 1565, 2709, -2604, 9285, -3272, -7696, -4952, 1825 }, new int[] { 2977, 8894, 8201, 1410, -5816, 2688, -3744, 1807, -9331, 1472 }, new int[] { -6216, -4091, 4209, 7501, 1424, 3927, -5223, -5091, 8580, -6775 }, new short[] { -7207, 1618, 7358, 5540, -4468, -3308, -5124, -6253, -1359, -982 }, new long[] { -9937, -5524, -1660, -7373, -7604, -7730, 6565, 4521, -8406, -6669 }, new short[] { 2130, -5976, -6903, -5227, 3716, -2565, -6202, 4063, -8714, 3467 }, new long[] { 4509, -8179, -6278, -8175, -966, -8639, -8463, -7337, -4120, 7490 }, new long[] { -2186, -7490, -6831, 1650, 1410, 9306, 7568, 1583, 5107, -844 })]
		[TestCase(new double[] { 0.868061931276723, 0.512690430280143, 0.165792257136569, 0.762567649019215, 0.554644620769957, 0.938483538543099, 0.42613024191285, 0.629372205412654, 0.091222424102585, 0.904843356881683 }, new int[] { -7104, 810, -7537, 5172, 4506, 8241, -9245, -3484, 3592, -8964 }, new int[] { -9265, 3904, -1356, -5898, 5515, -378, -9144, 1445, 3360, 4408 }, new int[] { -134, 2213, 8955, 2128, 6105, -5742, 8502, -1529, 730, 263 }, new short[] { 2836, -1051, -9162, -2217, 4596, 7001, -9951, -2005, 7142, 3168 }, new long[] { 8552, 1053, 7989, 4072, -1577, -6543, -8388, 9214, 9734, -8528 }, new short[] { 7913, 7076, 9225, -2584, -1768, 680, 1854, 332, 9065, 249 }, new long[] { 9737, 2283, 5783, -6669, -1802, 1785, 3067, -9137, -496, 8512 }, new long[] { -425, 2860, 4301, -9807, 5854, 8810, 4222, -5116, -6292, 2649 })]
		[TestCase(new double[] { 0.132315300000978, 0.964431938233055, 0.436737066338182, 0.462993908423462, 0.61743864864923, 0.788008095132191, 0.486075323301403, 0.671066718954158, 0.977521425102615, 0.195800311023276 }, new int[] { -4851, -284, -1072, -3105, 3430, -3730, 5269, 4660, -4124, 6636 }, new int[] { 388, -9250, -288, -8777, 1896, -4945, -7224, 9033, 1560, -579 }, new int[] { 6457, -3028, -3373, -3582, -2396, -9549, -6449, -3475, 980, 2437 }, new short[] { -7935, 9645, -8688, -4411, 3365, 9858, -6066, -2591, -3238, -414 }, new long[] { -6457, 9560, 9007, -2929, -7737, -8101, -422, -2486, 7362, -2705 }, new short[] { 2984, 686, -8138, 130, -2542, 8175, -6910, -7488, 9289, 2980 }, new long[] { -7279, -1254, -6319, 3436, 4572, 741, 9436, -5875, -2143, 2037 }, new long[] { -8878, 5366, 2273, -8024, -4120, 6895, -2036, 9555, -5844, -4293 })]
		[TestCase(new double[] { 0.543618835761966, 0.801817260124636, 0.458067778245577, 0.184308749709422, 0.9726212737023, 0.568863200754329, 0.889284803946169, 0.55904797909737, 0.906503696882401, 0.759488649554313 }, new int[] { 6769, -8577, -1881, 3779, -3133, 4795, 5881, -4428, 2496, 1519 }, new int[] { -7539, -4545, 9656, -4674, -3825, 7617, 8412, 9885, -5748, 561 }, new int[] { 213, -6466, 8354, 3583, -7890, -3315, 9583, 9992, 3984, -6803 }, new short[] { 2955, -1742, -4006, 2665, 5267, 9698, -2751, 8492, 5108, 1082 }, new long[] { -8984, -7607, -2940, 2635, -6752, -4581, 6378, -6163, 7511, -8165 }, new short[] { 2963, 7898, -3069, -2430, -5022, 3236, -6932, 4533, 1671, -9816 }, new long[] { 5211, 5887, 1586, -698, 8562, 4202, 9459, -3008, 57, -3525 }, new long[] { 369, 9918, -5222, 3167, -453, -2178, 6473, -4279, 337, 6689 })]
		[TestCase(new double[] { 0.515227037256224, 0.787399318901542, 0.12406357476677, 0.607543170269366, 0.511569191939928, 0.752833270818383, 0.0663530682522585, 0.921227010395949, 0.384472008042257, 0.101555212448144 }, new int[] { 6631, 2714, -3177, 4926, 5870, -4872, 804, 7756, 4071, -956 }, new int[] { -4041, -611, 3778, 1037, 1463, 3044, 3121, 3761, 8021, 7154 }, new int[] { 6762, 7345, -5802, 4981, -122, 9462, 3406, 9434, 9069, -6492 }, new short[] { 2875, -8963, 9300, -1973, -157, 7654, 3097, -149, 7296, -5579 }, new long[] { 7015, 8715, 1647, -8705, 731, -9082, -8029, 1443, -9312, 7186 }, new short[] { -8064, -2434, -9596, 534, -4731, 9285, -1482, 1839, -4950, 6406 }, new long[] { 1719, 1369, 8686, 565, 6167, -5077, 86, -4247, -8803, 3807 }, new long[] { 9945, -6727, 6463, 3602, -9860, 8045, -4301, -7096, -5749, -1038 })]
		public void Forloop(double[] a, int[] b, int[] c, int[] d, short[] e, long[] f, short[] g, long[] h, long[] val)
		{
			bool[] found = new bool[9];
			bool allFound = false;
			NKeyHash<double, int, int, int, short, long, short, long, long> nKeyHash = new NKeyHash<double, int, int, int, short, long, short, long, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, int, int, int, short, long, short, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, int, int, int, short, long, short, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<double, int, int, int, short, long, short, long, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, int, int, int, short, long, short, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, int, int, int, short, long, short, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<double, int, int, int, short, long, short, long, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, int, int, int, short, long, short, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, int, int, int, short, long, short, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<double, int, int, int, short, long, short, long, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, int, int, int, short, long, short, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, int, int, int, short, long, short, long, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);
		}

		[TestCase(0.456903664607975, false, 0.24005719285461, false, true, -4352, false, -8916, false, -4189)]
		[TestCase(0.541507185223283, true, 0.512368534930222, false, true, 8661, true, -3200, true, -2777)]
		[TestCase(0.679379686563918, false, 0.379521718891115, true, true, -243, true, 6803, false, 857)]
		[TestCase(0.214422398812334, false, 0.149727182066872, true, false, 8687, true, 5573, false, 4490)]
		[TestCase(0.900883937674055, false, 0.88885371661226, true, true, -8721, true, 1870, false, -7089)]
		[TestCase(0.710448553185188, true, 0.918569797146399, true, true, -6475, true, -1287, false, -7056)]
		[TestCase(0.651343172719396, false, 0.604499627186218, true, false, -488, true, 9606, false, 8551)]
		[TestCase(0.00960904965624635, true, 0.294834564577245, true, false, -1028, false, -849, true, 7633)]
		[TestCase(0.902026571753447, false, 0.608094571907117, false, true, 454, false, -2541, true, -8852)]
		[TestCase(0.251058960450375, false, 0.679833360332918, true, false, 4792, true, -6490, true, -1380)]
		public void Add(double a, bool b, double c, bool d, bool e, short f, bool g, int h, bool i, int val)
		{
			NKeyHash<double, bool, double, bool, bool, short, bool, int, bool, int> nKeyHash = new NKeyHash<double, bool, double, bool, bool, short, bool, int, bool, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<double, bool, double, bool, bool, short, bool, int, bool, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<double, bool, double, bool, bool, short, bool, int, bool, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<double, bool, double, bool, bool, short, bool, int, bool, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i));
		}

		[TestCase(5685, -5482, 755, -5656, false, 0.613836688741034, 1062, false, 7618, 1066, -3436)]
		[TestCase(-4235, -4063, -8937, 3530, true, 0.0965176453332033, -2062, true, 4410, 6445, -5670)]
		[TestCase(2231, -662, -420, -4067, true, 0.3035601038968, -6633, true, -7482, -9518, -8872)]
		[TestCase(-4324, -4538, -9494, 9001, false, 0.652845056565872, -812, false, -3480, -4110, -4148)]
		[TestCase(-7942, -7707, -3826, -1399, true, 0.614149961440894, 6750, false, -1973, 1920, 1550)]
		[TestCase(1357, 2284, -8581, 4763, true, 0.0594334365145459, -5008, false, 9651, -1449, -3917)]
		[TestCase(-5362, -9738, 5600, 3026, true, 0.633829921779144, 4879, false, 679, -72, 8438)]
		[TestCase(-3619, -2718, -2712, 9757, false, 0.675562217214872, 1082, false, -7483, 2454, -793)]
		[TestCase(4124, 4103, -1780, 7583, true, 0.704304063089333, -2000, true, -6121, -3763, 7300)]
		[TestCase(5973, 7654, -4087, 2999, true, 0.0425433893886131, -5924, false, -7225, -8757, -8376)]
		public void Upsert(int a, long b, int c, short d, bool e, double f, short g, bool h, short i, short val, short newVal1)
		{
			NKeyHash<int, long, int, short, bool, double, short, bool, short, short> nKeyHash = new NKeyHash<int, long, int, short, bool, double, short, bool, short, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<int, long, int, short, bool, double, short, bool, short, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<int, long, int, short, bool, double, short, bool, short, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<int, long, int, short, bool, double, short, bool, short, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i));
		}

		[TestCase(3627, 5430, -3863, -8502, 0.240363972839138, 0.692380182767464, 8185, -9204, 0.862696315563608, 1939)]
		[TestCase(-3950, 2202, -920, 1307, 0.481599305514991, 0.6923327663412, -512, 3977, 0.511592747416158, 7139)]
		[TestCase(7395, -318, -2034, 2501, 0.0592759363629278, 0.115722056066488, -6551, -2986, 0.743711612999305, -702)]
		[TestCase(-2739, 2319, -2200, 1266, 0.117314052357019, 0.111212198208651, 9775, 1502, 0.736310212750132, -2996)]
		[TestCase(-4111, -5673, -4480, -698, 0.778675977968926, 0.035763882117236, 6824, -7170, 0.892239798275866, -4634)]
		[TestCase(-786, 7501, -8672, -8701, 0.431914026584436, 0.197317924908045, -2533, 3633, 0.015579330276502, -7506)]
		[TestCase(399, 1173, -4079, -2043, 0.233988996238443, 0.686504314973254, -5595, 7811, 0.448050605807477, -2591)]
		[TestCase(4069, 7983, 9250, -6770, 0.562594035436676, 0.653490040289932, -5837, 8662, 0.846416839792587, -9528)]
		[TestCase(-4510, -9380, -831, -490, 0.00419656885983263, 0.487894210725973, 992, -3498, 0.131430497919875, 8399)]
		[TestCase(4757, -3856, 1191, 2233, 0.830182673796165, 0.735732420690233, 8405, 7562, 0.231077854163515, -8155)]
		public void Delete(long a, short b, long c, short d, double e, double f, int g, int h, double i, short val)
		{
			NKeyHash<long, short, long, short, double, double, int, int, double, short> nKeyHash = new NKeyHash<long, short, long, short, double, double, int, int, double, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<long, short, long, short, double, double, int, int, double, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<long, short, long, short, double, double, int, int, double, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<long, short, long, short, double, double, int, int, double, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
		}

		[TestCase(0.989226616914024, 0.440128659568787, 6704, 9840, 7003, -219, 0.100266540004065, 0.820542125879108, -2127, 4921)]
		[TestCase(0.136860174190654, 0.895108747247191, 5183, 561, 2649, -2072, 0.339663582080819, 0.350909522897987, -3374, 6536)]
		[TestCase(0.733176824978169, 0.329928367552314, 4041, 5084, -5840, -3524, 0.337526093394275, 0.936562202841305, 8213, -1145)]
		[TestCase(0.575364795781376, 0.644747436346834, 6455, -2939, 8614, -4043, 0.471860523555363, 0.567497728656744, 5228, -3176)]
		[TestCase(0.635465880686168, 0.0997710894326545, -309, -300, 9105, 8408, 0.191478365190084, 0.165356997011861, 7786, -6631)]
		[TestCase(0.221795822597014, 0.56161989204661, 1472, 3507, -9094, 3185, 0.73803260863667, 0.0810310752508375, 5682, 528)]
		[TestCase(0.15151687066607, 0.163704337162759, 8196, 9016, -6584, -157, 0.0723090754227289, 0.406178083925591, 1945, -3305)]
		[TestCase(0.924505599739265, 0.772165853424075, 1788, 9801, -6171, 2667, 0.845380613508346, 0.217112982281071, 5978, -4250)]
		[TestCase(0.132302675923474, 0.172169096382414, -9055, 4845, -5580, -9724, 0.0710975989099115, 0.147383314626004, -3844, -4570)]
		[TestCase(0.559748365338775, 0.390829448304525, 5666, -5298, -6206, -564, 0.189924107952939, 0.53366973182823, -3714, -735)]
		public void Remove(double a, double b, long c, int d, int e, int f, double g, double h, int i, long val)
		{
			NKeyHash<double, double, long, int, int, int, double, double, int, long> nKeyHash = new NKeyHash<double, double, long, int, int, int, double, double, int, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<double, double, long, int, int, int, double, double, int, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<double, double, long, int, int, int, double, double, int, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<double, double, long, int, int, int, double, double, int, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
		}

		[TestCase(0.813917635853364, 418, -4357, -66, -2117, 9585, 0.116517351528871, -6648, 4598, -6859)]
		[TestCase(0.421015138933908, 8497, -8030, -3483, 5498, 673, 0.988800837653131, -2911, 6009, 4392)]
		[TestCase(0.443481627592576, -3765, 8056, -3284, -1213, -3059, 0.604097067194105, -149, -31, 5425)]
		[TestCase(0.0415641535267067, -248, 3266, 7917, -848, -9222, 0.108732061045585, -4265, 6818, -5793)]
		[TestCase(0.355244191994539, -9551, 6074, -6853, -9155, 8463, 0.686881547647939, -5154, 5594, 4203)]
		[TestCase(0.460829131519808, 2355, 5660, 5287, 9366, 44, 0.618059722994482, 8926, -8851, -9056)]
		[TestCase(0.375250707089552, 2479, 3382, 9171, -7690, 8668, 0.261563069308904, -5949, 7364, 4721)]
		[TestCase(0.424944090389155, 4041, 268, 1804, -2711, -1577, 0.507977830482636, 4911, -4128, 321)]
		[TestCase(0.660120847011041, -2762, 4255, 5763, -3789, -1524, 0.704496556755387, 7978, 8550, 9106)]
		[TestCase(0.420769015988693, -6751, -5412, 5875, 6699, 4624, 0.353258531705131, 6901, -9162, -7824)]
		public void ContainsKey(double a, long b, int c, int d, short e, int f, double g, int h, int i, int val)
		{
			NKeyHash<double, long, int, int, short, int, double, int, int, int> nKeyHash = new NKeyHash<double, long, int, int, short, int, double, int, int, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<double, long, int, int, short, int, double, int, int, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<double, long, int, int, short, int, double, int, int, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<double, long, int, int, short, int, double, int, int, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
		}

		[TestCase(9883, 7448, 3055, true, -2259, -9730, true, true, 2962, 3832)]
		[TestCase(-5420, -2747, -4500, true, -3692, -4748, false, true, 5103, 2662)]
		[TestCase(-8642, 3257, 4074, false, 7087, -6484, true, true, 58, 1035)]
		[TestCase(-3611, 232, -20, false, 9221, 965, true, true, -1863, 6431)]
		[TestCase(6399, -553, -6060, false, 7594, -4017, false, false, 4564, -9545)]
		[TestCase(-4280, -2305, -1246, true, -411, -3372, false, false, 3737, -5774)]
		[TestCase(-9487, -5158, -2440, false, -2555, 4345, true, true, 9035, 5340)]
		[TestCase(5059, 5693, -3743, true, 6262, 1909, false, false, -3898, 1106)]
		[TestCase(9325, 535, 8817, false, -4683, 8692, false, true, 8016, 2594)]
		[TestCase(-2408, -9167, -9975, false, 5920, 1558, false, false, 9558, -6750)]
		public void Clear(long a, int b, short c, bool d, short e, long f, bool g, bool h, short i, int val)
		{
			NKeyHash<long, int, short, bool, short, long, bool, bool, short, int> nKeyHash = new NKeyHash<long, int, short, bool, short, long, bool, bool, short, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h), 0);

			nKeyHash = new NKeyHash<long, int, short, bool, short, long, bool, bool, short, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h), 0);

			nKeyHash = new NKeyHash<long, int, short, bool, short, long, bool, bool, short, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h), 0);

			nKeyHash = new NKeyHash<long, int, short, bool, short, long, bool, bool, short, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h), 0);
		}

		[TestCase(7308, 6302, -6741, 0.131569717606329, -5100, -23, false, 7953, 0.830592497638703, 0.437541370949494)]
		[TestCase(2866, -7369, 9874, 0.322036151458526, -2250, 4228, true, -7655, 0.137531564169345, 0.235212369000172)]
		[TestCase(22, -2693, -2488, 0.142624691660807, -7602, 3029, false, 9592, 0.210581003786335, 0.764550120925787)]
		[TestCase(7254, 1397, 5568, 0.016957281630932, 5285, 1287, true, 7391, 0.950636906992009, 0.297224949718092)]
		[TestCase(-4463, -6066, -4599, 0.540422147857222, 382, -3919, false, -6254, 0.573740696801683, 0.55823364600457)]
		[TestCase(4353, 9094, -2668, 0.718477995935119, -2343, 2, false, -9593, 0.0117293829152963, 0.593440462180153)]
		[TestCase(-372, -3570, 3742, 0.0660423767129157, 1495, -8530, false, 9535, 0.557730464524464, 0.823065972804588)]
		[TestCase(6654, 8278, -6668, 0.840306614451253, 9167, -3910, false, 6702, 0.623514158475918, 0.815831997346055)]
		[TestCase(-3390, 6603, -1880, 0.652347357781766, -9061, 8159, false, -8799, 0.634150943548489, 0.264180241275663)]
		[TestCase(-7502, 7166, 7156, 0.357196444811857, 6316, 9105, true, -5920, 0.965623350797977, 0.445669076147335)]
		public void Get(int a, short b, int c, double d, short e, int f, bool g, int h, double i, double val)
		{
			NKeyHash<int, short, int, double, short, int, bool, int, double, double> nKeyHash = new NKeyHash<int, short, int, double, short, int, bool, int, double, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<int, short, int, double, short, int, bool, int, double, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<int, short, int, double, short, int, bool, int, double, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));

			nKeyHash = new NKeyHash<int, short, int, double, short, int, bool, int, double, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i));
		}

		[TestCase(0.404782402517638, 2088, -2064, -6081, -4740, 0.651138195139886, 8309, -9303, -9615, true)]
		[TestCase(0.870110082379594, -4138, -3146, -4128, 3964, 0.974410383484517, -8877, 6186, -9510, false)]
		[TestCase(0.794911831056192, 7827, 7390, -6442, 7296, 0.986256461584129, -5985, 3105, 8537, false)]
		[TestCase(0.119799963254388, 3541, -4001, 1115, 7187, 0.520394753441398, -768, 3238, -8114, false)]
		[TestCase(0.0398026546648716, -504, -6304, -4023, 1511, 0.657936678574391, -9967, -3280, -8950, true)]
		[TestCase(0.747627431874921, 9575, 36, 5138, -4330, 0.513381918200004, 4697, -5620, -3378, false)]
		[TestCase(0.450449260161467, -4794, -7841, 5520, 940, 0.193032241516296, 9861, 5736, -1316, false)]
		[TestCase(0.512816509936385, -2117, 4302, 7193, 9265, 0.320157955549731, 4132, 1414, 2045, false)]
		[TestCase(0.984690084580653, 7293, 2056, -6482, -89, 0.140971703054836, -6494, 859, -4552, false)]
		[TestCase(0.785512324322719, -5146, -3381, 6349, 4285, 0.779569499557637, -2662, -1825, 5035, false)]
		public void TryGetValue(double a, short b, long c, long d, long e, double f, long g, int h, long i, bool val)
		{
			bool fetch;
			bool b1;
			NKeyHash<double, short, long, long, long, double, long, int, long, bool> nKeyHash = new NKeyHash<double, short, long, long, long, double, long, int, long, bool>(UnderlyingHashType.Dictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(bool));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<double, short, long, long, long, double, long, int, long, bool>(UnderlyingHashType.ConcurrentDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(bool));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<double, short, long, long, long, double, long, int, long, bool>(UnderlyingHashType.SortedDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(bool));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<double, short, long, long, long, double, long, int, long, bool>(UnderlyingHashType.HashTable);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(bool));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);
		}

		[TestCase(new long[] { 6134, -6716, 2332, -7516, -4159, 1714, 3147, 8639, -4388, -1879 }, new short[] { -9643, -997, 290, -8236, -2152, -4596, -8734, 7951, -7091, -6324 }, new double[] { 0.953293138627565, 0.297929175802474, 0.818916077175604, 0.219759336309395, 0.542097268412866, 0.769986288980575, 0.962895461340852, 0.728278806306552, 0.937624879152339, 0.142012572913436 }, new double[] { 0.8772717788244, 0.53313014262036, 0.749386553535884, 0.309060160214575, 0.539274136786942, 0.621354569504668, 0.626017852512197, 0.206767197328977, 0.525514755642747, 0.12855395773824 }, new short[] { -7555, -1303, -7435, -3084, -2704, -5705, 4003, 6273, -355, 9360 }, new int[] { -4194, -2677, -65, 2197, -9799, 176, -3094, -2062, 1640, 440 }, new int[] { 2456, 8581, 9887, -7228, 575, -307, 4014, -5890, 977, 5419 }, new long[] { 2882, 7128, -2558, -9661, -8767, 369, -6604, -537, 7099, -3451 }, new double[] { 0.0697972341765637, 0.149211380700214, 0.24604662193267, 0.969552211914934, 0.851742016082509, 0.511170415445776, 0.0364122940396947, 0.139521486190856, 0.299065618449387, 0.030461528818338 }, new double[] { 0.276112891862221, 0.229132222584045, 0.62471930013258, 0.00348602514876333, 0.505716164831871, 0.193086068701505, 0.440414054058685, 0.989635520609857, 0.817008991640531, 0.880104920305361 })]
		[TestCase(new long[] { 278, -105, -4703, 4224, -3520, -1323, 9879, -402, 966, -169 }, new short[] { -3218, 7441, 837, -4906, -955, -527, 3660, -9501, -4263, -9647 }, new double[] { 0.448233550623168, 0.561220347211333, 0.906388962132106, 0.518400798327476, 0.494873584478569, 0.4150036160904, 0.23173575859132, 0.368597780060301, 0.511138140461938, 0.86847171879768 }, new double[] { 0.0780520886546243, 0.18012670203118, 0.656134180564496, 0.974903651035812, 0.813474871131347, 0.575062759954046, 0.884389627205389, 0.534800913899579, 0.645615383351974, 0.417926517975482 }, new short[] { 343, 1130, 1824, 6150, 3827, -1919, 3744, -2598, 1024, -9357 }, new int[] { 200, -1688, 4056, 5987, -1362, 9053, 1766, 4927, -5671, 8177 }, new int[] { -5957, 2508, 9373, 3596, -1730, -6820, -5680, 1339, -1176, 7542 }, new long[] { 1784, -7034, -2414, 7376, 8, 7832, 9399, -8022, 6539, -8181 }, new double[] { 0.727748452093335, 0.861649202584126, 0.817343251228958, 0.479048387836222, 0.358441340438296, 0.662498764536576, 0.477280597890392, 0.856718686808235, 0.543032281353619, 0.860754936403015 }, new double[] { 0.986717247863634, 0.137968672038041, 0.318428790345056, 0.736682170879413, 0.215846778459776, 0.891733079166959, 0.58782334792792, 0.911378645296851, 0.394060909000254, 0.532487460194383 })]
		[TestCase(new long[] { -6238, -7593, 8577, 3481, -1142, -2764, -9272, 6678, -4020, 803 }, new short[] { 9653, -210, 8387, -7488, -6375, -3191, 6160, -206, -3571, 5019 }, new double[] { 0.681643085405996, 0.359245638064689, 0.0239411261975491, 0.580402936591023, 0.89045148849974, 0.451268112962725, 0.829825986097486, 0.642563175709249, 0.653016120033812, 0.608707561441095 }, new double[] { 0.303861451942409, 0.0586274955694692, 0.704790833734344, 0.294502194642323, 0.90280913650189, 0.607466695647438, 0.932720519570969, 0.143257458760989, 0.036195420211272, 0.996665738521454 }, new short[] { 2523, 2865, 1154, -9942, 7560, -55, -5628, -6141, 1109, 7507 }, new int[] { -8326, -8036, 1799, 2861, 7016, 6575, -8072, -3029, 5672, 9830 }, new int[] { 638, -2124, -6380, 3804, -5272, 8480, 5693, 2498, -5545, 1474 }, new long[] { -1845, 3296, -930, -3505, -7503, -9232, 6029, -9577, 4046, -2135 }, new double[] { 0.232730741255326, 0.636910121253184, 0.087065765209061, 0.777599878505617, 0.525051009154437, 0.205715119003186, 0.468643070882486, 0.0617074705947691, 0.443657819853936, 0.0740047130147017 }, new double[] { 0.511126065399091, 0.584194773148836, 0.359623154792759, 0.044610565549047, 0.464716122702098, 0.232445985187053, 0.462330306629804, 0.867476541952918, 0.766520593672302, 0.95395484424846 })]
		[TestCase(new long[] { 4249, 1871, 9403, 9634, -645, -1623, 2893, -4694, 365, 6249 }, new short[] { -9453, -8494, 2922, -2191, 5176, 7899, -3866, -1932, -6695, -9386 }, new double[] { 0.455443227410057, 0.722995465026701, 0.181271285834383, 0.148699075984163, 0.0625919993326962, 0.823515244211776, 0.305195913326552, 0.408871029228378, 0.860012359386316, 0.892340773666436 }, new double[] { 0.576015386532999, 0.934025262451742, 0.254574820983491, 0.74840694980156, 0.680707467105569, 0.639122475236246, 0.666698045407747, 0.10528641944066, 0.309893654338035, 0.106213524987089 }, new short[] { 1220, -5931, 868, 2622, -9065, -1282, 8759, 9383, -4284, 1393 }, new int[] { 8514, -8819, 4044, 4717, -29, 9789, -1753, 6429, 8382, 2883 }, new int[] { -7726, -5283, -1894, 2518, -5269, -8133, 6412, 7954, 4193, -7604 }, new long[] { -5432, -5971, -8129, -8819, -608, -4958, -6407, 1002, -7959, 2533 }, new double[] { 0.885484423435053, 0.335979052510103, 0.12311457708623, 0.29033573125039, 0.966573825090459, 0.517052287010966, 0.231765003051499, 0.518664226177458, 0.249895332963157, 0.691182389245919 }, new double[] { 0.226785495051549, 0.845185045546473, 0.186099073004955, 0.665702674382228, 0.992571954146294, 0.325256671907965, 0.798143545071661, 0.917455035689033, 0.394675843135768, 0.953424737301387 })]
		[TestCase(new long[] { 2303, -9193, -4809, -6678, -3172, 4487, 9308, 2864, -4672, -5070 }, new short[] { 6198, 7243, 4389, -4150, 5173, 5552, -7745, -7701, 3187, 4388 }, new double[] { 0.861512353579287, 0.302006168431605, 0.647861669607396, 0.0185164376248216, 0.892946143119105, 0.383156403611953, 0.0152935441654611, 0.427770878387508, 0.0664308034192914, 0.144302946116916 }, new double[] { 0.45391255405448, 0.262129563028984, 0.155436304470262, 0.148572244750602, 0.0115006943286865, 0.845210605228883, 0.0764610185643942, 0.957089763114736, 0.94900055227289, 0.242199493684899 }, new short[] { 1031, 1769, -4953, -9930, 7624, -2708, -7485, 7871, 8139, -5701 }, new int[] { -5747, 3664, -4838, 3504, -8160, -3735, -2151, -5179, -4537, 9162 }, new int[] { 4181, 754, 1536, -7558, 5850, 956, 4135, 1418, -4380, 8269 }, new long[] { 4023, -6887, -6681, -1656, -6641, -4539, -9005, 2888, -7253, 567 }, new double[] { 0.257487375874765, 0.121670668070051, 0.520774760526034, 0.85152136760369, 0.931725406056142, 0.770676860944683, 0.0040565328691418, 0.480191469416111, 0.0566598610285017, 0.698296407562819 }, new double[] { 0.45279845663011, 0.835459422243507, 0.684011092262348, 0.990821776907342, 0.533118706444799, 0.0138440718938802, 0.0116808028014753, 0.130265218732071, 0.210896851593115, 0.333430993991639 })]
		[TestCase(new long[] { 3155, 1094, 2252, 9869, 274, -8859, 346, 6817, 147, 6377 }, new short[] { -4729, 4959, -7924, 4893, 4013, 1748, -9660, 4505, -6192, -9561 }, new double[] { 0.543754383243506, 0.226597058692294, 0.514283912030181, 0.58267909501804, 0.46069749466176, 0.865742077522791, 0.471578276470107, 0.175085522781632, 0.884063805399492, 0.154024195929069 }, new double[] { 0.26132404956097, 0.919427700303228, 0.433525002763385, 0.803843533528896, 0.870613346281747, 0.70276212119626, 0.5090232945555, 0.527274593956431, 0.337813431554387, 0.874737234727823 }, new short[] { -4932, -6736, 9455, -5244, -1304, 4095, 4634, 8785, -4196, 8913 }, new int[] { 9937, -4272, 8797, -6218, 5792, -1376, -9190, -9399, 655, 2959 }, new int[] { 1708, -3154, 9135, -2932, 1151, -3118, -3710, -4001, 7480, 9957 }, new long[] { -8431, -206, -2249, -3687, 5369, -2387, -4923, -4468, -7041, 5117 }, new double[] { 0.134009724079636, 0.532260374413924, 0.884955145365072, 0.938355218124741, 0.157124031873943, 0.974948577571171, 0.979485106179251, 0.244494253883368, 0.0141669227807629, 0.439438270609564 }, new double[] { 0.662320778547936, 0.479055016058988, 0.994471922048587, 0.689847573027875, 0.289327339869611, 0.911105596884669, 0.206339301637532, 0.619462530882779, 0.68016884787016, 0.0907013724049094 })]
		[TestCase(new long[] { -2192, -1362, -8694, -4155, 7345, 144, 7976, 2486, -1589, -1818 }, new short[] { -6451, 5277, 7640, 5537, 279, -8936, -854, -9629, -6074, 1652 }, new double[] { 0.364598561248089, 0.0699710375955193, 0.285716612490693, 0.434641573314854, 0.335608499746587, 0.59933180855556, 0.495197391833736, 0.697644326229414, 0.0262580500106598, 0.857412038304569 }, new double[] { 0.174249067052383, 0.634319625624604, 0.596362734491174, 0.0571926827808808, 0.365546461364974, 0.702160905907937, 0.46702231628216, 0.592754046243035, 0.0710334554645389, 0.649893181701141 }, new short[] { -8477, -2897, 6478, 2101, -4758, 7967, 1939, -5648, -6481, -5275 }, new int[] { -923, -6242, -1535, -8048, 4521, -3592, -7076, 2611, 9130, -4639 }, new int[] { -9758, -5974, 1961, 1261, -5302, 861, -6648, 6496, -1772, 6235 }, new long[] { 1722, 7289, 8947, 926, 131, -9809, -5079, 3612, -6547, -1255 }, new double[] { 0.0023510158072929, 0.277638809419069, 0.521752887648415, 0.790080230585337, 0.40359416669402, 0.986381260206169, 0.211085434170014, 0.498828790848529, 0.331089871624061, 0.0451746280515448 }, new double[] { 0.556028700226931, 0.836425831465249, 0.636161446867586, 0.803043501359897, 0.637859723362075, 0.874825758335565, 0.757028747702497, 0.260880064806379, 0.370239505716711, 0.718972057904569 })]
		[TestCase(new long[] { 4616, 5441, 6123, -2717, 3000, 1785, -5190, 7537, 1819, 4332 }, new short[] { -8511, -690, -839, 387, -4686, 4687, 3589, 6159, -6809, -5030 }, new double[] { 0.331987859370181, 0.668718234947286, 0.49379166890578, 0.366192250217401, 0.255766528312008, 0.749701372696879, 0.228372232163498, 0.144394537966882, 0.908475434364972, 0.631744141053289 }, new double[] { 0.252441911610049, 0.985109832596551, 0.310398426051437, 0.45362416396552, 0.70633348902051, 0.230251763588866, 0.471447105273347, 0.157656677606356, 0.140029615322142, 0.814309974114555 }, new short[] { 4918, -3315, 8156, 2288, 9414, -8188, -2431, -7663, 748, 8068 }, new int[] { -6092, 8979, -7971, -7563, -2260, -8756, -4433, -1199, -7832, 8006 }, new int[] { -2781, -8078, 9367, 9183, -716, -8213, -6897, -9911, 6260, -9291 }, new long[] { -4740, 436, 3359, -3095, 50, 9955, 5216, 7585, -2091, -6694 }, new double[] { 0.371275804178452, 0.111605903185721, 0.606989974904335, 0.00501035992289444, 0.436404741572405, 0.303432087555263, 0.883736676482361, 0.188616835134391, 0.0666399654311314, 0.644187731502665 }, new double[] { 0.951944180276219, 0.0314476513450256, 0.0493269958763043, 0.239680372755826, 0.453398013698588, 0.64991626313418, 0.3657628010799, 0.948644843394237, 0.150267479545561, 0.881520588827096 })]
		[TestCase(new long[] { 8707, -2518, -3925, 40, 2810, 3469, -4379, 5123, 2385, -2216 }, new short[] { -3973, -2020, -9107, 8861, 581, -5013, -219, 9267, 456, -6784 }, new double[] { 0.205535426831588, 0.966479012727029, 0.937736133550171, 0.168873897366633, 0.0834429944322645, 0.231499892301625, 0.47250268537202, 0.428308935569743, 0.891798920879047, 0.852590158978752 }, new double[] { 0.63203865784781, 0.81220864495831, 0.729066469580432, 0.513878969249259, 0.229793523545281, 0.997226334641327, 0.80790120307724, 0.104972586550271, 0.364492829127467, 0.762895023339845 }, new short[] { -9550, -7448, 1386, 3548, -3141, 1059, 9735, -7874, 4211, -5917 }, new int[] { -6781, -1952, -1483, 9789, 3519, 9378, -1273, -7302, -1628, -1819 }, new int[] { -5979, 7053, 7286, 5333, 5142, -218, 3397, 614, 4265, 636 }, new long[] { -1171, -2318, 1978, 5197, -7232, -8439, -2057, -4793, 6518, 609 }, new double[] { 0.244652136808565, 0.366273269227833, 0.717702001201781, 0.687706964410705, 0.691719150492791, 0.229689096207586, 0.38637896319217, 0.739557142713832, 0.837893807253751, 0.260833957819656 }, new double[] { 0.560912998654373, 0.673070400335393, 0.686398192628472, 0.955475190633663, 0.561887990479305, 0.169699991666572, 0.263183154288299, 0.802656656504914, 0.920313144065586, 0.853811838130379 })]
		[TestCase(new long[] { 7660, -877, -2141, -6424, 5253, 5535, 6067, 3317, 7022, 1960 }, new short[] { 1436, -6478, -3822, 7761, -6712, 6694, -7299, -6465, -8499, 549 }, new double[] { 0.102704661014818, 0.93035002189239, 0.692827119348956, 0.45247009836718, 0.970934105092163, 0.768334453817613, 0.697674475469475, 0.643445219678546, 0.198032147808947, 0.968646589186344 }, new double[] { 0.814791817597482, 0.594480689891838, 0.339965763660132, 0.972166596898887, 0.647409066859358, 0.788525307918212, 0.973347909270482, 0.538942170580356, 0.925019862095369, 0.914920810104777 }, new short[] { -1474, 4408, 7767, -5201, 3779, -2302, -2715, 5965, 5821, 4542 }, new int[] { -9305, -8268, 4553, -2142, 5021, 9053, 5265, 8808, -5842, 9886 }, new int[] { -8416, -6799, -642, 7649, 5663, 9545, 6720, -3265, -5185, -2482 }, new long[] { 7226, 1921, -4966, -6798, -7975, -2355, -9159, -941, 5268, 1720 }, new double[] { 0.404116421194801, 0.899378228420102, 0.852335530730121, 0.470877920962348, 0.933956176477464, 0.728278999555986, 0.866789892719495, 0.947107605145829, 0.221059419783326, 0.694695707268406 }, new double[] { 0.025225598376815, 0.0328926476803108, 0.331116445051095, 0.930667213597646, 0.835796945186237, 0.266276013230102, 0.252592024045341, 0.00587823987280868, 0.456665244631779, 0.71167020905375 })]
		public void Count(long[] a, short[] b, double[] c, double[] d, short[] e, int[] f, int[] g, long[] h, double[] i, double[] val)
		{
			NKeyHash<long, short, double, double, short, int, int, long, double, double> nKeyHash = new NKeyHash<long, short, double, double, short, int, int, long, double, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0]), 9);

			nKeyHash = new NKeyHash<long, short, double, double, short, int, int, long, double, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0]), 9);

			nKeyHash = new NKeyHash<long, short, double, double, short, int, int, long, double, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0]), 9);

			nKeyHash = new NKeyHash<long, short, double, double, short, int, int, long, double, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0]), 9);
		}

		[TestCase(new int[] { 8214, -3792, -6459, 2435, 1804, -6404, -3846, 9938, 8970, -8900 }, new bool[] { false, true, false, true, false, true, false, false, false, true }, new int[] { -7406, -9277, 9924, -8963, -9254, -2468, -3164, -1258, 2101, -93 }, new int[] { 7867, -4016, 3108, 7043, 5678, 4296, 7117, 4186, -3191, 3120 }, new double[] { 0.958627612310754, 0.255592549338747, 0.0573182595229327, 0.40172587167552, 0.601118572336211, 0.659848846336756, 0.911905910778747, 0.0116061968782946, 0.064654899791188, 0.0372751658024616 }, new int[] { -6525, 277, -5131, -865, -5214, 7492, -3718, -7495, 1690, -5726 }, new double[] { 0.837970776407966, 0.870582365370627, 0.391889926228621, 0.453226808203956, 0.161522717290336, 0.811407491942592, 0.233516572152039, 0.263438867062069, 0.762059198581641, 0.635745204349861 }, new int[] { 9451, 1111, 9610, 3363, 7525, 7480, 9574, 1890, -986, -2451 }, new short[] { -706, -3396, -2551, 1356, -3566, -2409, -8884, -6025, 2258, 8184 }, new short[] { -1983, 4613, -7502, -7463, 6360, -8238, 7273, 2081, -5195, 5793 })]
		[TestCase(new int[] { -1473, 2969, -5008, -1421, -8705, 2361, 666, 1503, 1608, -2696 }, new bool[] { true, true, true, false, true, true, false, true, false, true }, new int[] { 5112, -9302, 3009, 7055, -5300, -5161, -1384, 7074, 7001, 5764 }, new int[] { -9792, -2506, -2912, 3218, 9020, 6323, -8386, 8869, 63, 4071 }, new double[] { 0.846210763252438, 0.480545652322725, 0.618247721632127, 0.247780714765089, 0.0133364005076403, 0.681265877411359, 0.0561478226707074, 0.917693912944614, 0.377805099067187, 0.310278419084045 }, new int[] { 1797, -9206, -549, -835, -9318, -2169, 9958, -2064, -6120, 6454 }, new double[] { 0.187284315092156, 0.679553453195632, 0.725084585475309, 0.792206507079399, 0.35483000583706, 0.521253548805254, 0.365176332353231, 0.0135806743118822, 0.256063270967483, 0.932762614420039 }, new int[] { -1456, 1093, -3581, -1440, 8714, -4497, -1668, -1945, 6788, 1073 }, new short[] { -6284, 261, -480, 796, -6031, 9413, 8042, 7921, 2537, 1190 }, new short[] { 6363, 3677, 4990, 3607, 326, -6666, 5108, 6520, 7858, -158 })]
		[TestCase(new int[] { -3677, -9147, 3232, -1099, 7661, -9294, 4374, -9108, 448, 5178 }, new bool[] { true, true, true, true, true, true, false, false, true, false }, new int[] { 2381, -619, -2266, 3929, -7708, 4865, 6101, 2809, 8232, 5381 }, new int[] { 393, 1810, 194, -3052, -5247, -7135, 7028, -9380, 3134, -6735 }, new double[] { 0.251952751656972, 0.857588003788883, 0.373687594371702, 0.867973658194753, 0.584600764133316, 0.22293670765261, 0.126595992188247, 0.109277461240663, 0.0433848416634765, 0.842114272919537 }, new int[] { 9260, 1404, -5355, 176, 7458, 6940, 3117, 9301, -3389, -7203 }, new double[] { 0.230079946680963, 0.0782387857689703, 0.132891502758903, 0.753326556064806, 0.239280478674583, 0.384420406252342, 0.0855388772140904, 0.209897926640649, 0.402669706103704, 0.493809101867401 }, new int[] { 6454, -6546, 570, -1386, -7355, 5229, -8092, 373, -7760, 7831 }, new short[] { 2333, 3916, 1942, -8608, 6120, 8987, -2833, -9980, -511, -2188 }, new short[] { -253, 7726, 4008, 338, 8660, -6525, 4493, 2406, 2573, -5995 })]
		[TestCase(new int[] { -7251, 8333, 4131, 991, -9611, 5807, -9164, 6030, -2466, -7770 }, new bool[] { true, false, true, false, true, true, false, false, true, false }, new int[] { -9477, -8306, 4709, -9756, -9868, 8727, -555, -9767, -48, 9168 }, new int[] { -9262, -500, 7799, 8233, 5083, 3999, 9783, -9048, -8995, -9686 }, new double[] { 0.907732489475856, 0.556779955773046, 0.62428163021071, 0.362963561137656, 0.638866986911216, 0.350104336324196, 0.033140998349125, 0.26151914999891, 0.993860560000809, 0.398854849580142 }, new int[] { 3851, 3226, 3461, -3222, -6517, -8943, -6375, 3889, 861, -8339 }, new double[] { 0.318174904360517, 0.0301466980158103, 0.303961967725289, 0.418183056366715, 0.0746204145600183, 0.27669044131259, 0.247190847642343, 0.941467943574054, 0.684698675612313, 0.823075400117354 }, new int[] { 899, -1328, -9735, 8632, -2357, -613, -793, -2549, -2534, 3127 }, new short[] { 8064, -5785, -9645, -8024, -4682, -2490, 6037, 1022, 4752, 4027 }, new short[] { 375, -4104, 89, 9342, 3948, 7550, -4943, -5877, -4232, -2756 })]
		[TestCase(new int[] { -7940, -8165, 1536, -6583, 7076, -4818, 2963, 4828, 9133, 4094 }, new bool[] { true, true, false, true, false, false, false, false, false, true }, new int[] { -504, 3920, -5923, 9664, -3914, -4994, 8580, -9079, -5315, 90 }, new int[] { -5669, -4914, -8315, -9777, 1069, 6230, 2677, 6937, -5102, -9862 }, new double[] { 0.727293690539568, 0.060486926725361, 0.594408175719161, 0.0328931445409046, 0.108962125195638, 0.710110878436878, 0.973503968666077, 0.617818500668657, 0.787456755427391, 0.590001094895416 }, new int[] { 7302, -9047, -8923, 1783, 7747, -1862, 7756, 1870, 7329, 2072 }, new double[] { 0.329950656429842, 0.602194690891632, 0.507238145222533, 0.452222353523701, 0.488258180901528, 0.338224061922275, 0.724507912865145, 0.310170873678369, 0.333172430905128, 0.368150371298264 }, new int[] { -528, -6688, 9206, -7089, 9436, -1714, -7966, -6580, 7485, 1883 }, new short[] { -4464, -3774, -4828, 2883, 2787, -6620, -5990, -100, -7525, -7066 }, new short[] { 8473, -9191, 9607, 2824, 3537, -7497, 1064, -7155, 892, 5414 })]
		[TestCase(new int[] { 9711, 3266, -4306, -1613, -7670, 3991, -8255, 8164, 2346, -537 }, new bool[] { false, true, true, false, false, false, false, true, true, false }, new int[] { -7243, -5408, -6269, -6268, -1111, -1335, -6296, -3617, -627, 6934 }, new int[] { 7220, 9187, 2525, -7927, 2171, 2267, -9466, 6783, 554, 8794 }, new double[] { 0.0817183661655143, 0.292167870929543, 0.877639285231772, 0.650552461692389, 0.841369713582736, 0.206784369985938, 0.321137561612361, 0.708063369015261, 0.31437812946475, 0.658192086805679 }, new int[] { 5628, 3803, -3412, -5493, 2659, 5121, -463, -8037, 9496, 3664 }, new double[] { 0.514482761507147, 0.768077530324495, 0.439670849796231, 0.770590357841267, 0.612078968720547, 0.345801460717712, 0.0906506982122784, 0.615640313185584, 0.663780354272472, 0.713460965879942 }, new int[] { 9840, 88, -3293, 7460, -5247, 6911, -2961, 718, -3095, -5246 }, new short[] { -7757, -458, -9904, 6207, -8692, -6582, 2601, -1980, -587, 7048 }, new short[] { -7267, 8569, 7286, 6889, -1494, -3726, 7049, -7858, -9229, -88 })]
		[TestCase(new int[] { -7676, 4109, -9113, 2018, 3322, -4459, -2901, -874, 9752, 5746 }, new bool[] { false, true, true, true, true, false, true, true, true, false }, new int[] { 4313, 3792, -7098, 6225, 1537, -8728, 2801, -184, -1044, 8478 }, new int[] { 9861, -5102, -50, 6991, -7569, -1868, -1344, -1923, -7113, 5766 }, new double[] { 0.815934072628587, 0.173815483308311, 0.413305316312846, 0.683248056882642, 0.448291159443693, 0.195696478800707, 0.175628895021802, 0.127111990063969, 0.273323141631355, 0.387871305173203 }, new int[] { 1006, -5534, -1964, 1944, 5596, -1470, 1209, -5339, -9518, 2051 }, new double[] { 0.636891592590554, 0.864107220836034, 0.00851025432744541, 0.0637053503020226, 0.794259408393064, 0.159356752950399, 0.443406268695093, 0.903282187834048, 0.615722171317657, 0.164616566228036 }, new int[] { 2092, -2809, -300, 8337, 2505, 837, -4472, -764, -2739, -2376 }, new short[] { 7757, 259, -5649, -8801, -2526, 5396, 6860, 8004, -8604, 3900 }, new short[] { 6921, -6003, -2403, 834, -6970, 9035, -6693, -3007, 7778, -4220 })]
		[TestCase(new int[] { 5045, -4552, 227, -7825, 5664, -6183, 4765, -303, 9437, -5239 }, new bool[] { false, false, true, true, true, false, true, true, true, false }, new int[] { -3673, 863, 6669, 8412, -3629, -1902, 9593, 8863, 5309, 3469 }, new int[] { -2468, 8534, 1455, -8517, 2577, 2310, -9967, -7823, -4466, -6342 }, new double[] { 0.0315588330996962, 0.358217461667125, 0.928323073744924, 0.831778688277946, 0.544928692534998, 0.747404035528844, 0.329809751515188, 0.736947734717721, 0.827024001081951, 0.0275337351614301 }, new int[] { -3895, -5665, 3190, 7290, 9451, -5816, -1223, 1813, 5803, -2432 }, new double[] { 0.211112582688738, 0.795053583008728, 0.719339587129345, 0.298440150589887, 0.861392992018439, 0.223353751107749, 0.525900208636141, 0.795911487096879, 0.0139530547959511, 0.0991226379289863 }, new int[] { -7553, 757, 3438, 143, 9855, 9160, 2296, -9964, -2484, 1422 }, new short[] { -8498, -5144, -7674, 4758, -2633, -6801, -4655, 4163, -7970, -1604 }, new short[] { -6464, -1782, -3628, 7965, 9433, -5269, 2777, 2597, 9406, -3568 })]
		[TestCase(new int[] { -5569, 677, 4459, 4557, 8103, 5345, 895, -6951, 7434, -9707 }, new bool[] { true, false, false, false, false, true, true, true, true, true }, new int[] { 9122, 6353, 3889, 1883, 8446, 4227, -5613, 5472, 708, 5126 }, new int[] { -3615, 9698, -9371, -8915, -3007, 822, 395, -2233, 6654, 2019 }, new double[] { 0.615129948414457, 0.114829070453918, 0.836462774703495, 0.0868826476330322, 0.825475809548737, 0.739670408768426, 0.195932676641239, 0.0995132723355262, 0.594955892579144, 0.00337930908584004 }, new int[] { 1153, 3149, 3994, -4621, -2691, -1923, 6787, -7423, 6109, -6123 }, new double[] { 0.548031170642018, 0.771112942495902, 0.616918398820291, 0.115403221973871, 0.695348800483788, 0.609335713837918, 0.405707576966708, 0.160777634550248, 0.869453193093395, 0.762194855959245 }, new int[] { -1027, -4189, -7026, -3416, -8271, 6825, 9623, 2151, 5373, -6345 }, new short[] { 309, -7603, -6425, 641, -6026, 3233, -4295, 5249, 3774, 8915 }, new short[] { 4034, -2180, 1655, 2778, -8940, 6879, -41, 4420, -2169, -5676 })]
		[TestCase(new int[] { -3320, -9295, -5398, 6654, 1095, -4656, 177, -2588, -6349, 481 }, new bool[] { false, false, false, true, true, false, true, false, true, false }, new int[] { -3517, 2864, -559, 8472, -8789, -8846, 4153, 193, -4474, -5152 }, new int[] { -3131, -4796, -5678, 1051, 6974, -393, 7793, -3081, 9544, 8629 }, new double[] { 0.152826093208429, 0.914669011214128, 0.579978053262447, 0.164663720021333, 0.523230011818572, 0.469891144181551, 0.0308527462328098, 0.959990619197483, 0.960620767884246, 0.62468368635731 }, new int[] { -4967, -1738, 6085, -2842, 7839, 3814, 1262, -3871, 5445, -57 }, new double[] { 0.559441945776084, 0.99917890736795, 0.0943108359790923, 0.940146221285754, 0.180678950241152, 0.162402386387066, 0.0157696851602614, 0.807527376714874, 0.774060105334064, 0.197983545343384 }, new int[] { 770, -5069, -7848, 9703, 7615, -1810, -8734, -3852, -1991, 1811 }, new short[] { -9463, 4954, 981, 3030, 9814, 8606, -882, 7162, 3210, -6839 }, new short[] { 8343, 1665, 1472, -396, -2558, -6926, 6406, 2796, 9678, -2783 })]
		public void Any(int[] a, bool[] b, int[] c, int[] d, double[] e, int[] f, double[] g, int[] h, short[] i, short[] val)
		{
			NKeyHash<int, bool, int, int, double, int, double, int, short, short> nKeyHash = new NKeyHash<int, bool, int, int, double, int, double, int, short, short>(UnderlyingHashType.Dictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<int, bool, int, int, double, int, double, int, short, short>(UnderlyingHashType.ConcurrentDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<int, bool, int, int, double, int, double, int, short, short>(UnderlyingHashType.SortedDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<int, bool, int, int, double, int, double, int, short, short>(UnderlyingHashType.HashTable);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());
		}

		[TestCase(new int[] { 2549, -4883, 8119, -6365, -593, 6233, -997, -1144, 8986, -4992 }, new short[] { 4130, -6847, -7059, 2320, -4383, 9103, 3456, 2547, 2262, 4543 }, new short[] { 1781, -1531, -3532, -9207, -7270, 6068, 1235, 5728, 1308, 9712 }, new double[] { 0.624840094533209, 0.636753817385414, 0.381113996441063, 0.177962526296248, 0.530519070816468, 0.661418393562277, 0.677309227957069, 0.391938337773056, 0.00983033888499734, 0.560350363869383 }, new short[] { 4070, -2447, 3808, 4672, 3085, -4069, -8472, 1397, -362, -7381 }, new short[] { -3354, 3562, -5880, 4997, 7869, -5917, 8647, 7327, -9094, 3336 }, new int[] { -5001, 3273, 7546, 9273, 2509, -8603, 5529, 9379, -8288, 2387 }, new double[] { 0.277924612759577, 0.280916852541695, 0.617559999515098, 0.0528090461403174, 0.0236343247926022, 0.211480823909622, 0.732963609384822, 0.589714580955782, 0.385314696182178, 0.839935214649856 }, new int[] { 4542, 9837, -3907, -1309, 3068, 8933, -1383, 2624, -4310, -3470 }, new int[] { 4579, 6217, -3065, -3140, -3791, -9201, 5, 4534, -7835, 1689 })]
		[TestCase(new int[] { 400, -7852, -312, 7248, 7059, -8972, -8787, -6936, 4524, 3639 }, new short[] { -577, -3145, -378, -5893, 8793, -4839, -2818, -1143, -3793, 3575 }, new short[] { 2779, -7094, 3690, 5181, 7806, -659, 8683, -4507, 4847, 9674 }, new double[] { 0.711214817460261, 0.00622347556344395, 0.481545854118441, 0.800837954879197, 0.319889084584959, 0.619807989625171, 0.507563407769223, 0.442101313472773, 0.58151348101977, 0.602103928850081 }, new short[] { 7722, -4445, 8098, 2048, 7105, -2273, -3403, -7171, -1935, -8950 }, new short[] { 3615, -8850, -1670, -1411, 8909, -2503, -1544, 4504, 9441, -2280 }, new int[] { -7657, 5718, -1784, 4849, 9415, -702, 7222, 3604, 7707, -3601 }, new double[] { 0.750445974874518, 0.916982603686388, 0.861325496743119, 0.708179022049615, 0.792609131332771, 0.361292277165359, 0.240272892285265, 0.0820998661602381, 0.903758055951334, 0.504039981171507 }, new int[] { -7255, 5855, 7426, 3798, -3940, 3075, 1795, -8956, 7106, 8900 }, new int[] { -6058, 5645, -600, -6088, -299, -7995, 7338, -6749, 2632, -2190 })]
		[TestCase(new int[] { 503, 2990, -4880, -8332, -3960, 5275, -6077, 4165, 2735, 1683 }, new short[] { -7308, -3186, 6429, -638, -5024, -3514, 8291, 4415, -1209, -3659 }, new short[] { 7501, 6179, 6497, 8805, -7541, 9361, -1059, 3315, -5535, 3848 }, new double[] { 0.494349223791784, 0.0777833382961263, 0.450445870147294, 0.513317424111682, 0.978870381125654, 0.487644309405072, 0.536852759559105, 0.788041449053232, 0.387991353118788, 0.539166143415107 }, new short[] { -846, 7628, -1692, -4576, 6210, 7126, 9215, -9961, 8934, -6784 }, new short[] { -6287, -7076, 4459, -3706, 306, 4322, 6492, -3686, 9207, -3323 }, new int[] { -3663, 606, -298, 8886, -8202, -8864, 7803, -3835, -215, 5221 }, new double[] { 0.787424286728457, 0.126573708432994, 0.332791367235031, 0.900350432330906, 0.859325311546831, 0.993634868410246, 0.393647857659332, 0.553769717250843, 0.129749417831073, 0.266512627371826 }, new int[] { -9852, -1097, 4379, -8749, 136, -3035, -2903, -7283, 9958, -4745 }, new int[] { 3259, -5575, 6551, -8915, -5552, 8546, -2071, -580, -6373, 5076 })]
		[TestCase(new int[] { 9322, 3051, 253, -6285, -2533, -8819, 6266, 6451, -893, 433 }, new short[] { -3549, -4581, -6281, 3877, -3470, 7432, 6225, -1547, -1249, 4832 }, new short[] { 4038, 5087, -3795, -5469, -8036, 1324, -4020, -4427, 3559, 8638 }, new double[] { 0.597244971244244, 0.922665625774612, 0.372483635494711, 0.375915047422012, 0.30036342437396, 0.35473685029649, 0.93244834008275, 0.533324229779339, 0.689160114009474, 0.447843693405317 }, new short[] { 696, 643, 3609, -473, 8802, -2157, -9293, -7325, 4553, -2985 }, new short[] { -7678, 9474, -9329, -1207, -8960, -5764, -3151, -4276, -8248, 6140 }, new int[] { 5200, 694, -7106, 467, 8487, -2002, 7967, 6199, -2128, 9433 }, new double[] { 0.939230058779581, 0.278004922102208, 0.733480243819524, 0.989683615038955, 0.206844900365381, 0.169740207572347, 0.0739326244564413, 0.833869813398397, 0.286330347082731, 0.706015226759955 }, new int[] { 618, -6694, 1018, -3453, 6317, 2469, 7783, 8656, -3519, -8226 }, new int[] { -9752, 2925, -1084, 7640, 3755, -9997, -2248, -6856, 1037, 806 })]
		[TestCase(new int[] { -125, -5493, 4802, 5118, -1770, 6759, -5194, -9123, -5343, 7642 }, new short[] { -7243, 171, 9995, -2369, -4476, 1895, 9674, 6346, 4148, -3980 }, new short[] { 212, 9309, -280, -3901, 9187, -4140, 6643, 7027, -3962, -5864 }, new double[] { 0.782192255268894, 0.916801843753458, 0.281990576201114, 0.746001287245192, 0.212304891651638, 0.305619850431392, 0.425119331770166, 0.795002739315388, 0.915834044067112, 0.977897313878824 }, new short[] { -2335, 6908, 4001, -1163, 9015, 75, 2928, -8714, 2118, -8138 }, new short[] { -9673, 1403, -1005, -4980, -9405, 563, 4786, -1295, 5929, -7628 }, new int[] { -9882, -2222, 4837, -9478, -7999, -5579, -5468, -4922, -6614, 9409 }, new double[] { 0.169656995762911, 0.188795248134432, 0.901512483089004, 0.729531250768123, 0.917716223708222, 0.665203974426353, 0.265450593207707, 0.0441371356342626, 0.354083777570205, 0.455670892473157 }, new int[] { 2929, 5358, -5090, -5822, -6189, -5759, -657, -9377, 4325, 3682 }, new int[] { 1325, 9796, 9968, 5945, 9440, 9886, -7928, 3481, -3162, 4596 })]
		[TestCase(new int[] { -4455, -2147, 7899, 2708, 8466, 6549, 3373, 4402, -3335, -2710 }, new short[] { -4745, 3903, -8376, -3182, -559, -5242, -7130, 660, 6709, 7758 }, new short[] { 5077, -6089, 750, -298, -1915, -6404, -6193, -7915, 5148, 8466 }, new double[] { 0.561655818280604, 0.591374437134422, 0.702268463886468, 0.624244016885871, 0.178475106683781, 0.253841781641283, 0.872949121460761, 0.610036557358707, 0.285482632594873, 0.363000889477786 }, new short[] { 865, 4938, 3956, -2963, -1571, 7421, 8174, 3152, -3494, 4684 }, new short[] { 7017, 1410, 6770, -922, 9517, -8365, 7101, -1801, -5375, 4871 }, new int[] { 2743, 1289, 9253, -1802, 6055, 3426, 9857, -861, -6752, -5635 }, new double[] { 0.364880310541429, 0.533387000455236, 0.247555751468779, 0.472522912301367, 0.344681167669911, 0.00696749380182824, 0.497676621422952, 0.185677069791442, 0.0636852383910144, 0.533133903300918 }, new int[] { -4579, 652, 5577, -9535, -8550, 9821, 5055, -5031, 2965, -8063 }, new int[] { -2025, -739, -2422, 837, 4515, 9575, 5683, -4240, 980, 5000 })]
		[TestCase(new int[] { 7562, -962, -94, -7857, -2612, -3648, -3540, -2679, -7815, 9378 }, new short[] { 1680, 3388, -3074, 3960, -547, -7908, 5710, 8790, -3251, 6232 }, new short[] { 8369, 4890, 6171, -8687, 6389, 8036, -6908, 4113, 4933, -2682 }, new double[] { 0.222771461691135, 0.209698354457365, 0.636669089848487, 0.313625879731786, 0.654956450990847, 0.8191546559423, 0.0373637005860748, 0.6718522271476, 0.653791677976861, 0.754899292604485 }, new short[] { 3363, -2263, -7215, 3586, 255, 4584, -7663, 3615, -8613, 2425 }, new short[] { -6134, 6892, 9010, 4746, 6629, -7326, 2864, -1405, -4247, -649 }, new int[] { -6739, 2345, 2386, 4866, 4923, -2513, -9343, -9346, -9137, 3068 }, new double[] { 0.0671671196199801, 0.113713875000232, 0.285766101109686, 0.582516402743066, 0.143487826987862, 0.531733964817475, 0.605361530839168, 0.129272658903744, 0.552796264436467, 0.0902139228257415 }, new int[] { 5701, -525, 2727, -7490, -6546, -2437, -4816, 7986, -358, 426 }, new int[] { -6481, 2152, -2314, -6273, 1837, -8980, 5348, -2082, 8661, -7229 })]
		[TestCase(new int[] { 3929, -8316, 2754, -1683, 1082, -8408, 1177, -2638, 1876, -4003 }, new short[] { 565, 279, 7537, -6051, 3648, 3785, 9616, -121, 1414, -2638 }, new short[] { -7695, -7330, 1010, 435, -449, -809, 4588, -8009, 9811, -8147 }, new double[] { 0.764266818652054, 0.209517190330437, 0.196153006142077, 0.414327916416492, 0.393723423310427, 0.700946705742249, 0.836008397320289, 0.220567363882702, 0.571294777361348, 0.0930949119353178 }, new short[] { 6384, 7821, -3889, -6353, 9859, 3237, 4614, -6261, 76, 8051 }, new short[] { -8598, -4528, 6502, 1300, -9533, 1260, 672, -7680, 8764, -8107 }, new int[] { -2998, -812, -2451, 25, 710, -3624, -3642, -748, 6072, 9628 }, new double[] { 0.853274814716203, 0.760303550288222, 0.922614914794739, 0.477613433952263, 0.548810383560513, 0.22408574597169, 0.827937052970723, 0.368233975660165, 0.52872931702469, 0.81563602751849 }, new int[] { 4575, 851, 1912, -8238, -9548, -185, -2312, 2621, -2179, 6612 }, new int[] { -6652, 4400, -4353, -466, 4859, -2802, 273, 6083, 2934, 3485 })]
		[TestCase(new int[] { -3118, -4636, -2335, 447, -9012, -3804, -2980, -3049, -9674, 5983 }, new short[] { 4701, -6691, 1744, -7546, -2683, 6149, 7273, -4211, -424, -9102 }, new short[] { 8686, 3734, -8568, 9458, 6282, -7335, -439, -1081, 4691, -6220 }, new double[] { 0.710417381352939, 0.0237073777353891, 0.721471606624067, 0.85444517985659, 0.471558369450065, 0.460629198914687, 0.159330084994123, 0.0732773924587655, 0.0386831918911464, 0.712777665216838 }, new short[] { -7203, -9261, 2297, 1836, -8088, -9960, -7342, -6806, -7781, 8709 }, new short[] { -76, -5514, -3490, 2038, 4797, 3146, -6067, -1794, 4163, 8321 }, new int[] { 6633, 8099, 2258, 6545, -8223, 4227, -1121, 4654, 3021, 8103 }, new double[] { 0.648184848319825, 0.790454397346105, 0.250721409102306, 0.765971607419649, 0.905055779453859, 0.897518970024548, 0.0718610170631954, 0.479724853057286, 0.877426788153791, 0.812209285242581 }, new int[] { -9991, -3631, -3298, 5981, 3855, -276, 3964, -7608, -7708, 6283 }, new int[] { -4718, 4981, -2698, -7548, 7620, -5304, -1521, 5750, 60, -2316 })]
		[TestCase(new int[] { 1160, -1998, 170, -5886, -4253, 4113, 9469, 1190, 3937, 6847 }, new short[] { 1709, 4337, 656, 7919, 8314, 266, 1398, 6275, -7308, 2052 }, new short[] { -9735, -3512, 2364, 6737, 2823, 7981, -1491, -7436, 7697, 3405 }, new double[] { 0.473584900830679, 0.28430425062976, 0.976687027596257, 0.493280234510675, 0.254181481084871, 0.600280162226539, 0.809867644128328, 0.129401931599435, 0.511781831510263, 0.987080101383422 }, new short[] { 252, -7224, -1546, -4556, -5425, 943, -5674, -618, -5863, -2644 }, new short[] { 3295, 2201, 3060, 8007, -2580, -5326, 5636, 3432, 1289, -2235 }, new int[] { -4393, 6906, 3491, -9467, -2623, -3975, 4803, -9208, 2836, -3689 }, new double[] { 0.703452331807209, 0.440549678839999, 0.30204524532987, 0.147453429711728, 0.0900249798270059, 0.87446319864805, 0.901734203985768, 0.346079714757427, 0.6081656485834, 0.0940050920909294 }, new int[] { 3656, 9125, 8426, 343, -9888, 7268, 2625, -8473, -7552, -9588 }, new int[] { 6367, -7234, 1297, -7527, 4135, 3344, -717, -2078, 8066, 8549 })]
		public void Forloop(int[] a, short[] b, short[] c, double[] d, short[] e, short[] f, int[] g, double[] h, int[] i, int[] val)
		{
			bool[] found = new bool[9];
			bool allFound = false;
			NKeyHash<int, short, short, double, short, short, int, double, int, int> nKeyHash = new NKeyHash<int, short, short, double, short, short, int, double, int, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, short, short, double, short, short, int, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, short, short, double, short, short, int, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<int, short, short, double, short, short, int, double, int, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, short, short, double, short, short, int, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, short, short, double, short, short, int, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<int, short, short, double, short, short, int, double, int, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, short, short, double, short, short, int, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, short, short, double, short, short, int, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<int, short, short, double, short, short, int, double, int, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, short, short, double, short, short, int, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, short, short, double, short, short, int, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);
		}

		[TestCase(0.435769860835639, false, 0.470491988337828, 0.705351968158666, -3520, 8479, -6850, -9577, 0.505324752770981, 3397, 3277)]
		[TestCase(0.917230676821075, true, 0.497051806886239, 0.565230474604867, 7512, -6429, -1186, -1543, 0.410340781980353, 113, -1145)]
		[TestCase(0.680630022976841, false, 0.506150548116374, 0.129121650070474, -9398, 7057, 5624, 1108, 0.125711209664918, -4681, 2516)]
		[TestCase(0.688624200266145, false, 0.0747417188597572, 0.0944128628328502, -1635, -2343, 4863, -3865, 0.37499731191201, -2039, -4846)]
		[TestCase(0.143076613612043, false, 0.205931437763354, 0.394263341740828, -8018, -3027, -7407, -8701, 0.387581842666297, -8275, 6524)]
		[TestCase(0.993038570505119, false, 0.183462845246989, 0.199201420042292, -6102, 7878, -3908, -5203, 0.949908591317902, 883, -2039)]
		[TestCase(0.291417593737793, true, 0.114391081088405, 0.49048875574511, 5624, 5204, -8842, 3591, 0.103639696307313, -7385, -9104)]
		[TestCase(0.422997790585737, false, 0.246675606000552, 0.923190212307121, 2715, 5076, -1346, -1483, 0.0608161655537859, 7565, 792)]
		[TestCase(0.862377594626685, false, 0.691891603494013, 0.910950017585861, -5619, -6239, 6984, -9955, 0.135182887844361, -1037, 4268)]
		[TestCase(0.745086120788514, true, 0.273264015220694, 0.279872260652423, 2171, 1347, -2612, -9858, 0.708000028369948, 9649, 3911)]
		public void Add(double a, bool b, double c, double d, long e, short f, short g, int h, double i, int j, short val)
		{
			NKeyHash<double, bool, double, double, long, short, short, int, double, int, short> nKeyHash = new NKeyHash<double, bool, double, double, long, short, short, int, double, int, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<double, bool, double, double, long, short, short, int, double, int, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<double, bool, double, double, long, short, short, int, double, int, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<double, bool, double, double, long, short, short, int, double, int, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j));
		}

		[TestCase(0.75176570506383, 0.0702898279159748, true, 0.798597152251097, 7404, 824, 7396, 0.830337522472412, -7969, 9908, 1931, 4190)]
		[TestCase(0.398866408690282, 0.278618257622522, true, 0.355913018042181, -7093, 7304, -8869, 0.0537739373062616, -6592, 1142, -6663, -1174)]
		[TestCase(0.732039278714005, 0.871439701817669, false, 0.916342013010914, 1821, -970, -3439, 0.924032452480883, -5398, -5490, -5673, -5939)]
		[TestCase(0.555103334856733, 0.809969885186278, true, 0.82811086430592, -7255, 7552, 7620, 0.700094251753806, -2964, -4993, 2812, 3477)]
		[TestCase(0.621718663080464, 0.902270357078998, false, 0.941880181870367, -647, -1407, -3012, 0.194635314491873, 8069, -4330, -8667, 9975)]
		[TestCase(0.274735018738888, 0.953523929674888, false, 0.650004653097133, 3348, 3450, -410, 0.173443780827077, -8752, -1060, 6015, -3293)]
		[TestCase(0.16819061905527, 0.228374722054403, true, 0.292664465630736, 3521, -665, -8208, 0.481744695679166, -5383, 1851, -4107, 3775)]
		[TestCase(0.0460316627500726, 0.386141552769645, false, 0.800461950153328, 7520, -9565, -4009, 0.271625612523232, 4867, 3964, 1067, -6326)]
		[TestCase(0.638385900127881, 0.231045067883583, false, 0.679178327638273, 5415, -655, 2231, 0.174766653298757, -7969, -8596, 5473, -5215)]
		[TestCase(0.51300442894595, 0.0566720557662994, true, 0.436786859965318, -6120, 1696, 5360, 0.682148081102477, 3177, 1009, 2079, -4373)]
		public void Upsert(double a, double b, bool c, double d, short e, short f, int g, double h, int i, int j, int val, int newVal1)
		{
			NKeyHash<double, double, bool, double, short, short, int, double, int, int, int> nKeyHash = new NKeyHash<double, double, bool, double, short, short, int, double, int, int, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<double, double, bool, double, short, short, int, double, int, int, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<double, double, bool, double, short, short, int, double, int, int, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<double, double, bool, double, short, short, int, double, int, int, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j));
		}

		[TestCase(-1099, -1318, -1792, true, true, 9619, -7602, 1746, 9516, 2248, -5655)]
		[TestCase(-4250, 6387, 62, true, false, -6827, 8603, 7423, 494, -8241, 2541)]
		[TestCase(5025, -738, -8163, false, true, -9453, 1445, -434, -3924, 1284, 5600)]
		[TestCase(-1951, -8528, -9944, true, true, -9909, 4022, 780, 9262, 2561, 3377)]
		[TestCase(9977, -2168, -441, true, false, -970, -1334, 794, 6074, -5835, 1327)]
		[TestCase(6358, 3654, 8945, true, true, -1797, -8148, -9697, -47, -3825, 3059)]
		[TestCase(147, -1659, -1408, true, false, -4304, 8514, -6597, 9713, -7504, 9978)]
		[TestCase(-8350, -717, 4003, true, false, 4850, -7583, -9099, 5279, 5208, 1437)]
		[TestCase(6719, -4888, -3600, true, false, -1785, -4178, -1070, 8961, -7390, -2796)]
		[TestCase(-3081, 7682, -8780, false, false, -6852, -7028, 2279, 2673, -5549, -1167)]
		public void Delete(short a, long b, short c, bool d, bool e, int f, int g, int h, long i, long j, long val)
		{
			NKeyHash<short, long, short, bool, bool, int, int, int, long, long, long> nKeyHash = new NKeyHash<short, long, short, bool, bool, int, int, int, long, long, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<short, long, short, bool, bool, int, int, int, long, long, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<short, long, short, bool, bool, int, int, int, long, long, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<short, long, short, bool, bool, int, int, int, long, long, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
		}

		[TestCase(0.9355327747462, 1619, -6518, 0.540031895758599, 0.45792054965064, -9398, 301, 0.87903893221125, 784, -6466, 0.868544471854598)]
		[TestCase(0.72227583579825, -7634, 6319, 0.630975765004277, 0.92535609422501, -3644, 9268, 0.89641684847717, -6998, -7463, 0.349379986687275)]
		[TestCase(0.394379760787999, -1268, 4392, 0.353050920345379, 0.335714801836626, 176, 8285, 0.0964503968583655, -8922, 3555, 0.815465771507223)]
		[TestCase(0.453384617089007, 8971, -401, 0.933958839128706, 0.884758681470882, 3987, -7628, 0.0989366737655069, 5092, 3664, 0.264994202305094)]
		[TestCase(0.950428314949585, 7560, -2700, 0.102960819892101, 0.270878623365834, -971, -9353, 0.930800037426315, 1124, -2106, 0.765770419857358)]
		[TestCase(0.586152788058926, -6266, 4748, 0.820404382338936, 0.104869629305261, 3886, -9874, 0.964745469374929, -1144, -7543, 0.190761308740248)]
		[TestCase(0.906810064291027, 3296, 7346, 0.151058483473518, 0.991397255096304, -1340, -4718, 0.777896562022109, -8977, -2557, 0.666117453792187)]
		[TestCase(0.129385558482905, -276, 6830, 0.988092314912049, 0.232753981944525, -5240, -742, 0.0641500987411244, -7538, -7568, 0.420783239147059)]
		[TestCase(0.68761419723165, -2749, -4133, 0.196514449639485, 0.0643542991319458, 1890, -1515, 0.0927265426575795, 5797, -5189, 0.14219619480064)]
		[TestCase(0.759667006209338, 9423, 4002, 0.235584876144112, 0.119820139892316, -799, 1986, 0.666752635811806, 5566, -3127, 0.393650022984319)]
		public void Remove(double a, long b, int c, double d, double e, short f, short g, double h, int i, int j, double val)
		{
			NKeyHash<double, long, int, double, double, short, short, double, int, int, double> nKeyHash = new NKeyHash<double, long, int, double, double, short, short, double, int, int, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<double, long, int, double, double, short, short, double, int, int, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<double, long, int, double, double, short, short, double, int, int, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<double, long, int, double, double, short, short, double, int, int, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
		}

		[TestCase(0.486026825143968, true, 97, 0.857767222848612, true, -2627, 3389, -2925, 9166, 0.582219365323996, false)]
		[TestCase(0.987189363682265, true, 7406, 0.287969227083013, true, -7636, -9941, -703, -874, 0.343187217294791, false)]
		[TestCase(0.29396417424733, false, -5278, 0.945224477418337, false, -444, 9251, -3510, -4238, 0.861867237771799, false)]
		[TestCase(0.690442606662606, false, 4457, 0.730699221012508, false, 3302, -5385, 9943, -1506, 0.38524999766855, true)]
		[TestCase(0.494407716437433, false, 496, 0.108480618385822, true, -711, 3001, -20, 8275, 0.543465101878841, true)]
		[TestCase(0.408846579682476, true, -8750, 0.621716424646655, true, -4337, -6164, -2178, 2677, 0.294167529928576, true)]
		[TestCase(0.84474840566737, false, -2297, 0.56506745962662, false, 7121, -3244, -5317, -819, 0.91853383645347, true)]
		[TestCase(0.482533516587007, true, -6679, 0.420421916255924, true, 2978, -35, 3487, 5781, 0.948069862997192, true)]
		[TestCase(0.964405424410666, false, -9206, 0.668268520230552, true, 6308, 8951, 6109, -9327, 0.751377967070499, true)]
		[TestCase(0.930647336379926, false, -224, 0.723347478417376, false, -6040, 5879, -6775, 3593, 0.0844232025949393, true)]
		public void ContainsKey(double a, bool b, short c, double d, bool e, int f, long g, int h, short i, double j, bool val)
		{
			NKeyHash<double, bool, short, double, bool, int, long, int, short, double, bool> nKeyHash = new NKeyHash<double, bool, short, double, bool, int, long, int, short, double, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<double, bool, short, double, bool, int, long, int, short, double, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<double, bool, short, double, bool, int, long, int, short, double, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<double, bool, short, double, bool, int, long, int, short, double, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
		}

		[TestCase(-5084, -8566, false, 508, 1963, -5684, 446, 0.286508522595516, 0.65353237681721, 7698, 8810)]
		[TestCase(9304, -9651, true, 8632, -4925, -2295, -3993, 0.880370135829025, 0.627925330134074, -4631, 291)]
		[TestCase(-6861, -2810, true, 1077, -6306, -2275, 2831, 0.262728409032677, 0.140766403237715, 5837, -9755)]
		[TestCase(-3700, 9589, false, -1708, 4765, 1994, 1564, 0.638853239193025, 0.393167380426623, -1382, 8450)]
		[TestCase(5526, -5290, false, 300, -48, -8952, -6848, 0.592514677249135, 0.0791220926116789, 7542, -3053)]
		[TestCase(4623, 8293, true, 3729, -9112, -9376, -7277, 0.644936673177842, 0.390803967784533, 4883, -7025)]
		[TestCase(9060, 4048, true, 290, 6781, 2937, 4011, 0.302115474036948, 0.989072090941049, 7503, -8325)]
		[TestCase(-5312, 1661, true, -861, 3391, 7772, 1784, 0.105164267637378, 0.54825172598858, 4254, -7298)]
		[TestCase(9352, -5033, true, -694, -8962, 1108, 942, 0.502755219816582, 0.74823070724878, -9197, -6431)]
		[TestCase(2553, -4352, false, 1076, 9659, -5735, 213, 0.891930188933355, 0.77700661857473, 7760, -558)]
		public void Clear(long a, short b, bool c, int d, int e, short f, int g, double h, double i, int j, long val)
		{
			NKeyHash<long, short, bool, int, int, short, int, double, double, int, long> nKeyHash = new NKeyHash<long, short, bool, int, int, short, int, double, double, int, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i), 0);

			nKeyHash = new NKeyHash<long, short, bool, int, int, short, int, double, double, int, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i), 0);

			nKeyHash = new NKeyHash<long, short, bool, int, int, short, int, double, double, int, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i), 0);

			nKeyHash = new NKeyHash<long, short, bool, int, int, short, int, double, double, int, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i), 0);
		}

		[TestCase(6359, 4695, 4256, false, -2522, 1901, -7095, true, -273, false, -9127)]
		[TestCase(-8879, 9106, -3577, false, -7684, 8111, -2479, true, 3126, true, -5059)]
		[TestCase(-88, 2014, 6439, false, 9374, 9358, -6287, false, 3850, true, 9648)]
		[TestCase(-6163, -712, 3194, true, 9416, 6786, 8310, true, -9558, false, -3098)]
		[TestCase(2079, 2488, -1782, true, 501, -5083, -3163, true, 3822, true, 2)]
		[TestCase(1420, -5215, -7757, false, -4502, 2525, -6455, true, -5379, false, -4217)]
		[TestCase(-8529, 5271, 7134, false, -4504, 8694, 733, true, 8190, true, 6903)]
		[TestCase(-6988, 9934, -6048, true, -5862, -1141, 8795, true, -9742, false, -1142)]
		[TestCase(3832, 7865, -1588, true, 5613, 1289, -4213, true, -947, false, 8211)]
		[TestCase(-3702, 1018, 2944, true, -7550, 9419, -1858, false, -9754, true, 1727)]
		public void Get(long a, long b, short c, bool d, int e, short f, short g, bool h, short i, bool j, int val)
		{
			NKeyHash<long, long, short, bool, int, short, short, bool, short, bool, int> nKeyHash = new NKeyHash<long, long, short, bool, int, short, short, bool, short, bool, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<long, long, short, bool, int, short, short, bool, short, bool, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<long, long, short, bool, int, short, short, bool, short, bool, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));

			nKeyHash = new NKeyHash<long, long, short, bool, int, short, short, bool, short, bool, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j));
		}

		[TestCase(2612, false, true, 0.982038233886491, 917, -6917, 9442, -2207, -3199, -776, 3489)]
		[TestCase(-5201, true, true, 0.0409016115781393, -3966, -3589, 9374, 128, 7395, -8977, 6255)]
		[TestCase(-7894, false, false, 0.61355644958725, 5760, 9555, 7395, 6706, 6459, 7063, -220)]
		[TestCase(-8218, true, true, 0.94177779366345, -7191, -1496, -4939, -6582, 2451, -4198, -7494)]
		[TestCase(-8972, true, false, 0.346030881323866, 915, -7642, -1724, 3216, 6221, 1035, -6504)]
		[TestCase(6355, true, true, 0.650149465841311, 8645, -2679, 9886, 396, 93, 2763, 6424)]
		[TestCase(5018, true, true, 0.465581949551395, -2802, -6397, 871, -4930, 3979, -1429, 455)]
		[TestCase(9598, false, false, 0.180134888822276, -1159, -1359, 5039, -1568, -6756, -9156, 8742)]
		[TestCase(8285, false, true, 0.145839629762731, -194, -142, 7738, -6470, -7943, 5707, -258)]
		[TestCase(-5397, false, true, 0.619731433046857, -8395, 5159, -5326, -7653, 1153, 7055, 4924)]
		public void TryGetValue(long a, bool b, bool c, double d, int e, int f, long g, long h, short i, int j, short val)
		{
			short fetch;
			bool b1;
			NKeyHash<long, bool, bool, double, int, int, long, long, short, int, short> nKeyHash = new NKeyHash<long, bool, bool, double, int, int, long, long, short, int, short>(UnderlyingHashType.Dictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(short));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<long, bool, bool, double, int, int, long, long, short, int, short>(UnderlyingHashType.ConcurrentDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(short));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<long, bool, bool, double, int, int, long, long, short, int, short>(UnderlyingHashType.SortedDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(short));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<long, bool, bool, double, int, int, long, long, short, int, short>(UnderlyingHashType.HashTable);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(short));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);
		}

		[TestCase(new int[] { 6274, 3571, 2476, 7138, -5719, 3795, -8984, -2669, 450, -3484 }, new double[] { 0.737388662405959, 0.492910444034687, 0.886079309920817, 0.38529084128574, 0.339592881193195, 0.822285953826404, 0.351815901860509, 0.994007559956055, 0.187914225826, 0.0448517161630335 }, new long[] { -311, -8311, -6638, 6148, 2438, -678, -3534, 4813, 9257, 2282 }, new short[] { -3301, 4045, -9778, -981, -4317, -6760, 9917, -5534, 879, 877 }, new double[] { 0.0665689865437192, 0.191180076539135, 0.330277494308668, 0.420505510838938, 0.557653558700184, 0.493784984803658, 0.79370543071707, 0.781735273907769, 0.412574927514687, 0.101728165103927 }, new double[] { 0.210534808789629, 0.773827340814205, 0.895157339933867, 0.431186007536569, 0.294704814113073, 0.729380151130902, 0.510523883863596, 0.816371490162039, 0.235024166868545, 0.747959346393104 }, new long[] { -2668, -3799, -1928, 8167, 9815, -9297, -362, -1296, -7974, -6446 }, new double[] { 0.826368879446, 0.128566862609501, 0.450044003059177, 0.644058400133652, 0.978282729619314, 0.293265316306271, 0.754095969141506, 0.747552997315094, 0.24978930980423, 0.128146192118594 }, new short[] { 3446, 829, -3437, 7223, -1928, 1221, 6142, 1597, -6874, 1093 }, new int[] { 3028, -6408, 9763, 5919, -6453, 5130, 5752, -1562, -1405, 451 }, new double[] { 0.0119240004624818, 0.358550027179788, 0.680523327403014, 0.234941661932944, 0.275359285657927, 0.0819679461801275, 0.323783337755028, 0.251098939800215, 0.452903277917254, 0.00143949780680216 })]
		[TestCase(new int[] { 9504, 5258, 1331, -7861, -8486, 6500, 9636, 846, 96, -1405 }, new double[] { 0.227914013540332, 0.901997532184235, 0.278936311266821, 0.546513202854671, 0.526197533833886, 0.646823295227635, 0.140341990227039, 0.654039792555403, 0.466781362642898, 0.22171244873745 }, new long[] { 112, -3355, -3642, 4543, -7674, -3723, 7218, -8135, 1716, -3567 }, new short[] { -5253, 1121, -7460, -6903, 1588, 7768, 2259, 7626, 4407, -2955 }, new double[] { 0.774704038991921, 0.24528815282755, 0.917027595879989, 3.03843990109788E-06, 0.29466687715364, 0.109926468278247, 0.0796137159129669, 0.134010124548343, 0.708744128099058, 0.628535990430292 }, new double[] { 0.941625955953089, 0.669743545199625, 0.784317577157317, 0.231190829179804, 0.495803923111318, 0.643051232045075, 0.445120642168969, 0.839373761247552, 0.99065578309384, 0.761810456757345 }, new long[] { 9281, 7772, 9128, -6334, -6151, 3436, 5500, -7516, 9341, 2754 }, new double[] { 0.0338598913670796, 0.258995092594528, 0.93364547003696, 0.114581765660356, 0.447008409745529, 0.260347421867935, 0.415205354064333, 0.317847205939632, 0.432541541956617, 0.00629572337786468 }, new short[] { -5315, 4538, -2310, 9145, -2400, 1351, 5434, 7914, 3179, 8726 }, new int[] { -1133, 5471, 7813, 9170, -2237, 7719, -4223, 4675, 6151, 2456 }, new double[] { 0.3348891103337, 0.955456999109805, 0.16691148335436, 0.071011439464526, 0.594676099063212, 0.68263086335856, 0.736098075162665, 0.669735811496962, 0.784182419434275, 0.235456501243383 })]
		[TestCase(new int[] { -5442, -7453, -1863, 9686, 552, -5256, 84, 9982, 6064, 2495 }, new double[] { 0.900112161366321, 0.879268012884663, 0.46518104545082, 0.0307353115783703, 0.194388485604147, 0.260270248754076, 0.368303978055857, 0.975061604275863, 0.726481588895657, 0.560979810804585 }, new long[] { 9430, 3627, 204, 6193, 3427, -4424, 1201, -3730, -2746, 3946 }, new short[] { 6628, -7959, -7767, -1529, 4169, -3678, -2664, 8125, -1380, -6979 }, new double[] { 0.381799832629878, 0.289617366292336, 0.930564110134991, 0.182819181207018, 0.722700416912651, 0.455621097449037, 0.490275953658985, 0.136176171775989, 0.876622953860379, 0.334405850309136 }, new double[] { 0.314326885302703, 0.761036470886802, 0.943254222601305, 0.22320260862969, 0.263905103906945, 0.546443802093362, 0.617049259886634, 0.597103255613289, 0.312953446671811, 0.248896025237113 }, new long[] { 3541, -6183, 2730, -7881, 5865, 5961, 5353, -9165, -3555, 7565 }, new double[] { 0.893512825432007, 0.461972923233161, 0.544102479957092, 0.575512936606776, 0.179179978174707, 0.681934031044102, 0.750837965752388, 0.327404995135686, 0.0870285467649943, 0.215785515595128 }, new short[] { 5768, -1522, -1263, -9434, -2339, -8590, -6824, 7766, -6807, -6757 }, new int[] { 3980, 5392, 1867, -6358, -522, -6179, 3061, 6492, -2209, 8491 }, new double[] { 0.687940010189982, 0.448614078317124, 0.813958311832491, 0.99830523505728, 0.44089302487713, 0.852353962069542, 0.216933990929711, 0.367741285994528, 0.0440226304549829, 0.581971072862843 })]
		[TestCase(new int[] { 5911, -4206, 201, -8055, -791, -4935, 5079, 2165, 4456, 4457 }, new double[] { 0.639353731944856, 0.879296770263136, 0.882047809139848, 0.16014421040199, 0.179296211888686, 0.123858657723227, 0.868595315082276, 0.362039380875434, 0.101619396406049, 0.988173677580512 }, new long[] { -9421, 8522, 8757, -6750, 556, -3202, 2198, -1229, 1746, 613 }, new short[] { 7069, 5819, 6886, 1552, -2670, -1812, -4807, -75, 4431, -5585 }, new double[] { 0.437025048973516, 0.0447663124859176, 0.101821747655897, 0.666609269411587, 0.285240849612859, 0.808643239926846, 0.566566269177276, 0.653814101430501, 0.819009023168594, 0.317034367153903 }, new double[] { 0.983758646987266, 0.854894610054276, 0.26612188958848, 0.0558489528744709, 0.553113120865595, 0.869447098984126, 0.351732687722767, 0.347640743641015, 0.569322425671538, 0.12060457846178 }, new long[] { 2865, -3690, -9579, -6155, 7386, 6966, -9300, -3911, 5872, 5397 }, new double[] { 0.864279198862742, 0.372385638008074, 0.640419544484662, 0.880920727681797, 0.551148628606996, 0.98409163951133, 0.824336989700951, 0.271302307616594, 0.877193115594421, 0.719202265478299 }, new short[] { 5464, 9121, 2389, -4593, 938, 9971, 497, 5769, -9508, -59 }, new int[] { -8846, 8237, 8536, 2020, 1548, -7568, -9523, 8191, 5944, -1261 }, new double[] { 0.773708156204647, 0.262161453376599, 0.860137704229046, 0.0490900534433732, 0.45275516829116, 0.611373008979192, 0.214475065569615, 0.385201161906683, 0.504700324267475, 0.569021481354265 })]
		[TestCase(new int[] { -9096, -8390, -590, 7001, -3053, 3742, 3919, 5012, 2905, 7414 }, new double[] { 0.323453986702233, 0.246422350055735, 0.2798749433271, 0.296655682985045, 0.712274415284523, 0.952340483643273, 0.445498386605409, 0.0394042865556685, 0.303495001654837, 0.429597785896434 }, new long[] { 9205, 8293, -518, -1193, 8908, 222, -8079, 1408, 6350, 8709 }, new short[] { 5682, -7205, -4323, -889, -961, 9543, -1170, -8463, -4925, 7804 }, new double[] { 0.425574658636737, 0.273127899632383, 0.264368455980145, 0.926469232387128, 0.113443948381321, 0.527285806148912, 0.982286510049499, 0.563482021244002, 0.33681563815885, 0.500414684647887 }, new double[] { 0.165874622373783, 0.175070779013946, 0.0817061602518457, 0.0751025383710407, 0.60872488357533, 0.130410825428744, 0.606360816679132, 0.0301524475357274, 0.904626050919586, 0.83622120173472 }, new long[] { 1823, -7487, 8661, 4194, -8266, -6324, 9251, 6486, 6894, 4700 }, new double[] { 0.510849396470398, 0.368731295395983, 0.785721192036626, 0.413234390976482, 0.00402312725969736, 0.687168698146552, 0.650330827874286, 0.547600331039913, 0.326851232129546, 0.418208303124741 }, new short[] { 576, 649, -5327, -3656, 5392, 2181, -8839, -5825, 6934, -3569 }, new int[] { -2582, -1773, -6556, -1650, -4018, -3999, -3199, 1092, 6796, 8592 }, new double[] { 0.564675865492167, 0.157919957841709, 0.718736943192192, 0.601755397208852, 0.989565288177489, 0.7971433269778, 0.389349586977321, 0.668471769275363, 0.0710794111113434, 0.921556185428778 })]
		[TestCase(new int[] { -398, -8823, 4065, -271, -3851, -8824, 7838, 2319, 8800, -448 }, new double[] { 0.1257846151133, 0.753900069628796, 0.977583044663809, 0.523245298547319, 0.364206883294604, 0.099510756833251, 0.196590255106143, 0.368259299252303, 0.114168772527095, 0.704016683951028 }, new long[] { -3056, -8085, 4154, -2056, 7069, -2581, 6274, 2636, -3448, 9449 }, new short[] { -5605, -2209, -7246, 8503, 6827, -3757, 4160, 3714, -7797, -5192 }, new double[] { 0.408030558567508, 0.724025811871526, 0.614580682765032, 0.362285273318312, 0.803893112486179, 0.810775795863371, 0.1803369131779, 0.195491644644873, 0.237548513914248, 0.890054531344238 }, new double[] { 0.600553071871657, 0.0210902877250175, 0.554302996748268, 0.367062727160315, 0.574397205176948, 0.384390158757749, 0.351003823034001, 0.306127710876115, 0.632885310162271, 0.936492256324967 }, new long[] { -5100, -4796, -4231, 9349, -4842, 4725, 2325, -8951, 3636, -8956 }, new double[] { 0.391473332602285, 0.510866962611148, 0.25819415657697, 0.873810044431039, 0.29598612538352, 0.623133168380304, 0.481109156031678, 0.345471389286905, 0.593280392043889, 0.0427566417692027 }, new short[] { -6188, 2364, -2114, -1249, -2560, -6026, 6703, 5410, -2983, -859 }, new int[] { 9220, -1961, -8942, -6527, 9907, -7041, -1287, 2940, -7910, -8646 }, new double[] { 0.194506186151181, 0.127981190629295, 0.513666128047586, 0.185434502635819, 0.498581198741953, 0.0896861092605098, 0.762896131148048, 0.680492952317229, 0.0710766017767957, 0.951264036796644 })]
		[TestCase(new int[] { 8064, -9888, 4256, 1802, 4918, 2533, 7316, 7017, 1911, -8814 }, new double[] { 0.901067939075207, 0.845701876955899, 0.701525605610351, 0.224795893405003, 0.0910249622962554, 0.989563619247435, 0.458028980278424, 0.084621270226604, 0.878407048004869, 0.148094518179118 }, new long[] { -6248, 6680, -5178, 513, 6964, -8747, -7907, -5822, 8777, -4353 }, new short[] { -1285, -6905, 3989, -2008, 1074, 9110, 3780, -745, -1446, -2625 }, new double[] { 0.282041075305101, 0.584710431091818, 0.0514784991049573, 0.0452309409367065, 0.166550394690852, 0.348804309195282, 0.426455585018944, 0.288870234642583, 0.0944095403395638, 0.509017579494518 }, new double[] { 0.631657128982086, 0.678274860921444, 0.80208590431236, 0.922982083597678, 0.763741761801644, 0.0692160567591042, 0.764505504520845, 0.187185260554396, 0.741878212775047, 0.683338285742019 }, new long[] { 442, 3139, 8238, -3734, 2469, 4926, -7075, -3960, 3420, -7289 }, new double[] { 0.300501224724809, 0.995319666338768, 0.656973059595084, 0.509700269210013, 0.866053442874017, 0.602811843903182, 0.78258644686201, 0.195795988289544, 0.359111663586978, 0.499446146422739 }, new short[] { 2722, 6313, -7710, -1401, 3012, 5148, -2947, 5529, 2716, -309 }, new int[] { -6178, 37, 4416, 4885, 6931, 2500, 3454, 4763, -1564, -1595 }, new double[] { 0.202593563218877, 0.124496059550203, 0.617822961703792, 0.958941193278386, 0.208516354769709, 0.636337462643319, 0.0213018013263595, 0.292385635102347, 0.0569286407236609, 0.160929917898462 })]
		[TestCase(new int[] { -4266, 1374, 6560, -5150, -9054, 4127, 850, -358, 3252, 7319 }, new double[] { 0.393726068732201, 0.369701698594588, 0.666135207128774, 0.186514709231683, 0.944417236346946, 0.79862409075658, 0.274488565174159, 0.912663134705584, 0.663096322055485, 0.24100898264023 }, new long[] { 8600, -9111, 5480, 8777, -4062, 232, -6041, -6889, -5571, -9713 }, new short[] { 4722, -8794, 4391, -502, -6041, 2446, 3475, -431, 3941, -7194 }, new double[] { 0.0824922216508967, 0.190691699362682, 0.0755439056435339, 0.555722530724352, 0.0264702742111265, 0.83289186462429, 0.458360852421429, 0.431308252472108, 0.0145239569314401, 0.409892264013129 }, new double[] { 0.36184889746916, 0.108638666620775, 0.629289313046862, 0.815919658083431, 0.230861300244397, 0.242240603660345, 0.794662112740177, 0.889158276323768, 0.945579483148446, 0.535572735376457 }, new long[] { 169, -2258, -4786, 2966, -7401, -3329, 3002, -6174, 9771, -3558 }, new double[] { 0.12482055375577, 0.796089530361858, 0.21556069060022, 0.522872055192884, 0.158516760989333, 0.739376918291383, 0.968845100593215, 0.218324872766773, 0.912445046432524, 0.463960718579572 }, new short[] { -8933, 5331, -7179, 6229, 3048, 2550, -1380, 8072, -5118, 9112 }, new int[] { 6552, 5692, 656, -6768, 2634, 3908, 8599, -1456, -1482, 3859 }, new double[] { 0.182770572687858, 0.26712004573416, 0.442696497050438, 0.692448315067426, 0.285071710257359, 0.565759367107302, 0.893077976020555, 0.106417257853978, 0.657402897094098, 0.491484381953014 })]
		[TestCase(new int[] { -4531, 1526, 9533, -367, -353, 4837, -5078, -1016, 9917, 47 }, new double[] { 0.902530685953112, 0.746460543361707, 0.947207706490163, 0.0329494052720021, 0.49439616012126, 0.340175293078728, 0.263269978698003, 0.0540309818713139, 0.891127278977599, 0.46307359471129 }, new long[] { 6186, 833, 5848, -5610, -4375, 5722, -3521, -1029, 528, -8265 }, new short[] { 4688, -3508, -5074, 5050, 3644, -4972, 6158, -8975, 3584, 7796 }, new double[] { 0.449373337183787, 0.480894351136356, 0.431258120774877, 0.923495258169014, 0.790455867438789, 0.436310029326151, 0.319912339243997, 0.409747091778436, 0.198052154946165, 0.944896417178631 }, new double[] { 0.302489388409299, 0.839046994149241, 0.215289978876379, 0.194329302382809, 0.682146959324436, 0.731730833990374, 0.783863344594773, 0.757254736850623, 0.20042861867716, 0.696144995138117 }, new long[] { -1639, 5950, 8453, 8183, 5357, 1559, 4, -6106, -2986, -5138 }, new double[] { 0.532243262292931, 0.212069191603022, 0.374800115532614, 0.00127005623712673, 0.0137002575275024, 0.328443071492223, 0.110406548301879, 0.868978637209618, 0.429002625601833, 0.844880116565563 }, new short[] { -675, 8282, -4989, 1630, 5683, 7907, -7814, -8960, -8591, 9009 }, new int[] { -650, -8985, 7014, 9660, -562, 3036, 1163, 440, -6887, -5750 }, new double[] { 0.936107337445071, 0.125253350997927, 0.0590645335889722, 0.954998236594255, 0.412653154885701, 0.0904201968062763, 0.464246878616627, 0.214019922639253, 0.180629044855306, 0.353703887832213 })]
		[TestCase(new int[] { 2426, 8296, -3434, -2888, -5401, 76, 941, -3176, -7498, 7449 }, new double[] { 0.46874911080522, 0.448274142783263, 0.124257229326413, 0.4001465450973, 0.775575021177332, 0.481565968357756, 0.361297023185201, 0.391714244332031, 0.529404946849404, 0.3618658382268 }, new long[] { 5404, 1767, 4267, -5668, 8174, -3179, 7100, -4089, -6621, 3875 }, new short[] { -1376, 7903, 7425, 4333, -3415, 1051, 4448, -95, 5063, 9359 }, new double[] { 0.104774257682624, 0.217013691653038, 0.396969499716987, 0.283050399871101, 0.743711847692594, 0.487833194661808, 0.000996121671514642, 0.658917988491672, 0.179423215416923, 0.931087186527945 }, new double[] { 0.729123173621075, 0.0725326342845953, 0.684614975789848, 0.818763206628507, 0.583445371865968, 0.0329353436981027, 0.201483467221951, 0.11171044414477, 0.446775722991105, 0.888915330119857 }, new long[] { 2974, -4967, -6553, -1374, -1172, 1470, 1539, -1848, -8580, -5539 }, new double[] { 0.75914078567137, 0.866073356878978, 0.638531860261472, 0.561383602470804, 0.257091580544175, 0.553244824313207, 0.191419442273406, 0.430350840292103, 0.472829819411426, 0.420939584458684 }, new short[] { -3199, -6076, -7678, -5243, 9292, -2827, -5787, -8948, -7334, -4074 }, new int[] { -2977, 2214, -9030, 7284, -3614, 7063, -9104, 9312, 6832, -6595 }, new double[] { 0.910858556121056, 0.593436763432546, 0.587983170798041, 0.956442384029013, 0.171946400856574, 0.863049816742097, 0.434000774023123, 0.123231373319044, 0.561671626084331, 0.0302005475527609 })]
		public void Count(int[] a, double[] b, long[] c, short[] d, double[] e, double[] f, long[] g, double[] h, short[] i, int[] j, double[] val)
		{
			NKeyHash<int, double, long, short, double, double, long, double, short, int, double> nKeyHash = new NKeyHash<int, double, long, short, double, double, long, double, short, int, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0]), 9);

			nKeyHash = new NKeyHash<int, double, long, short, double, double, long, double, short, int, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0]), 9);

			nKeyHash = new NKeyHash<int, double, long, short, double, double, long, double, short, int, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0]), 9);

			nKeyHash = new NKeyHash<int, double, long, short, double, double, long, double, short, int, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0]), 9);
		}

		[TestCase(new double[] { 0.524438340926747, 0.274306859017493, 0.774658433988066, 0.871870108820437, 0.148426047129755, 0.817625413563859, 0.77426480631077, 0.24212220834667, 0.403896964808878, 0.508516219681369 }, new long[] { -5484, 1773, -3946, 201, 4930, 2163, -6807, -8682, -7967, 8491 }, new long[] { -8251, -182, -7938, -904, 1599, 9435, -9546, -3692, 7332, 4353 }, new bool[] { false, false, true, true, false, false, true, false, false, false }, new int[] { 3194, 7621, -6843, 433, 2315, -6350, -3274, 315, 6046, 6887 }, new int[] { 9517, 7371, -2699, -6836, -4488, -9327, -6574, -3601, -4161, -6467 }, new bool[] { true, false, false, true, false, true, true, false, false, false }, new double[] { 0.794857918654968, 0.0750426450162393, 0.0423318357404004, 0.0561748175212065, 0.264874609310587, 0.206270361415236, 0.33309001025422, 0.581367623797323, 0.838970418944475, 0.397528920973432 }, new int[] { 2711, 137, 259, -9553, 4834, -5167, -7318, 2014, 634, -2942 }, new bool[] { false, false, true, true, false, false, true, false, false, true }, new short[] { -2946, 6816, -2157, -2500, -9008, 8016, 6525, -3822, 7864, -8613 })]
		[TestCase(new double[] { 0.700483659142853, 0.589887283551454, 0.480927532762721, 0.894363092209382, 0.540997237219008, 0.288156914193256, 0.945945310846877, 0.353199136607907, 0.944459826193964, 0.156666311042694 }, new long[] { 1852, -5418, 9271, 5415, -4408, -3970, -4352, -6091, 6114, -8717 }, new long[] { 4011, 7230, -840, 8995, -9101, 5893, -7703, -7238, 9453, 6817 }, new bool[] { false, true, true, false, true, true, false, true, false, true }, new int[] { -4902, -6950, 541, 9333, -4069, -7527, 7544, 2425, -8091, 4961 }, new int[] { 2369, 2617, 61, 6583, -2626, 6778, -7360, 621, 6989, 4925 }, new bool[] { false, true, false, false, true, true, true, true, false, true }, new double[] { 0.288931881212132, 0.384045213174096, 0.889472232148737, 0.843510142920311, 0.809190079015302, 0.548161044506431, 0.334449887431436, 0.49121350259111, 0.653328459548451, 0.921259103306224 }, new int[] { 8348, -130, -9146, -5507, -5551, 5687, -3557, 7563, -8122, 6267 }, new bool[] { false, false, false, true, true, false, true, false, false, true }, new short[] { 2039, -2477, 56, -2523, -816, -5310, 4828, 3191, -9598, 6409 })]
		[TestCase(new double[] { 0.504493735965571, 0.640716373287475, 0.877759625612646, 0.928236517556122, 0.828809844715898, 0.679912148825783, 0.765271433985453, 0.155917049458212, 0.881162039414589, 0.956954708768499 }, new long[] { -1093, 2867, -1853, -3898, -4089, 6149, -3295, -3403, -8906, -2755 }, new long[] { 5523, 8217, -4682, -7514, -3614, 827, 9812, 3375, 5307, 9757 }, new bool[] { false, true, true, false, false, true, true, false, true, false }, new int[] { 3633, 2320, 847, -4630, -8324, 9171, 9375, -6043, -8432, 3033 }, new int[] { 7983, -1767, 2098, 3155, -9113, 1871, -2502, 5069, 2179, -4250 }, new bool[] { true, false, false, true, true, true, true, false, true, true }, new double[] { 0.203869172466858, 0.214638632822148, 0.598973767645179, 0.945703564652104, 0.680546753425406, 0.160161683410481, 0.368551106363792, 0.99740236485256, 0.0405100747200242, 0.360635721758304 }, new int[] { 1450, 5856, 1809, -7724, -8225, 2627, -8847, -5991, -5418, 4306 }, new bool[] { false, true, true, false, false, true, false, true, false, false }, new short[] { -6530, 6696, -5965, 1363, -1043, 3691, 6252, 3184, 9544, 7681 })]
		[TestCase(new double[] { 0.22502315241146, 0.37748342909733, 0.712998384941834, 0.248345147933972, 0.714907486324621, 0.896401242770441, 0.505973906957532, 0.276808269916479, 0.804514506740735, 0.282604557127973 }, new long[] { 4504, 1696, 8096, -4384, -8005, -2925, 4060, -6887, 520, -8092 }, new long[] { 8692, 4387, 2858, 4791, -6255, 4753, 1823, -9552, 3318, -1917 }, new bool[] { true, false, false, false, false, false, false, false, true, true }, new int[] { -8414, 8973, 6891, -8562, 1513, 1771, 8598, 8417, -630, -8117 }, new int[] { 9630, 3140, -7335, 7637, 8988, 112, 4690, 9467, -8776, 9543 }, new bool[] { false, false, true, false, false, false, false, true, true, false }, new double[] { 0.216581393599781, 0.439775457344845, 0.427103119635537, 0.00272723799698392, 0.0160693009458805, 0.985943139989834, 0.874771905538985, 0.57110101243998, 0.163889020757698, 0.598611758834967 }, new int[] { 6154, 3404, 1077, 1436, -1548, -6765, -4696, -3175, -2090, 9693 }, new bool[] { false, false, false, true, false, true, false, false, true, false }, new short[] { -5461, -2599, -7389, -1965, 7549, 835, -5400, -7389, 7316, 9269 })]
		[TestCase(new double[] { 0.630846994291454, 0.163433006575067, 0.809523016591334, 0.462518740660752, 0.16947432568738, 0.635001370979008, 0.929777865731054, 0.0390451667080844, 0.977850652755169, 0.302183387941766 }, new long[] { -8765, -9588, -6709, 6113, 5365, -8942, -5246, 3516, 5692, -1590 }, new long[] { 2962, -1389, 9261, 8300, -2565, -1245, 794, -6956, 3886, 7614 }, new bool[] { true, false, false, false, false, false, false, true, true, true }, new int[] { 3316, -4024, -672, -3883, -6256, -5871, -5888, -3503, 2668, 6492 }, new int[] { -3916, 1082, -3083, -1091, -3691, -5993, -5993, 7888, -8182, 4634 }, new bool[] { false, true, false, false, false, true, true, true, false, true }, new double[] { 0.698639090963937, 0.498037169453705, 0.0940348380683152, 0.201621519029896, 0.754641624518969, 0.349356911773494, 0.964162615576835, 0.657325271823129, 0.727916481777987, 0.165303051083024 }, new int[] { -5356, -5700, 374, 7393, 1532, -2447, 5776, -9400, -7668, -6928 }, new bool[] { true, false, true, true, false, true, true, false, true, false }, new short[] { 3223, -539, 7457, -9996, -7479, 6121, -798, -7115, 3814, 9319 })]
		[TestCase(new double[] { 0.236142444534294, 0.542986286591266, 0.166555094610227, 0.925512051640783, 0.499587880214484, 0.880340372622172, 0.258893351191139, 0.474987380893429, 0.520455116182778, 0.99282215721571 }, new long[] { -7236, 305, 2319, -4033, 3971, -5221, 6984, -5119, 4276, 7328 }, new long[] { -2094, 1897, 4439, -643, 81, 5182, -3159, 372, 4873, 5410 }, new bool[] { true, true, false, false, true, false, false, true, false, true }, new int[] { 2585, -418, 6976, 8849, -7560, -7080, 7140, 1492, -3968, 7741 }, new int[] { 9136, -5677, -1393, 6485, 1415, 2825, 6419, 3974, -1571, 4808 }, new bool[] { true, true, true, true, false, false, false, false, false, false }, new double[] { 0.945718052306081, 0.125959879311714, 0.893541971637654, 0.106409862221409, 0.237135276774473, 0.916191348301336, 0.746026855775168, 0.779445278821255, 0.345863701005403, 0.358143408018231 }, new int[] { 8041, 5346, -5657, 7131, 6272, 4028, -5712, 296, 1594, -4476 }, new bool[] { true, true, false, true, false, true, true, false, true, true }, new short[] { 9395, -2168, -6124, 9891, 8826, 6617, -3548, -3521, 1743, 3091 })]
		[TestCase(new double[] { 0.895248411174514, 0.0415668110556746, 0.352882080410087, 0.0632790006060521, 0.83834091985521, 0.770971167260302, 0.523218893689671, 0.874689019692451, 0.936257603548587, 0.373823318338871 }, new long[] { -4416, 3224, 7714, -7904, 4723, -2974, 6481, -4328, -9252, -3037 }, new long[] { -6631, 2941, 8243, 4347, -2233, 210, 1472, -5550, 8303, 9654 }, new bool[] { false, true, true, true, false, true, false, false, true, false }, new int[] { -2683, 7461, -6746, -131, -3013, -3828, 116, -8219, -4830, 1801 }, new int[] { -9863, -9218, -4267, -5218, -276, -5036, -7411, 2709, 3499, -3443 }, new bool[] { false, false, true, true, true, false, true, true, true, false }, new double[] { 0.109725751499518, 0.585518458665124, 0.511864670790669, 0.739186232788109, 0.98232266678583, 0.295274270835926, 0.484458195736845, 0.418770197042623, 0.368082106750497, 0.0797242843917218 }, new int[] { -9904, -307, 9278, -3497, 9518, -3201, 2075, 3771, -1220, -7344 }, new bool[] { false, true, true, false, false, false, true, false, false, true }, new short[] { 1499, 904, -2696, -8971, -392, -1574, 542, 948, -4864, -6181 })]
		[TestCase(new double[] { 0.763676491455956, 0.710600535250549, 0.267399482087884, 0.595251650826657, 0.323056804632329, 0.712746069632818, 0.336798816144838, 0.634372900535526, 0.9775141430914, 0.655009862806187 }, new long[] { 5698, -9099, 432, 1821, 6145, 73, -9560, -8639, 2768, 8345 }, new long[] { -2366, -4493, 8404, -1849, 94, -809, -7610, 8251, 6893, 1093 }, new bool[] { true, false, false, false, false, true, false, true, false, false }, new int[] { 4563, -4414, -5366, 6869, -6486, 599, -9527, 5480, -5118, 9533 }, new int[] { -2012, -816, 8179, -3211, 6184, -232, 5806, 7197, -8189, 7269 }, new bool[] { true, false, true, false, true, true, true, false, false, false }, new double[] { 0.164978190867686, 0.0535595598880013, 0.947176897408057, 0.25039035046957, 0.189101398079238, 0.102375632665295, 0.0436342372762199, 0.0767502705923981, 0.231875600866915, 0.974762925400754 }, new int[] { -1281, -3091, 3370, 7359, -6892, -2927, -7052, -8150, -1224, 7613 }, new bool[] { true, false, true, false, true, false, false, true, false, false }, new short[] { 8336, 5000, 1040, -7480, 6234, -3083, 239, 3172, -6992, 4137 })]
		[TestCase(new double[] { 0.444753109218903, 0.713594962243733, 0.628021199548627, 0.115744317935661, 0.4276047956327, 0.247890636905977, 0.755643883140592, 0.921648901385092, 0.267497289584716, 0.488654840965129 }, new long[] { 1625, 414, 6694, -3173, -5612, 3723, -6485, 3797, -886, 7700 }, new long[] { 2254, -5303, -8489, 5696, -8840, 3717, 5866, 852, -8874, 6189 }, new bool[] { true, false, true, true, false, false, true, true, true, true }, new int[] { 967, 1359, 826, 251, 7314, -2076, 8304, -5785, 8130, -7488 }, new int[] { -6597, 6441, -5939, -4694, -8116, -5800, 2761, 6862, -8842, 4833 }, new bool[] { false, false, true, false, true, false, true, false, true, false }, new double[] { 0.835444912703449, 0.413611116546025, 0.860214696666326, 0.908811599439388, 0.336698165320185, 0.0447931788139013, 0.693465994993907, 0.562905597296965, 0.919081836435516, 0.661777891526827 }, new int[] { 5411, 1652, 2720, 8613, 2788, -9608, -4284, 3536, 2754, -5479 }, new bool[] { true, false, true, false, false, false, true, false, true, true }, new short[] { 6350, 6247, -3893, 7448, -4197, 5129, 9236, -4116, 8570, -9012 })]
		[TestCase(new double[] { 0.51648564288229, 0.0751888514846511, 0.924092097638218, 0.396047616096236, 0.971126461388137, 0.871884101942128, 0.576961222373397, 0.934699055708339, 0.818557173860519, 0.627492345230418 }, new long[] { 6135, 8033, -697, 3587, -259, 6556, 4186, 5444, 6329, -9972 }, new long[] { -3155, 2201, 3946, -7081, 6883, 9162, -4453, 5271, 2811, 7658 }, new bool[] { false, true, true, true, true, false, false, false, false, false }, new int[] { 5167, 5356, -4703, -5238, 9326, 8315, -3053, 2518, -2290, -755 }, new int[] { -9056, -6207, -446, 8543, 4141, 8126, -2442, 5563, 1036, -9740 }, new bool[] { true, true, false, true, true, true, false, true, true, false }, new double[] { 0.744372799873526, 0.40110562248207, 0.655429669961068, 0.596067901978301, 0.242930385397249, 0.574358362506311, 0.345312269565329, 0.459271438633684, 0.179477731315176, 0.928418415099577 }, new int[] { 2216, 3027, -2436, -6432, 6715, 7360, 278, 6421, 7625, 6061 }, new bool[] { false, false, true, false, true, true, false, false, true, false }, new short[] { 5247, -587, 3120, -2592, 4356, 2920, 683, 7631, 3685, -7344 })]
		public void Any(double[] a, long[] b, long[] c, bool[] d, int[] e, int[] f, bool[] g, double[] h, int[] i, bool[] j, short[] val)
		{
			NKeyHash<double, long, long, bool, int, int, bool, double, int, bool, short> nKeyHash = new NKeyHash<double, long, long, bool, int, int, bool, double, int, bool, short>(UnderlyingHashType.Dictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<double, long, long, bool, int, int, bool, double, int, bool, short>(UnderlyingHashType.ConcurrentDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<double, long, long, bool, int, int, bool, double, int, bool, short>(UnderlyingHashType.SortedDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<double, long, long, bool, int, int, bool, double, int, bool, short>(UnderlyingHashType.HashTable);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());
		}

		[TestCase(new long[] { -3353, 9906, -6663, 8418, -1217, 2893, 1030, 9403, -4041, -7987 }, new double[] { 0.0161316082887964, 0.7910227192524, 0.0283258548138318, 0.166027125514125, 0.140232228739295, 0.995348959693382, 0.00776815694187216, 0.460489107510303, 0.189747717785532, 0.333879410910364 }, new long[] { 2646, -7263, 4970, -5158, -6489, 4130, -7338, 4035, 3653, 196 }, new long[] { -2839, -5412, 9328, 6995, -1398, -495, -214, -1011, -4424, -9971 }, new int[] { 9651, 8226, -2271, -9355, 898, -7448, 1408, -852, -4762, 8955 }, new double[] { 0.427438754321746, 0.655255663513791, 0.910079069393724, 0.367882827002501, 0.669007688140966, 0.195515457166133, 0.246850229449035, 0.924704150727347, 0.745467711121527, 0.732578694230215 }, new int[] { 233, 6994, -4249, 5760, 4850, 5734, 6490, -6429, 4718, 3299 }, new short[] { 121, 1167, -6364, -6231, -2974, 4418, 5007, 4327, 3942, -9039 }, new short[] { -7277, 3512, -1201, 4696, -8351, 4054, -3614, 1971, -6383, -5308 }, new long[] { -5431, 1291, 4078, 923, -206, -7341, 2477, 1966, -4207, 5162 }, new int[] { -3939, -2161, 4427, 1937, -1164, 7380, -529, 4433, -9666, 8960 })]
		[TestCase(new long[] { -1097, 609, -5448, 3949, 1929, 6719, -1803, 1053, 4112, -9202 }, new double[] { 0.467502929487966, 0.225932583318061, 0.997684202621544, 0.501411809353815, 0.436608942428887, 0.941517246394193, 0.854428255397095, 0.635540300344834, 0.698724988707679, 0.218386290696629 }, new long[] { -8057, -6958, -1464, 8778, 4898, 4883, 9083, 6860, -4137, -5732 }, new long[] { -5414, 1951, 1639, -5344, 5788, 3957, -3259, -9870, 8993, 3072 }, new int[] { 4460, -8575, 7853, -5003, -4186, -8457, -2115, -5599, -6794, 4 }, new double[] { 0.0146461483159317, 0.837990006356495, 0.0229566302257388, 0.798246207087415, 0.851011706446769, 0.293045124175514, 0.103699355900148, 0.288591678388692, 0.952564251587058, 0.852279768722262 }, new int[] { 7635, 1335, -4807, -153, 6210, 7397, 2878, 5298, 4238, 4773 }, new short[] { 2090, 6959, 3716, -9097, -92, -9481, -4812, -6459, 2966, 3356 }, new short[] { -3000, 4684, 3655, 5856, -6025, -2174, 1492, 5673, -2365, -71 }, new long[] { 1884, -9031, -8921, -8050, 5436, -6874, 6231, -1992, -1215, -1585 }, new int[] { -1337, 2585, 160, -1568, 7913, -6666, -6956, 9556, -3941, 6502 })]
		[TestCase(new long[] { -9325, 8533, 2804, -4305, 46, -7048, 7678, -665, -4126, -1613 }, new double[] { 0.295273188173432, 0.860236477041727, 0.383216772406929, 0.215566254321284, 0.144488844156493, 0.556123705839796, 0.794136168805014, 0.588391976239342, 0.273244687017633, 0.339110071463096 }, new long[] { -5713, 7178, 4754, -5447, -5304, 4412, -5475, -4774, 7942, -9358 }, new long[] { -5217, 1935, -383, 1131, -745, 3349, -1837, 5382, 1902, 2485 }, new int[] { -4553, -3101, -7864, -9601, -7489, 1457, -5078, -4150, -4458, -3207 }, new double[] { 0.372509893203392, 0.563771776186196, 0.70462602921977, 0.963775683177531, 0.610861453977815, 0.174707757390434, 0.188948586671124, 0.412674615817459, 0.0499660573201096, 0.781649372438737 }, new int[] { 8426, 2454, 1391, -4767, -6394, 3969, -2411, 6531, 5056, -460 }, new short[] { -7039, -9499, 9864, 2978, -8662, 7386, 5044, 4356, -7956, 3236 }, new short[] { -507, 8674, 9682, 1151, 3190, 3505, 7842, 341, 8913, -4239 }, new long[] { -428, 9908, 4383, 6268, 4058, 2991, 5505, 6901, 6792, -1460 }, new int[] { -6129, -1610, 792, 6000, -6167, -3049, 1409, -8885, 7938, 4829 })]
		[TestCase(new long[] { -1550, -578, -3788, -2237, -3858, 9751, 2770, -9758, 2041, 98 }, new double[] { 0.806367538779214, 0.862333770311593, 0.880889539085743, 0.46484913558925, 0.998442809562405, 0.152521941416209, 0.305782599517043, 0.179814328523266, 0.946032498938047, 0.417261281245044 }, new long[] { -8117, 8141, 7563, 3502, -632, -8896, -2117, -6317, -2680, -3759 }, new long[] { -7902, 6728, 2402, -5914, 7310, -9849, 3697, -3378, 128, 4306 }, new int[] { -9778, 5265, -5138, -3305, 2411, -3376, 771, -8503, 6032, -9217 }, new double[] { 0.0417509381853747, 0.390678981500994, 0.109630691869944, 0.479686839729402, 0.647404645871094, 0.515326178872644, 0.592871524203974, 0.635393888985456, 0.919749551880988, 0.251896653907325 }, new int[] { 1869, -911, 2920, -4197, -1997, 9396, -5155, 3532, 1985, 9818 }, new short[] { -647, 9493, 3467, -5385, -1875, -3384, 3281, 869, -8907, -7255 }, new short[] { 331, -3612, -2350, -3461, -4594, 4282, 4536, -7190, 1136, -2995 }, new long[] { -1707, -9008, -1773, -4909, -7562, 1132, -7653, 9057, 8691, 3013 }, new int[] { -8220, 7237, -490, 6212, 1429, -8658, 4345, 7577, -8529, -3666 })]
		[TestCase(new long[] { 7023, -9011, 1616, 5650, 4705, -4517, -8560, -3616, -9601, 3719 }, new double[] { 0.243044992090689, 0.101789828437283, 0.119778491146759, 0.24908318195915, 0.576381092228173, 0.41809691135683, 0.563371907250663, 0.41888032873109, 0.108862783344864, 0.849614786845453 }, new long[] { -5729, 4223, 2177, -1922, -9033, 3093, 6877, 1436, 5107, -5935 }, new long[] { 9936, 6957, -8659, -5195, -19, -2695, -626, 2575, 384, 6954 }, new int[] { -306, 5961, 8660, -5026, -1846, 9741, 4842, -5471, -5313, -6931 }, new double[] { 0.503676553491352, 0.298399651096389, 0.770057763331597, 0.223845369752424, 0.103154699831807, 0.140033149225653, 0.440506270826099, 0.176960727282316, 0.734266721519766, 0.0806372450108813 }, new int[] { -1396, 2, 1274, 6332, 3782, -2097, -9302, 7590, 5001, -5776 }, new short[] { 8987, 8690, 7992, -4777, -2700, -1692, 5562, -2794, 9923, -8776 }, new short[] { 8249, 2350, -3248, 2040, 3989, 3968, -8441, 6861, -7258, -2820 }, new long[] { 8493, -4165, 7889, -1228, -1648, 9689, -5311, -7671, 1190, -9748 }, new int[] { 9045, 7250, -474, -9536, -5920, 1381, -2025, 178, 7177, 3755 })]
		[TestCase(new long[] { -2761, -8393, -6384, 3462, -6636, 6252, -6747, 9232, -7655, 9812 }, new double[] { 0.317251993956627, 0.191698409240552, 0.742516930095161, 0.391113892845397, 0.28646663543138, 0.657679296870567, 0.0400575702265173, 0.461086953273549, 0.843564960567078, 0.380410761283902 }, new long[] { -6379, 3234, 6014, 9672, -7823, -9000, -7174, -3710, -2038, -7390 }, new long[] { -4005, 1378, 9683, -1014, 9940, 6888, -7779, -5571, -4590, 2097 }, new int[] { 6438, -4545, 9983, 1376, 3905, 5212, -7598, -8295, 4732, 925 }, new double[] { 0.529037605286128, 0.93764767932596, 0.665373989225074, 0.478485242220799, 0.506771889285544, 0.700157448509781, 0.279520910829083, 0.197080245798957, 0.564337738121086, 0.118180695976215 }, new int[] { 3427, 6962, 1271, 9733, 3818, 4965, -5849, -4134, -2118, -1159 }, new short[] { 933, 6372, -6186, -5226, 1168, 8165, 3250, -5361, -4231, -3036 }, new short[] { 8596, -8877, 1555, 7035, 2027, -2758, 8070, 114, 8849, -4061 }, new long[] { 1298, 8277, 3140, -6953, 8669, 9475, 4181, -9749, 7557, 8938 }, new int[] { 1062, 6535, 3822, -4107, 9990, 4206, 4939, -1465, 8399, 1968 })]
		[TestCase(new long[] { -9246, -9046, 8173, -5676, -6233, 2306, -4592, 4235, -2292, -3422 }, new double[] { 0.844768647963539, 0.701729609026448, 0.350735084317036, 0.0971444012118245, 0.877096075973053, 0.632806415032971, 0.161627223324788, 0.0383511381402384, 0.305168254908718, 0.584641998905987 }, new long[] { -6014, 3000, -2920, -3171, 5899, -7938, -2700, -4335, 7043, 7819 }, new long[] { 2300, -463, 1714, -3118, -4813, 345, -9894, -1182, 9278, -3636 }, new int[] { 4069, 9944, 2541, 980, -7955, 7027, -478, 1879, -1649, -2664 }, new double[] { 0.548736854246229, 0.708667843466936, 0.121542642415288, 0.335388457558764, 0.399209369625528, 0.387574362283374, 0.693652682795028, 0.567269310153681, 0.421141855614792, 0.0852465806925886 }, new int[] { -4991, 9742, 7190, -113, 4275, -2641, -7678, -9865, 6756, -2803 }, new short[] { 2551, 4414, -8511, 9739, 7622, -5960, -9540, 6098, -5214, 8871 }, new short[] { 2539, 5418, 7312, -290, -3154, 8126, -2893, -4993, 8896, 7433 }, new long[] { 6472, -1241, -9604, 7573, -8644, 4325, -7245, -7344, 6704, 4684 }, new int[] { 4707, -611, 5121, -8844, 4782, 6559, 2685, -7308, -915, -6054 })]
		[TestCase(new long[] { -2707, 7773, -3438, -449, -834, -410, -7569, -2517, -6957, 6147 }, new double[] { 0.0126237282588257, 0.86569542152141, 0.0618356396732087, 0.966164761207143, 0.536162896797137, 0.189670751890946, 0.701000931999181, 0.195648547353059, 0.91926587788354, 0.164857877960828 }, new long[] { -8714, 7802, 9392, 99, -5835, -6848, -9702, 6158, 4925, 285 }, new long[] { -4557, -5583, 5921, 4951, 141, 8697, -7801, 843, -1590, 1765 }, new int[] { 1896, 5271, 9612, -9442, 4432, 7393, -1848, 5798, 431, 989 }, new double[] { 0.12699277239246, 0.438642743713522, 0.215261980525806, 0.289359509613998, 0.132996445583644, 0.474443045665716, 0.919028883762205, 0.823075136553065, 0.26935938711714, 0.300711851241399 }, new int[] { -707, -3728, 2556, 2755, 706, 5836, -8607, -3714, -818, 2024 }, new short[] { -8403, -6823, 5503, -3380, 1400, -3986, 8189, 8836, 5665, -3230 }, new short[] { 4999, -5501, -4271, -6063, -2253, 6668, -9888, 134, 2291, -9346 }, new long[] { -9681, -4263, -4542, -7604, -7525, -4374, -7284, -3141, -149, 8595 }, new int[] { 6001, -8132, -3382, 8405, -605, 9362, 3268, 7685, 4385, 6645 })]
		[TestCase(new long[] { 1298, 9542, -9203, 8616, 1014, -5204, -9455, -1378, -4989, 4036 }, new double[] { 0.786339148313896, 0.562843976338787, 0.699640842014756, 0.426459802978886, 0.585352066711221, 0.792955603819785, 0.885969889762797, 0.655457252941773, 0.207289469990548, 0.288770744245858 }, new long[] { -6700, 1331, -1012, 7069, 767, 3132, 7879, -2678, 4540, -1617 }, new long[] { -6599, -7574, 5747, 5644, -646, -9224, -5058, -3160, 1380, 7678 }, new int[] { -4917, 4093, -8150, 5812, -7130, -5253, -2126, 8087, -3300, 3534 }, new double[] { 0.082217165307243, 0.00798851624503197, 0.677003312239891, 0.430549329812894, 0.667401247502957, 0.998359288088213, 0.527796937398518, 0.186232843523022, 0.392529655430713, 0.894052454686748 }, new int[] { -3085, 3221, 4079, 6627, 637, 3302, 5507, 8346, 9174, 932 }, new short[] { 917, 880, -8270, -3532, -9305, -795, -516, 3174, 4200, -3978 }, new short[] { -4740, 9791, -9376, -8993, -3261, -6758, -1115, -2862, -7701, -613 }, new long[] { 218, -8782, 8987, 3499, 764, 1860, -9985, -4778, -4823, -433 }, new int[] { -762, -473, 8911, 5766, -7381, 763, 8430, -2926, -2082, -5856 })]
		[TestCase(new long[] { 483, 7380, -476, -8170, 2621, -2877, 2599, 3073, -110, -2603 }, new double[] { 0.220905425595541, 0.418541518700561, 0.802498634812654, 0.4894531269043, 0.0356889274137509, 0.485062213840458, 0.594595061891989, 0.411464660620068, 0.785110515907924, 0.441635040771978 }, new long[] { -808, -5736, -2000, -5364, 6783, 5732, -9119, -5143, 8387, 5973 }, new long[] { -5190, -8188, 9218, 8153, 8901, 2836, 1693, 7158, -9121, -6356 }, new int[] { 9260, -3060, 5330, 7778, -4850, -9132, 3476, -876, 5052, 2915 }, new double[] { 0.943604455303217, 0.510089126187418, 0.568549076825636, 0.95425239156664, 0.747605272451232, 0.311041016742141, 0.469130973550086, 0.244429282957888, 0.252237395035214, 0.84442105649245 }, new int[] { -3757, -2256, 4685, 3915, -7411, -7392, -848, 7894, 886, -2123 }, new short[] { 8007, 4732, -2648, 2059, -428, -7747, -1067, 219, 9485, 5917 }, new short[] { -7742, 1756, -197, -4527, 7100, 4607, 440, -9864, -6797, 2681 }, new long[] { -6544, -3194, 2114, -6009, 7400, 1517, 2253, -8584, 5191, -7457 }, new int[] { 1715, 5580, 8236, -2823, 4907, -5859, -7148, 9310, -486, 2700 })]
		public void Forloop(long[] a, double[] b, long[] c, long[] d, int[] e, double[] f, int[] g, short[] h, short[] i, long[] j, int[] val)
		{
			bool[] found = new bool[9];
			bool allFound = false;
			NKeyHash<long, double, long, long, int, double, int, short, short, long, int> nKeyHash = new NKeyHash<long, double, long, long, int, double, int, short, short, long, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, double, long, long, int, double, int, short, short, long, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, double, long, long, int, double, int, short, short, long, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<long, double, long, long, int, double, int, short, short, long, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, double, long, long, int, double, int, short, short, long, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, double, long, long, int, double, int, short, short, long, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<long, double, long, long, int, double, int, short, short, long, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, double, long, long, int, double, int, short, short, long, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, double, long, long, int, double, int, short, short, long, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<long, double, long, long, int, double, int, short, short, long, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, double, long, long, int, double, int, short, short, long, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, double, long, long, int, double, int, short, short, long, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);
		}

		[TestCase(0.734682600821686, 0.910217876504277, -5577, 1203, -7381, -6637, 0.732927902477294, 8053, 0.499878950649816, -2481, 5027, 6943)]
		[TestCase(0.210132025280098, 0.33380106758969, 3518, -7373, 563, 2961, 0.587859920965442, 1128, 0.531056653489851, 501, 5392, -5707)]
		[TestCase(0.0701134270383573, 0.149392108036853, -642, -7083, 3576, -6959, 0.229999776571058, -2787, 0.51873590681643, -7300, -9112, -9966)]
		[TestCase(0.137723026395646, 0.185258309443136, -8477, 9487, -5346, 1459, 0.135153365850054, -229, 0.206726032405498, -1541, -5075, -2044)]
		[TestCase(0.0483089192064055, 0.765743487871133, 8649, -6147, 6221, -8960, 0.919758993629254, -5807, 0.140549129406246, -9868, -199, 9629)]
		[TestCase(0.700213556503977, 0.587160738924127, -5522, -3042, -7081, -2183, 0.328490480467906, -8495, 0.289450331725855, 3486, 9870, -3141)]
		[TestCase(0.57202231724375, 0.613441303192378, -3524, 9160, -2201, -4376, 0.00786559284099638, 2944, 0.903184669512876, -8597, -8050, 8260)]
		[TestCase(0.219516615485547, 0.037382128200206, 989, -663, -5695, 6694, 0.861089792503551, -7374, 0.695213082570216, -8107, -4515, 2909)]
		[TestCase(0.349117730441092, 0.787285747373144, -3146, 6317, -8111, -6578, 0.108335252901695, -2520, 0.772156675705759, 1791, 2411, -6045)]
		[TestCase(0.72813903062052, 0.961688648425829, 6393, 7187, 9971, 6855, 0.0783177456251894, 2602, 0.489702494577366, -3783, -7432, -7829)]
		public void Add(double a, double b, short c, int d, long e, long f, double g, int h, double i, short j, long k, int val)
		{
			NKeyHash<double, double, short, int, long, long, double, int, double, short, long, int> nKeyHash = new NKeyHash<double, double, short, int, long, long, double, int, double, short, long, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<double, double, short, int, long, long, double, int, double, short, long, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<double, double, short, int, long, long, double, int, double, short, long, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<double, double, short, int, long, long, double, int, double, short, long, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k));
		}

		[TestCase(0.938479434204511, 0.191962109502387, 0.552809259180356, 4642, 0.961764743533807, 0.72347658580331, -7180, 2598, -1664, -2964, 4773, -4929, -9698)]
		[TestCase(0.00167010817754553, 0.132575834697381, 0.852383958572701, -9673, 0.644091501200614, 0.15578777303723, -9232, 3178, -5316, 9489, -5344, -3778, 3072)]
		[TestCase(0.560744190384049, 0.909786497666401, 0.941848505261284, -7136, 0.85845309256504, 0.0498526781098231, -2944, -5658, 8417, 6132, -4199, -3076, 3366)]
		[TestCase(0.766225908774056, 0.169861828521761, 0.498399457195028, 3834, 0.489593636006859, 0.122988998947194, 2129, -1206, 6230, 4595, 5906, -776, 3902)]
		[TestCase(0.522498579473467, 0.570621749651908, 0.943699206665018, 4086, 0.217422051456488, 0.320072639882598, -1577, -3836, -6744, -5376, 3761, -4526, -133)]
		[TestCase(0.688828547340272, 0.900766583113357, 0.797995474095454, -8384, 0.325897144771133, 0.562364093755541, 3401, 9513, -2208, 7368, -6788, 848, -301)]
		[TestCase(0.109747620350564, 0.704547286361711, 0.213968349254675, 4983, 0.179992154324424, 0.146515899406055, 3639, -6733, 547, 5641, -4532, -5667, 1784)]
		[TestCase(0.969947224934561, 0.925034921581408, 0.360210193488845, 2069, 0.938723289379256, 0.810296416659978, -1638, 9924, -1316, 4114, 2832, 4616, -1921)]
		[TestCase(0.232968512099687, 0.791072290759102, 0.719402056056728, -7340, 0.702152713063244, 0.783163919478266, -6761, 4649, -5792, 4331, -8115, -1728, -8976)]
		[TestCase(0.541587141128996, 0.5916551442778, 0.330008344878446, -6769, 0.118652299101768, 0.524638793675526, 7281, 4732, 1848, 4900, 2310, 5720, 8594)]
		public void Upsert(double a, double b, double c, int d, double e, double f, long g, int h, short i, long j, long k, long val, long newVal1)
		{
			NKeyHash<double, double, double, int, double, double, long, int, short, long, long, long> nKeyHash = new NKeyHash<double, double, double, int, double, double, long, int, short, long, long, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<double, double, double, int, double, double, long, int, short, long, long, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<double, double, double, int, double, double, long, int, short, long, long, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<double, double, double, int, double, double, long, int, short, long, long, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k));
		}

		[TestCase(-8399, false, -8905, 7134, 0.759622205402526, -5830, false, -6200, 0.887576904561174, 0.268709275530982, 6528, 3325)]
		[TestCase(-4545, true, -7658, 7333, 0.667256692269471, 2810, false, -7921, 0.346868364301915, 0.772406965853836, -1341, -9247)]
		[TestCase(-5123, true, 4354, 437, 0.395216236540683, -4498, true, 4014, 0.88610204909281, 0.767057065277853, -9225, -9310)]
		[TestCase(6188, true, 6655, 732, 0.349492571479405, 1922, false, -8368, 0.297901617036155, 0.822400888345391, -1941, -1764)]
		[TestCase(-894, false, -7822, -4539, 0.844902641999024, -3198, false, -3848, 0.0572677119901719, 0.0171099328515632, 2259, -5501)]
		[TestCase(-185, true, 5893, 2250, 0.640669521708353, -7485, true, 112, 0.548378274100077, 0.0825774707284651, -8853, 5747)]
		[TestCase(6154, true, 5087, 5014, 0.730238123205601, -2971, true, -1571, 0.131836684947757, 0.30599357248563, -8667, -5127)]
		[TestCase(-6675, false, 7116, 921, 0.719508046153704, 4622, true, 5845, 0.266884634861203, 0.607910308804321, -9081, 2106)]
		[TestCase(6027, false, -1182, -6554, 0.0422343430305991, 7944, true, -2545, 0.0943533475950143, 0.321441068463699, -695, -3289)]
		[TestCase(1713, false, 1546, 4117, 0.277431923093941, -6167, false, -6305, 0.677594025003535, 0.551133496012135, -1073, -4287)]
		public void Delete(short a, bool b, int c, long d, double e, int f, bool g, long h, double i, double j, int k, short val)
		{
			NKeyHash<short, bool, int, long, double, int, bool, long, double, double, int, short> nKeyHash = new NKeyHash<short, bool, int, long, double, int, bool, long, double, double, int, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<short, bool, int, long, double, int, bool, long, double, double, int, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<short, bool, int, long, double, int, bool, long, double, double, int, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<short, bool, int, long, double, int, bool, long, double, double, int, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
		}

		[TestCase(8209, 1349, -2416, 0.234564456732275, false, 3877, -7014, true, 7795, true, 0.960405580681006, -1545)]
		[TestCase(-6922, -4573, 297, 0.0753150307924091, true, 7223, 8553, false, 9665, false, 0.902383908583961, 6162)]
		[TestCase(-7776, -9076, -4653, 0.829405376142545, true, -4691, 7439, false, -3050, false, 0.795336877366219, 4199)]
		[TestCase(6247, 7168, 4841, 0.983717429909724, false, 2030, -2083, true, -4525, false, 0.663422509871154, 6681)]
		[TestCase(5000, -1095, 3699, 0.602297314257499, false, 3980, -3654, true, 3301, true, 0.123413119988243, -2070)]
		[TestCase(-1468, -3603, -9122, 0.624413152516081, true, 476, -8494, true, -480, true, 0.26291634201208, 3127)]
		[TestCase(-7617, 8879, 6966, 0.381790844435706, true, -6941, 688, true, -2345, false, 0.0793521833044254, -2885)]
		[TestCase(1608, -4604, -5694, 0.648427710239043, true, -9198, -9101, false, 4700, false, 0.557146762757165, -8357)]
		[TestCase(1153, 5427, -7975, 0.749889683327586, false, 5725, -2837, true, -6353, false, 0.483207158503685, -4452)]
		[TestCase(7012, 8708, 9916, 0.512190690968274, false, -2486, -9723, true, -5189, true, 0.0440050913225883, -2428)]
		public void Remove(short a, short b, long c, double d, bool e, short f, int g, bool h, int i, bool j, double k, short val)
		{
			NKeyHash<short, short, long, double, bool, short, int, bool, int, bool, double, short> nKeyHash = new NKeyHash<short, short, long, double, bool, short, int, bool, int, bool, double, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<short, short, long, double, bool, short, int, bool, int, bool, double, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<short, short, long, double, bool, short, int, bool, int, bool, double, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<short, short, long, double, bool, short, int, bool, int, bool, double, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
		}

		[TestCase(-8965, 5690, 0.459518733648359, 1927, -8497, false, 0.173449791582976, 1035, 5729, 8757, 0.797750200982089, 0.0239851726330748)]
		[TestCase(-9116, 654, 0.204760559464228, -2812, -3362, true, 0.841591827031966, 7390, 4547, 4451, 0.441346066278101, 0.861421208298496)]
		[TestCase(7372, 8442, 0.185107173484334, -6784, -7853, true, 0.890473197163303, -8311, -7771, -9841, 0.460495258895911, 0.252052543802211)]
		[TestCase(8322, -1652, 0.918268887753724, -7874, 293, false, 0.592062010239839, -2587, 2580, 7872, 0.391783593404937, 0.227317058121467)]
		[TestCase(6335, 1238, 0.441612247117614, 6460, 8493, true, 0.260605158871322, -3417, -3135, 1961, 0.727704746987533, 0.152898164071561)]
		[TestCase(8981, -9744, 0.444508183023198, -8463, -9049, true, 0.91260653869836, -9273, -8554, 9053, 0.443217454684534, 0.914482019801849)]
		[TestCase(2910, 4706, 0.354921195821334, -5295, -7388, false, 0.232383917194039, 9499, 608, 9154, 0.343930841583726, 0.545370346189183)]
		[TestCase(-4637, -8651, 0.159654473960239, -6861, 4944, false, 0.908850823952281, -3638, 3793, 5306, 0.157142720258396, 0.501938761445665)]
		[TestCase(-9045, 305, 0.323155827970782, 8312, 9620, false, 0.155105246303186, 7281, -7625, 542, 0.177549670998729, 0.189380204858901)]
		[TestCase(1991, -9490, 0.19854475706748, -4550, -2685, true, 0.622490982814921, 9825, 3375, 7981, 0.808656725012072, 0.980053818309705)]
		public void ContainsKey(short a, int b, double c, int d, long e, bool f, double g, long h, short i, long j, double k, double val)
		{
			NKeyHash<short, int, double, int, long, bool, double, long, short, long, double, double> nKeyHash = new NKeyHash<short, int, double, int, long, bool, double, long, short, long, double, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<short, int, double, int, long, bool, double, long, short, long, double, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<short, int, double, int, long, bool, double, long, short, long, double, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<short, int, double, int, long, bool, double, long, short, long, double, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
		}

		[TestCase(4951, -3665, 9878, 0.174893778830252, true, false, -1466, 0.74099561187485, 7796, 0.970274269101338, true, 4436)]
		[TestCase(8656, 2727, 9046, 0.936995301831977, false, false, 6662, 0.148555615986025, 4132, 0.343102009661078, false, -5493)]
		[TestCase(-8668, -5713, 6403, 0.993559443854522, false, false, 2223, 0.746606576138458, 6757, 0.583279870722108, true, -9019)]
		[TestCase(5173, -1047, -6226, 0.188949251169781, false, false, -8195, 0.5834513798279, -6030, 0.567126595213603, false, -1850)]
		[TestCase(-6543, -4243, 4744, 0.412373550893913, false, false, 8172, 0.404475104717759, 9094, 0.768671747654989, false, 1767)]
		[TestCase(3191, -1337, -1226, 0.592453460484954, false, true, 7678, 0.349581541656322, -7769, 0.903368959624026, false, 3905)]
		[TestCase(9542, 2883, 3521, 0.638961607887857, false, true, -9462, 0.49939080025041, -5872, 0.412754540523866, true, -9708)]
		[TestCase(1202, -6023, 4534, 0.798946520685659, true, false, -8115, 0.990021195258024, -3215, 0.600253457948683, true, -9211)]
		[TestCase(2579, -45, -5512, 0.387785853067313, true, true, -4079, 0.269423249303095, -7808, 0.0419870470846012, false, -2486)]
		[TestCase(-2742, -4605, -6967, 0.176315090235469, true, true, -2359, 0.246859737786865, 2246, 0.424175739951514, false, -6793)]
		public void Clear(int a, long b, short c, double d, bool e, bool f, short g, double h, int i, double j, bool k, long val)
		{
			NKeyHash<int, long, short, double, bool, bool, short, double, int, double, bool, long> nKeyHash = new NKeyHash<int, long, short, double, bool, bool, short, double, int, double, bool, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j), 0);

			nKeyHash = new NKeyHash<int, long, short, double, bool, bool, short, double, int, double, bool, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j), 0);

			nKeyHash = new NKeyHash<int, long, short, double, bool, bool, short, double, int, double, bool, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j), 0);

			nKeyHash = new NKeyHash<int, long, short, double, bool, bool, short, double, int, double, bool, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j), 0);
		}

		[TestCase(true, true, 6324, 0.547992685599249, 0.116769778596596, true, 8098, 362, true, -2977, false, -1900)]
		[TestCase(true, true, -5035, 0.730235237502603, 0.218223566756688, false, -1459, -5903, false, -8717, false, 1962)]
		[TestCase(true, false, -795, 0.921233137101509, 0.685925330820459, false, -4783, 4522, false, -2071, true, -7944)]
		[TestCase(true, true, -7397, 0.0609922102005185, 0.519188434593002, true, -2066, 4655, true, -4599, false, 7825)]
		[TestCase(true, true, -6825, 0.832386087082506, 0.209673786633496, true, -4204, -199, false, -5637, true, 6236)]
		[TestCase(false, true, 6643, 0.705354630344247, 0.0903498237441992, true, -7094, 1448, false, -7090, true, -2316)]
		[TestCase(false, false, 3712, 0.951244869712389, 0.667439929054789, true, 8982, 4268, false, 1378, true, -8797)]
		[TestCase(true, false, 329, 0.454532902899446, 0.106686065954476, false, 5350, 1492, false, -3635, true, 708)]
		[TestCase(true, true, 2848, 0.939034881041867, 0.124732256925075, false, 1912, 5892, true, 5489, true, 6871)]
		[TestCase(false, false, 6451, 0.764074176905711, 0.268925035497604, true, 583, 443, false, 5441, true, 3238)]
		public void Get(bool a, bool b, long c, double d, double e, bool f, short g, short h, bool i, long j, bool k, long val)
		{
			NKeyHash<bool, bool, long, double, double, bool, short, short, bool, long, bool, long> nKeyHash = new NKeyHash<bool, bool, long, double, double, bool, short, short, bool, long, bool, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<bool, bool, long, double, double, bool, short, short, bool, long, bool, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<bool, bool, long, double, double, bool, short, short, bool, long, bool, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));

			nKeyHash = new NKeyHash<bool, bool, long, double, double, bool, short, short, bool, long, bool, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k));
		}

		[TestCase(true, -9796, 1773, true, 9465, -6269, false, 0.12504579924282, 4967, true, -3300, 0.768199341729376)]
		[TestCase(false, -9929, -3885, false, 5780, -1045, true, 0.909841066650041, 7709, true, 4911, 0.434010728464467)]
		[TestCase(true, -1357, -1664, false, 3195, 6916, false, 0.969364895005415, -8615, true, 6707, 0.258779143103761)]
		[TestCase(false, 3925, 976, true, -1992, 3614, true, 0.520569465831187, -2884, true, 7077, 0.374376062943775)]
		[TestCase(false, 3927, -9097, true, 2346, -2810, false, 0.948216812661019, -4708, false, 6975, 0.541198449461348)]
		[TestCase(true, -9073, -694, true, -5491, -2687, true, 0.463151161774598, -6637, false, -6881, 0.0927505442373224)]
		[TestCase(true, 4334, 189, false, -8661, -5498, false, 0.286524471494613, 1564, false, -4631, 0.963392743358106)]
		[TestCase(true, -18, -2959, true, 5115, 7742, true, 0.107752584436793, 6949, false, -9072, 0.354103529525038)]
		[TestCase(false, -9778, -4095, true, 9969, -2184, false, 0.010182659146461, 810, true, -9009, 0.90060250829002)]
		[TestCase(true, 7716, 7625, false, -8470, 1245, true, 0.72737355936662, 5557, true, -7963, 0.726301511156513)]
		public void TryGetValue(bool a, long b, int c, bool d, short e, short f, bool g, double h, short i, bool j, short k, double val)
		{
			double fetch;
			bool b1;
			NKeyHash<bool, long, int, bool, short, short, bool, double, short, bool, short, double> nKeyHash = new NKeyHash<bool, long, int, bool, short, short, bool, double, short, bool, short, double>(UnderlyingHashType.Dictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(double));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<bool, long, int, bool, short, short, bool, double, short, bool, short, double>(UnderlyingHashType.ConcurrentDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(double));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<bool, long, int, bool, short, short, bool, double, short, bool, short, double>(UnderlyingHashType.SortedDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(double));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<bool, long, int, bool, short, short, bool, double, short, bool, short, double>(UnderlyingHashType.HashTable);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(double));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);
		}

		[TestCase(new short[] { 8596, -8236, -4239, -6250, 6721, -4835, -1542, 6967, -1008, -971 }, new double[] { 0.859795385440716, 0.869926323122311, 0.00585947186027629, 0.954742856302645, 0.0313352877420072, 0.285204513596932, 0.0446488377846074, 0.31895145090248, 0.5762224656419, 0.713635217730717 }, new long[] { 8183, 1377, 9529, -9812, 3667, 8505, 9148, -152, 4141, -6834 }, new int[] { -5395, 3891, 7931, 6507, -7806, 9764, -4513, 5510, 7824, 393 }, new short[] { -8419, -4931, -4465, 1243, -7410, 6747, -4498, -8040, -9663, 9200 }, new short[] { 6931, -2970, 1582, -4486, -7065, -2780, -7766, -4426, 80, 8214 }, new short[] { -3985, 8608, -7173, -4172, -5574, -6695, 9465, -6390, 6901, -9137 }, new double[] { 0.0108988340994803, 0.269120973660201, 0.427694314824275, 0.0565358754510693, 0.63464758807544, 0.655812336437317, 0.292166712829921, 0.414320357802473, 0.879863602984633, 0.845989514070558 }, new long[] { 3004, 7189, -487, 4940, -3767, 7573, -7690, 2419, 3574, 4973 }, new short[] { 7531, 9911, -4569, 9608, -5619, -7029, -7757, 9706, -3180, 9283 }, new double[] { 0.864106951683809, 0.094644895798827, 0.252866444295676, 0.973723254619969, 0.94915602772923, 0.577506545734362, 0.92377915090126, 0.522617469785091, 0.640982434917699, 0.490854282160687 }, new short[] { -8623, 3945, -2023, 3160, -4788, -1176, -902, -2114, 9594, -3149 })]
		[TestCase(new short[] { -9003, -2953, 33, -8071, -6670, -9693, 9951, -1055, 6750, -277 }, new double[] { 0.543709672309323, 0.306794706874897, 0.0733573423108819, 0.915628681851378, 0.981882562386749, 0.555612277498288, 0.60666258056027, 0.501878670184817, 0.797880509308484, 0.734087797223631 }, new long[] { 9097, 1856, 9599, -6241, 3597, -6413, 1936, 2268, 4398, 5555 }, new int[] { 3872, 4356, -9886, 9967, 8288, 235, 1859, -6869, 6145, 8676 }, new short[] { 1597, -468, 3700, -6902, 8941, 5239, 2478, -336, 3523, 4097 }, new short[] { 6689, 9059, 1927, -5086, -2247, -860, -2553, -3724, -1670, 9741 }, new short[] { -1630, -2315, 4545, -8803, 5849, 6516, -3975, -8500, -9975, -597 }, new double[] { 0.962636062857991, 0.450183433224532, 0.694592841758669, 0.863992755237963, 0.154220467970809, 0.478366589862093, 0.907759113194309, 0.825154867873134, 0.240763194039819, 0.917925252540934 }, new long[] { 1107, -7726, 8744, -9698, 8864, 4812, -7570, 5198, 2216, -849 }, new short[] { -7210, -4415, 4799, 6402, 308, -6086, 4985, 2505, -2752, -7573 }, new double[] { 0.460808664774899, 0.549034827644487, 0.482016448621646, 0.206066870226556, 0.742278073328677, 0.384335021201677, 0.258403967254983, 0.732393359640796, 0.0914512132720329, 0.909236669032479 }, new short[] { 983, 943, -8539, -29, -1364, -3903, -1060, 4244, -7669, -8961 })]
		[TestCase(new short[] { 4088, 824, -718, 873, -3386, 3668, 4203, 7487, -3028, 9170 }, new double[] { 0.729081835005936, 0.282464838252619, 0.462812411348714, 0.119492216557028, 0.457116587766035, 0.00632443977814375, 0.631619761526408, 0.731184263588481, 0.272754925895834, 0.558942019734039 }, new long[] { -355, -2218, 3369, 4031, 8165, 1845, -5875, -5170, -2231, -5786 }, new int[] { 4973, -9258, 176, -3790, -1662, 8390, -8300, 8766, 7507, -8821 }, new short[] { 3482, -2320, -2322, -7341, -6396, -4664, -8311, 9069, -9170, -1491 }, new short[] { 3463, 4315, -1210, 1150, 1392, -3692, 7454, 5249, 2706, 4767 }, new short[] { -455, -625, -279, -7240, -5801, 3840, 5472, -6952, 4052, 750 }, new double[] { 0.921380650215494, 0.693262789255596, 0.855780760690468, 0.213897578052197, 0.884782484678916, 0.0982577866400861, 0.00521743623782761, 0.535605610597695, 0.521440019608215, 0.641579199881097 }, new long[] { 158, -4945, -5998, 9258, 748, -9340, 1950, 9024, 4816, -7969 }, new short[] { -9062, -3550, -3939, -7259, 1632, -5890, 7958, -5081, 8459, -237 }, new double[] { 0.493074063441285, 0.932029696615427, 0.25086052028968, 0.503880103819016, 0.50405641296136, 0.97993046835993, 0.85999789408408, 0.225588127144421, 0.672762304392067, 0.471372921704954 }, new short[] { -3796, -3256, -5178, 9874, -5389, -5509, -4625, 461, 2009, -6460 })]
		[TestCase(new short[] { -8109, 6447, -1770, 2023, -185, 1978, -2194, 4375, 2644, 3586 }, new double[] { 0.200305831711882, 0.759307031873291, 0.612598420406039, 0.033322896823903, 0.148505136439812, 0.575873025029839, 0.00185166718524493, 0.696152535591345, 0.458910078955307, 0.557501779663145 }, new long[] { -6541, -2560, -4429, -4610, 5826, 4192, -8371, -3814, 8129, -2856 }, new int[] { 8734, -2501, 2907, 4920, -2127, 3413, 410, 2993, -9736, 8101 }, new short[] { 1793, -7174, 1866, 9867, -4578, 1016, 4490, -5844, 6904, 3092 }, new short[] { -5546, 1450, -8716, -9139, -9917, 4449, 877, -7159, 6196, 5620 }, new short[] { 350, -8378, 6244, -4497, 4850, 6507, -7721, 7330, 2793, -443 }, new double[] { 0.0553308921192451, 0.352155964985562, 0.683006056436806, 0.55378671109387, 0.9678259692005, 0.0316894892750725, 0.778625465826423, 0.285074504690745, 0.998407057951394, 0.240487748868991 }, new long[] { 9701, 7472, -720, -4961, -7308, -2714, -3784, 2048, 4839, 3422 }, new short[] { -7463, -2429, 6796, -5357, -2248, 173, -3420, -3634, -4982, -1086 }, new double[] { 0.43694956946976, 0.857991310701701, 0.568048201300226, 0.367438736542798, 0.599289676919249, 0.870483251693884, 0.889522255346888, 0.510360946650785, 0.0751687279321108, 0.972361829118972 }, new short[] { 8876, -4823, -7127, 1386, 5918, 2877, 2340, 1207, -7188, -2433 })]
		[TestCase(new short[] { 293, 229, -7507, 9370, -2978, 3535, 245, -981, -6675, -816 }, new double[] { 0.702725149087014, 0.460360549139027, 0.0342198722223844, 0.552751581441961, 0.803538179399231, 0.127130562033099, 0.305609970961516, 0.0965352491925169, 0.65260334715834, 0.264040924266 }, new long[] { -505, 6007, 544, 5392, 4544, 7358, -5301, -4589, -1277, 4873 }, new int[] { 7831, 5371, -6445, 7449, 8618, 8508, 4668, 1989, -9671, 8448 }, new short[] { -2835, -1227, -3116, 2319, -4606, -329, -5507, 1816, 5315, 3375 }, new short[] { -3234, 410, 8154, 7529, 8071, 4285, 9683, -2900, -5173, -338 }, new short[] { -1162, -5163, -9703, -1549, 1350, 8681, -4346, -6765, 2434, 7560 }, new double[] { 0.393704866242458, 0.706118007519337, 0.0801372346841438, 0.73011584520811, 0.905852330804734, 0.0361160384659264, 0.456229615237671, 0.911248100880183, 0.499992234399539, 0.243722307143604 }, new long[] { 2867, 2881, 94, 5346, -1891, -2577, 7215, -3975, 9377, -5665 }, new short[] { 8824, -2429, -2836, 666, -387, -7671, -1523, 8432, -9030, -3289 }, new double[] { 0.200871620886434, 0.0629003593059724, 0.969093618434432, 0.887745983380706, 0.275106781756089, 0.632155454080624, 0.440369697958403, 0.17764776394593, 0.970662477878231, 0.867503674173496 }, new short[] { -4838, -8539, 7098, 9950, 6793, 5955, 4741, -5050, -9657, -6070 })]
		[TestCase(new short[] { -8533, 9628, -6143, -1898, 8735, -9694, -3040, 936, -5009, 5788 }, new double[] { 0.61230091686002, 0.534580234221453, 0.86279456450734, 0.164483319578917, 0.0428506862571699, 0.580464923558973, 0.67497396453981, 0.616960209615976, 0.492221756601809, 0.773269414796154 }, new long[] { 8613, 3663, -3389, -7971, 9172, 7364, 470, -2787, 3871, 3655 }, new int[] { -2413, -6472, 8090, 7039, -4755, -5611, 7401, 1280, 9017, -4801 }, new short[] { -4315, 7870, 8561, -6374, -4895, 4468, -5795, 3808, 9093, -4814 }, new short[] { -7542, -7596, 5104, -5123, -4685, -2197, 3018, -8171, -1072, -8628 }, new short[] { -166, 9745, 7063, 1334, -1797, -1281, 2599, -9783, 8044, 6468 }, new double[] { 0.710363576985134, 0.110930519695827, 0.66602438579594, 0.232330845777099, 0.489050949220104, 0.037185846379579, 0.755046405715424, 0.149313154699892, 0.846194141938441, 0.235191570704426 }, new long[] { 3161, 6661, -1882, -1312, 1199, -4815, -1577, 3214, 1726, 7441 }, new short[] { 1369, 5573, -7646, 7647, 5363, -4062, -9192, -2771, 5421, 6384 }, new double[] { 0.0934569878007551, 0.199401341005881, 0.788192751253113, 0.131301895310777, 0.548881710296907, 0.0119077484178859, 0.454089209648822, 0.52290233295546, 0.754761384685878, 0.228511660000548 }, new short[] { 2700, 32, -5095, -5775, -1791, 3171, 1629, -1623, -9863, -6981 })]
		[TestCase(new short[] { -9702, 9384, -1510, -9395, -4900, 8632, 9864, 5671, -717, -6155 }, new double[] { 0.996833266223238, 0.393619505871841, 0.378203357280327, 0.0269321152134482, 0.141734582903671, 0.458695006770405, 0.0448906314768319, 0.274552535393533, 0.885485312382451, 0.548049437137344 }, new long[] { 6102, 7963, 8119, -2843, -5258, -8661, 669, 8128, -560, -7806 }, new int[] { 4307, 2430, -2906, 2404, 6088, -7515, 5498, 5160, 7526, 2344 }, new short[] { -9626, 3409, -8823, 1251, -5365, -5170, -7531, -5633, -8609, 9033 }, new short[] { 2273, -3860, 666, -825, -3084, -7667, -8733, -8666, 5861, -6237 }, new short[] { -2036, -8262, -3766, -2910, -464, -2493, -9220, 5159, -5549, -9648 }, new double[] { 0.683755337579062, 0.286859330854779, 0.398197158425207, 0.268267945977053, 0.529417776749198, 0.134664443384234, 0.839433618280773, 0.34340961945402, 0.12612763937848, 0.995603302491644 }, new long[] { 8868, -3695, 6739, 404, -81, -1830, -8235, 7918, -4510, 3756 }, new short[] { -8780, 4165, 9297, 3765, -5618, 8635, -2823, 4085, -8283, 7126 }, new double[] { 0.202493942436992, 0.365427271167481, 0.995792044790365, 0.0519279609676115, 0.267986413681873, 0.32683799663877, 0.908740482250573, 0.265082122881469, 0.929288305774931, 0.211091321525672 }, new short[] { -4456, 4396, 8809, 5949, -5107, -8340, -5003, 5828, 7170, -8632 })]
		[TestCase(new short[] { -4256, -7139, -329, 692, 9131, 9508, -3560, 4197, -9014, 1951 }, new double[] { 0.775852609321406, 0.135122228476741, 0.257618732870379, 0.269765312909039, 0.793109360054652, 0.578041746550259, 0.319423360433161, 0.785066168655207, 0.252237795038259, 0.169096286021684 }, new long[] { -5, 6461, 9332, -8731, -1785, -3178, 5354, -6651, -1126, -7277 }, new int[] { 3639, 1347, 6914, -9650, 1384, -8808, 7637, -776, -8092, -4149 }, new short[] { -9901, -6022, -5682, -3366, -1295, -7158, -755, 3414, -9910, 3330 }, new short[] { 5270, -704, 783, 3788, 1372, -718, -6473, -1597, -7520, 2310 }, new short[] { -5845, -6908, -4675, 8261, 8311, -5829, -4212, -5195, 4010, 4671 }, new double[] { 0.696129503052742, 0.858255871971257, 0.689736811765347, 0.959722688402851, 0.164202399628331, 0.300875778450107, 0.60722654620522, 0.634993901306295, 0.62813624862029, 0.268670623315811 }, new long[] { 7576, -8059, -6739, 5542, -2548, -5654, -9435, -6872, -1023, -7896 }, new short[] { 7663, -764, -3254, -403, -8303, 7006, 8651, -3945, -1678, -5464 }, new double[] { 0.852676979197504, 0.222059825538685, 0.970210762680606, 0.270805171816985, 0.970428652116297, 0.905278444711714, 0.775021988793752, 0.57947101564122, 0.525246698188245, 0.267766027370359 }, new short[] { 7136, 826, 5839, 7104, 4732, -7784, 9829, -218, 811, 3967 })]
		[TestCase(new short[] { -6393, -7338, 5826, 1907, 7007, -5312, 420, -5800, 7497, -3722 }, new double[] { 0.368270142175383, 0.304505140196767, 0.218928433591001, 0.401369810756934, 0.415993644118306, 0.656787661210069, 0.126782582200497, 0.892193853804932, 0.806699748526653, 0.467273845554923 }, new long[] { -1155, -1025, 2621, -6378, -5033, -3161, 3395, -360, 4862, 9480 }, new int[] { 7175, -1129, 5242, 4353, -9069, 4392, -1386, -2503, -1591, 4720 }, new short[] { -2314, 1301, 4090, -5771, 7989, 1046, -3551, -2187, -1214, -8401 }, new short[] { 9677, -8012, 3647, -8532, -4875, 4630, 39, 2206, -3057, 169 }, new short[] { 1291, -9218, -664, 8016, -899, 8494, 847, 25, -2901, 3926 }, new double[] { 0.226101332449401, 0.751974284067738, 0.471781649380821, 0.0706284228109887, 0.0830045156567378, 0.877108348941947, 0.744167457215566, 0.419673692164791, 0.281539802570613, 0.69597983159869 }, new long[] { -9608, -4416, -9144, 3264, 9801, 5188, 5221, 3776, -770, -3701 }, new short[] { -5646, 6406, -9444, 8237, -6569, -3094, -8032, 6073, 5126, 9493 }, new double[] { 0.00996374479027639, 0.821131704291856, 0.0357449911701237, 0.742900484587485, 0.853779599468121, 0.231965064644797, 0.627567138349436, 0.611767573101338, 0.990306403483407, 0.379073679158033 }, new short[] { 9747, -8353, -3423, 3021, -220, -4290, 9924, 6069, 8213, 3911 })]
		[TestCase(new short[] { -6726, 7070, -9203, -9199, -426, -1884, 4484, 1197, 7982, 4754 }, new double[] { 0.778788745765942, 0.940464256769262, 0.663317777059655, 0.306804167715276, 0.686016086808413, 0.198378137870868, 0.243389359788685, 0.299839700711816, 0.809484152500277, 0.758173486570908 }, new long[] { -7361, -7012, 3969, -8350, -3449, -7291, -168, -2467, -1541, 7719 }, new int[] { -3020, -4103, 7859, -8783, 6221, -6870, 5626, 9914, -4715, -1039 }, new short[] { 154, -8645, 4252, -4948, 2005, -9060, -1620, -9559, 9300, -4187 }, new short[] { -9157, 3928, 9879, -6948, 1273, -9713, -6898, 9145, 4248, -3133 }, new short[] { 8283, -3046, -7260, -9736, -2224, -320, -9049, 2050, -85, 591 }, new double[] { 0.417003622007092, 0.247622618567023, 0.0356266349719961, 0.361457365733319, 0.25046479713659, 0.0641955822073834, 0.436724814789707, 0.445960566609148, 0.482135995981347, 0.280569881331441 }, new long[] { 4327, -608, -1769, -7353, 6878, 3050, -3984, 4808, -58, 5935 }, new short[] { -9971, 6480, -4333, 8417, 676, -6798, 8614, 3989, 7275, -7673 }, new double[] { 0.999470851383857, 0.816435960501635, 0.526278951450381, 0.435499352140119, 0.87360802193806, 0.794442638659125, 0.660805944661054, 0.632573580663918, 0.902068122710133, 0.499490578891472 }, new short[] { 1551, 4180, -495, -1361, 2538, -1106, 8721, -9906, -6616, 4723 })]
		public void Count(short[] a, double[] b, long[] c, int[] d, short[] e, short[] f, short[] g, double[] h, long[] i, short[] j, double[] k, short[] val)
		{
			NKeyHash<short, double, long, int, short, short, short, double, long, short, double, short> nKeyHash = new NKeyHash<short, double, long, int, short, short, short, double, long, short, double, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0]), 9);

			nKeyHash = new NKeyHash<short, double, long, int, short, short, short, double, long, short, double, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0]), 9);

			nKeyHash = new NKeyHash<short, double, long, int, short, short, short, double, long, short, double, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0]), 9);

			nKeyHash = new NKeyHash<short, double, long, int, short, short, short, double, long, short, double, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0]), 9);
		}

		[TestCase(new bool[] { true, false, false, true, true, true, false, false, true, true }, new short[] { 6767, 9950, -5615, -4152, -3022, 7027, -4119, -8215, -5520, 8521 }, new bool[] { true, false, true, true, true, true, true, false, true, true }, new long[] { 6098, 6232, -2678, 6806, -7461, -7811, -6983, 4538, 27, 9201 }, new int[] { 4918, -7606, 4888, 300, -627, -7842, -405, -5282, -5116, -7740 }, new int[] { 6414, 4768, 7328, -5852, -5861, -908, -1344, 1772, -6219, -7680 }, new double[] { 0.0687117847002632, 0.978060476006037, 0.219403138020729, 0.445667954834955, 0.863259274914516, 0.0267327604939848, 0.631552566602618, 0.378860446335217, 0.165436609259544, 0.239473034739249 }, new bool[] { true, true, true, false, false, false, false, false, false, true }, new double[] { 0.347641706628558, 0.671438753451891, 0.0365152852779791, 0.717187288551213, 0.725330302363881, 0.0664866864990847, 0.945181380931838, 0.158719696178436, 0.633479297456089, 0.672317748736738 }, new bool[] { true, true, true, false, true, true, true, false, true, false }, new bool[] { false, false, false, false, false, false, false, true, false, true }, new long[] { -8569, -9705, -2704, 1716, 5365, -2054, 8830, 44, 4406, 5934 })]
		[TestCase(new bool[] { false, false, true, false, true, false, false, false, false, false }, new short[] { 209, -8312, 5326, 5639, -7462, -5063, 2020, -9361, -3902, -567 }, new bool[] { true, false, false, true, true, true, false, true, true, false }, new long[] { 6525, -2039, 1569, 7098, -2793, -9929, -2890, 1545, -1163, -4521 }, new int[] { -5505, 8964, -5393, 2296, -4285, 9741, -5032, 1655, -819, 429 }, new int[] { 5924, 8192, -6052, -5024, 7617, 4780, -3174, 8160, 7844, 8017 }, new double[] { 0.941028959556031, 0.0768965422533902, 0.585206681203659, 0.878252275697073, 0.585986877598794, 0.112461480364418, 0.505863172703359, 0.911349027376319, 0.421660652114852, 0.123365117760079 }, new bool[] { true, false, true, false, false, true, false, true, true, true }, new double[] { 0.413615545916192, 0.614609042468764, 0.493128992846761, 0.0956686311846919, 0.697877141040693, 0.916642073968724, 0.200654399674691, 0.329725076132326, 0.974049886210845, 0.621272994494658 }, new bool[] { true, false, true, true, false, false, false, false, false, false }, new bool[] { false, false, false, false, true, true, false, false, false, true }, new long[] { 2536, 6489, -2871, -4428, -254, -3471, 1675, -209, -6391, 3386 })]
		[TestCase(new bool[] { true, false, true, true, false, false, false, false, true, false }, new short[] { 2089, 5202, -241, -2431, -7350, -8466, -930, -6849, -689, 8505 }, new bool[] { true, false, false, false, true, true, false, false, false, false }, new long[] { 1280, 7469, -6566, -2809, -4771, -3896, -2006, -2784, 7489, -6274 }, new int[] { -1321, -4590, -632, 8053, -3822, 7332, -3267, 9559, -7077, -1786 }, new int[] { 7458, -1474, -9518, -4898, -8552, 7550, 6963, 7531, 6118, 2468 }, new double[] { 0.352942987975172, 0.932156044026909, 0.995541613546918, 0.691606915877949, 0.535093914035286, 0.730968287089359, 0.5885084772429, 0.12840824021418, 0.116993039900899, 0.827307326173087 }, new bool[] { true, false, false, false, false, false, true, false, true, false }, new double[] { 0.50110216229274, 0.112948371150041, 0.260404450940157, 0.642959400379546, 0.13352096226696, 0.137741069373554, 0.849489814066091, 0.916609418539614, 0.28717053555286, 0.383845788605439 }, new bool[] { false, true, true, false, true, true, false, true, false, true }, new bool[] { false, false, true, false, true, true, false, true, true, true }, new long[] { -3765, -1539, -7503, 3563, -7552, -5199, 3434, -2948, 1161, -2052 })]
		[TestCase(new bool[] { true, true, true, true, false, false, true, false, false, true }, new short[] { -8966, 5782, -8847, -6520, 6991, -4141, -4961, 8831, 8183, -2933 }, new bool[] { true, false, false, true, false, false, false, true, false, true }, new long[] { 6599, 8445, -5626, 9404, 3927, 2125, -2660, -7441, 8966, 1597 }, new int[] { -5154, -7772, -4022, 5478, 3882, 450, -2691, 9016, 6571, 6588 }, new int[] { 9760, 4602, -1133, -5904, -1941, 5535, 378, -4002, 3219, -3269 }, new double[] { 0.755559876913, 0.661365224822129, 0.903252535454581, 0.852608689038366, 0.159694858435399, 0.129286639918241, 0.570482776300275, 0.0873412471671315, 0.477518714255429, 0.243341477701134 }, new bool[] { true, false, true, false, false, true, true, false, true, true }, new double[] { 0.668436192287335, 0.447447592600923, 0.048003394644709, 0.299255919782098, 0.60524153597897, 0.0998506742063214, 0.478997687566559, 0.0138972732303186, 0.567347925420547, 0.919626015201037 }, new bool[] { false, false, false, true, true, true, false, false, true, true }, new bool[] { true, false, false, true, true, true, true, false, false, true }, new long[] { 9418, -7201, -948, -7771, 3361, -3837, 2267, 2079, -5052, -8802 })]
		[TestCase(new bool[] { true, true, true, true, false, true, true, false, true, true }, new short[] { 3499, -2808, 5295, -4351, 1950, -2192, 9481, -744, -2084, 4823 }, new bool[] { false, false, true, false, true, true, true, false, true, true }, new long[] { 9349, 2081, -6021, 1088, 8290, -2090, 5161, 8307, -1414, -9106 }, new int[] { -5861, -2888, 2177, 1269, 6895, 2228, -2497, -6595, 276, -4444 }, new int[] { -3319, -6987, -5834, 123, 3937, -4294, 2726, -550, 2184, -5828 }, new double[] { 0.244317547997608, 0.301606086688864, 0.437615503295146, 0.988876710640675, 0.562701426242805, 0.070906387209383, 0.160655170753903, 0.210378405270343, 0.367818975526755, 0.202082735580431 }, new bool[] { true, false, false, false, true, false, true, false, false, false }, new double[] { 0.572359538437966, 0.444318799974545, 0.841719823815729, 0.666002410308459, 0.182197130370046, 0.816905492365782, 0.395871257128134, 0.692728109980341, 0.85750074957381, 0.629309162324904 }, new bool[] { true, false, false, false, true, true, true, true, false, true }, new bool[] { false, false, true, false, true, false, false, true, true, true }, new long[] { 582, -4407, -4605, -4559, 2723, 5999, -802, 5431, 6132, 4915 })]
		[TestCase(new bool[] { true, false, false, true, false, false, true, true, true, true }, new short[] { -8209, -7277, -2879, -1423, 7728, -1847, 2838, 599, -9589, 8136 }, new bool[] { true, true, true, false, false, false, false, false, true, false }, new long[] { -1091, -7073, 6266, -4900, -8021, 9655, 6236, -8721, 7374, -4021 }, new int[] { 456, -3913, -3873, -3141, 2000, -2139, 8471, 6816, -2289, -5428 }, new int[] { -6838, 8597, 5021, 7995, -9079, -7273, 4941, -6301, 2766, 9268 }, new double[] { 0.33065978220229, 0.71828767038802, 0.228270605312786, 0.550462362612813, 0.183574572291027, 0.943164919476567, 0.32275649082044, 0.101034957496931, 0.329979845010666, 0.903630396306343 }, new bool[] { true, true, true, true, false, false, false, false, true, true }, new double[] { 0.555905549580187, 0.175059310242096, 0.648655472159691, 0.355986130589613, 0.842267152314199, 0.51552116196394, 0.395186377873265, 0.913546578452711, 0.208975412048854, 0.962593387329296 }, new bool[] { false, true, false, true, true, true, false, true, false, true }, new bool[] { false, true, true, false, true, true, false, false, true, true }, new long[] { 8075, -2617, 2338, 8623, -1848, -6887, -8606, 7444, 4163, 3360 })]
		[TestCase(new bool[] { true, false, true, false, true, true, false, true, true, true }, new short[] { -3610, -467, -5626, 8221, 2736, 4666, 3282, -6664, 4464, -4754 }, new bool[] { false, false, false, true, false, true, false, false, false, true }, new long[] { 4697, -5924, -9046, -174, -7821, 3221, 8609, -7129, 6280, 3277 }, new int[] { -1450, 254, -4474, 8724, -3379, -1455, -6989, 4115, -4112, 3484 }, new int[] { -171, 8056, -7018, -1081, -1576, -6352, -9770, -3328, -3827, 6023 }, new double[] { 0.958793672713821, 0.658182473228398, 0.25820414594291, 0.940646597156602, 0.844582511971045, 0.115731625405947, 0.428954259226543, 0.727386649571074, 0.802211922501313, 0.975794335350298 }, new bool[] { true, true, false, false, true, true, false, false, false, true }, new double[] { 0.716176493892528, 0.304221900321647, 0.200006407778713, 0.823518257505967, 0.321225342024688, 0.832031771462425, 0.0547005073422103, 0.60172288194379, 0.0700705815432922, 0.926538468770002 }, new bool[] { true, true, true, false, true, true, false, false, false, false }, new bool[] { true, false, true, false, true, true, true, false, true, true }, new long[] { -8139, 997, -7877, 3540, -8298, 3091, -836, -1306, 2388, -9748 })]
		[TestCase(new bool[] { false, true, true, true, false, false, true, false, false, false }, new short[] { -407, 5075, -2602, -9754, 2666, -4137, -1987, 7628, 9041, -2990 }, new bool[] { false, true, true, false, true, false, false, false, true, false }, new long[] { -3777, 6395, 4323, -8416, -6914, -6578, 5314, -9440, 9846, 3309 }, new int[] { -4299, -5793, 4709, 913, -5851, -3215, -6399, -8121, -9125, 5838 }, new int[] { -4920, 1534, -348, -4620, 4613, -8078, 6732, -4513, -9157, -5472 }, new double[] { 0.715025391296961, 0.52787981160352, 0.41213320447697, 0.303665956623697, 0.754369023141623, 0.659809489576057, 0.0375968525361255, 0.290745865223345, 0.85796870936545, 0.46230910041477 }, new bool[] { true, false, true, false, false, false, false, false, false, false }, new double[] { 0.919765565972666, 0.396992810255379, 0.114175569319248, 0.135811423014762, 0.796587859651348, 0.73441039711908, 0.337267427396619, 0.447208136994023, 0.348429610183663, 0.058196893454621 }, new bool[] { false, false, true, true, true, true, true, false, true, true }, new bool[] { false, true, false, true, false, true, true, false, false, true }, new long[] { 7330, -2165, -8025, 954, -3867, -3638, -1725, -4473, 141, -9599 })]
		[TestCase(new bool[] { false, true, true, true, false, false, false, false, false, false }, new short[] { -4530, 5952, 3072, 2560, -6143, -9389, -6777, 655, 7422, 8305 }, new bool[] { false, false, false, true, false, true, false, false, false, true }, new long[] { -3130, 436, 8494, 5426, -5498, 4223, 8938, -1277, -930, -5423 }, new int[] { -111, 1291, 7195, 7904, -2286, -8620, 4761, -587, -2901, -4477 }, new int[] { -6860, 7617, -1897, 1835, 9462, -6375, -3065, -4939, 2162, -6293 }, new double[] { 0.643041116950587, 0.948737317672343, 0.663610556937573, 0.703697932280459, 0.964845325315765, 0.751623046003107, 0.872881739806794, 0.882309039999875, 0.402967222222577, 0.481585110761963 }, new bool[] { false, true, false, true, false, false, false, false, false, false }, new double[] { 0.204541540799915, 0.922165428252036, 0.0831784350253541, 0.183327802076623, 0.47550675248518, 0.462518805853333, 0.116684738135284, 0.332992055608422, 0.798137886355695, 0.0438455678726759 }, new bool[] { false, true, true, false, true, true, true, false, true, true }, new bool[] { false, true, false, true, false, false, true, true, false, false }, new long[] { 7992, 9965, 8985, -291, 9614, 4417, 7310, -394, -5435, 46 })]
		[TestCase(new bool[] { true, true, false, false, false, false, true, true, false, true }, new short[] { 1623, -7490, -1640, 3391, 8532, -3024, 7089, -5802, 9814, -9128 }, new bool[] { true, false, false, false, false, false, true, false, false, true }, new long[] { 3602, -1585, 8557, -1438, 9981, 3122, 5431, 4170, 5124, 6058 }, new int[] { 699, 9806, 4120, -4085, 8196, 5483, 1606, -4405, 1175, 2639 }, new int[] { 7327, 3114, -209, -6306, 6827, -4380, -2444, 5540, -5700, 5018 }, new double[] { 0.644984903580036, 0.554425438192871, 0.523828685993249, 0.191824391573586, 0.195053349805555, 0.160463574882813, 0.197545205334921, 0.989886073856561, 0.670512466072343, 0.270511792167328 }, new bool[] { true, false, false, false, true, true, true, true, false, false }, new double[] { 0.785791634482235, 0.464895698924035, 0.78378291883682, 0.655361008204222, 0.998468953649732, 0.0244062817769154, 0.931209360682969, 0.743243301633393, 0.586703083285458, 0.718128132036947 }, new bool[] { false, true, false, false, false, true, false, true, false, true }, new bool[] { true, true, true, false, false, true, false, false, true, false }, new long[] { 2660, 227, -2403, 6899, 9302, -6397, 5412, 7368, -6132, -6586 })]
		public void Any(bool[] a, short[] b, bool[] c, long[] d, int[] e, int[] f, double[] g, bool[] h, double[] i, bool[] j, bool[] k, long[] val)
		{
			NKeyHash<bool, short, bool, long, int, int, double, bool, double, bool, bool, long> nKeyHash = new NKeyHash<bool, short, bool, long, int, int, double, bool, double, bool, bool, long>(UnderlyingHashType.Dictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<bool, short, bool, long, int, int, double, bool, double, bool, bool, long>(UnderlyingHashType.ConcurrentDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<bool, short, bool, long, int, int, double, bool, double, bool, bool, long>(UnderlyingHashType.SortedDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<bool, short, bool, long, int, int, double, bool, double, bool, bool, long>(UnderlyingHashType.HashTable);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());
		}

		[TestCase(new short[] { 5314, 2957, 5864, -6092, 7113, -89, 2009, -4439, 6444, 2590 }, new int[] { -8656, -1682, -8297, 5339, 2295, 2972, -9197, 9556, -5800, 1961 }, new int[] { -3582, 8599, 402, -7551, -6253, 3136, -4077, -554, -8636, 5075 }, new double[] { 0.271782672624934, 0.148157545900046, 0.966829842406711, 0.499346443218806, 0.745628698144866, 0.731917500371075, 0.0517142298872183, 0.769848293517646, 0.324401893338376, 0.275117607915363 }, new double[] { 0.267973119983437, 0.915341926699198, 0.348374795330863, 0.599706846102936, 0.387181386066219, 0.987312925973587, 0.867308917859247, 0.22516186778674, 0.967825128681876, 0.00370316812941021 }, new long[] { -1835, -8958, -3638, 2118, 6256, 6714, -7444, 3417, -9838, -6022 }, new long[] { -6011, -7434, -5801, -8629, -2844, 8378, -1019, 1714, -9571, 7656 }, new int[] { 1937, -4594, 3069, 8695, -3397, -1889, 1632, 8407, 4703, -5999 }, new short[] { 5789, -8580, 89, -8710, -3087, -5603, 6601, -2781, 3729, 8196 }, new long[] { 2083, -2383, 5235, -7488, -8485, -7204, 4108, -4401, -5160, -635 }, new short[] { 765, -4367, -5923, -8299, -1863, -7239, -2028, -2335, -4483, -1853 }, new short[] { -4916, -5853, 8713, 6160, -1812, -7430, 2474, -7090, 4456, -7239 })]
		[TestCase(new short[] { -8222, -8236, 7983, -7769, -4426, -5677, 168, 558, 7181, -6192 }, new int[] { 4000, -3965, 3569, -4660, 3233, 158, 7342, -1610, 3152, -5846 }, new int[] { 6423, -1062, -8297, -4416, 3114, -2062, -1097, 9073, 4323, 8943 }, new double[] { 0.51599580539204, 0.560012110304093, 0.557051172273723, 0.103950676090992, 0.379376058177732, 0.450144290668026, 0.382351922980674, 0.0923274890949612, 0.806309421922224, 0.190705976537758 }, new double[] { 0.629523831712792, 0.870612137425045, 0.524121115693879, 0.0854515261414701, 0.70726965819824, 0.952418257925854, 0.528833732720853, 0.668733514691113, 0.146371392135681, 0.901412931224989 }, new long[] { -4773, -5913, -243, 304, -3664, 2838, -9938, 2400, -885, 7635 }, new long[] { 5419, 1094, 6234, 8236, 3486, -7198, 4892, 1490, 7751, -5768 }, new int[] { -7487, 5495, 2263, -661, 1561, 9011, 8454, 9992, 1437, 4066 }, new short[] { 7359, 5526, 6146, 6294, 3718, -3765, -8555, -9162, 5743, 4748 }, new long[] { -1057, 5245, 2731, 8489, -1605, -8502, -8821, 2244, -1777, 1344 }, new short[] { -5844, 9085, 5622, 8695, 5516, -269, 1822, -9581, 8741, -2676 }, new short[] { 4383, -9931, -9036, 5047, -9723, 9891, 4946, 9938, -5480, -2746 })]
		[TestCase(new short[] { -8642, 4056, 5746, -6995, 5288, -2734, -7234, 3773, -9054, 65 }, new int[] { 7834, -3789, 1771, -9905, -88, 8273, 9903, 7450, -9220, -6010 }, new int[] { 4411, -8973, -7905, -1578, -9633, -1124, 4282, 7683, 8213, -1497 }, new double[] { 0.327477225254978, 0.0619120681946688, 0.386327339516174, 0.0484418045023651, 0.499373973579786, 0.504912599225022, 0.166958396400771, 0.630963398437464, 0.170385005497553, 0.412544609239579 }, new double[] { 0.348279239306356, 0.902454878158148, 0.973683269682193, 0.433853902124732, 0.474393828527254, 0.40866201622815, 0.414806916571598, 0.0434691887551309, 0.256835875686647, 0.100069620227474 }, new long[] { 9986, 7495, 9159, -9468, 2841, -9668, 1963, -2673, -7360, -3586 }, new long[] { 2982, -4918, 5558, 2441, -6483, 6596, 8482, 802, 106, 9812 }, new int[] { 4934, -2714, 4042, 2527, 7022, 6361, -8446, 3416, 8932, 2191 }, new short[] { -9420, 3413, 2546, 6212, -1485, -946, -7921, -2803, -1872, -343 }, new long[] { 8133, 6012, -19, 6993, 5267, -8114, -7509, -2968, -4838, 2890 }, new short[] { -310, 7492, 763, -4675, -2933, 2701, -6546, -3367, -6492, 6478 }, new short[] { 8777, 8546, -1607, 446, -4164, 9568, 2533, 9345, -6071, 4461 })]
		[TestCase(new short[] { 4518, 1287, -7324, -9549, -8320, 8921, 7303, 7048, 7259, 5137 }, new int[] { 3872, 4520, -1744, -3957, -7496, -6914, -7348, -2776, -853, 5811 }, new int[] { -4398, 5445, -6310, 1648, 877, 9586, -2379, 9533, 1159, 5698 }, new double[] { 0.467568844308876, 0.157156752029973, 0.155172546932088, 0.534926126960165, 0.918624118398234, 0.920111627280764, 0.740942045459962, 0.515682294273601, 0.182262412822928, 0.407209219134976 }, new double[] { 0.769885936644807, 0.320168816633601, 0.46861541898391, 0.418460219362034, 0.1302989661369, 0.212883545650581, 0.514581647941182, 0.117536987698421, 0.39721156069879, 0.137473480839968 }, new long[] { 6918, -4689, 200, -1883, -1138, 9072, -2401, 1026, -428, -7908 }, new long[] { 1301, 7769, -4109, -8438, -4212, 729, 1417, 7556, -2330, -5899 }, new int[] { -1733, 2336, -6421, -8996, -9584, 9196, -3926, 5319, -957, -3379 }, new short[] { -703, -4729, 1589, -1589, 8779, -5958, 2942, 4986, -8161, 9298 }, new long[] { 804, -6206, -9257, -8444, 6842, 7626, -9485, -2188, -7416, 1876 }, new short[] { 2839, 2734, 4680, -6155, 4482, -5417, -8267, -802, -2298, -336 }, new short[] { 2999, 2277, -8015, -7047, 2794, -3968, -3819, 7478, -7218, -8253 })]
		[TestCase(new short[] { 7785, 6429, 5719, -1629, 3295, -5525, 1594, -7975, -5839, -7212 }, new int[] { 8683, 8261, 2737, 7165, 3779, 6560, 588, -2253, 3926, 4197 }, new int[] { -7689, -6254, -2713, 2173, -3699, 8525, -8189, 7789, -1239, 811 }, new double[] { 0.572380483417018, 0.151699289284506, 0.251545341336888, 0.0418629297250244, 0.704485242117422, 0.82050909140171, 0.850753424154014, 0.315567804647408, 0.527412235982442, 0.500471789622899 }, new double[] { 0.649366054520647, 0.98541045747018, 0.251912645647262, 0.24574726272642, 0.548964550042974, 0.736873746261407, 0.977033993218576, 0.240852162819753, 0.458574301311082, 0.811661746265209 }, new long[] { 5442, 8433, -6446, -1417, 9434, 4040, -855, -6453, -7929, 4769 }, new long[] { -7334, 3804, 3263, 3347, 1338, 5649, 3230, 1899, -6922, 7369 }, new int[] { 9545, -5722, 7197, -6081, -8788, -7398, 8706, -7628, -8804, 1562 }, new short[] { 8984, 6991, -1380, 2526, 5368, 3013, 9480, 6447, -8597, -9950 }, new long[] { -2733, 3468, -5757, 5777, -2654, 9182, -3555, 1690, 3575, 5328 }, new short[] { -8492, -2359, -8258, 1801, 6686, 1165, -8762, 9634, -2628, 6833 }, new short[] { 5333, -3226, -7648, 507, 5783, -4327, -4814, -9262, 7978, 8324 })]
		[TestCase(new short[] { 6168, 6781, 498, -6971, 103, -3922, -9963, -8579, 6571, -7971 }, new int[] { 6156, -2982, -1204, -4134, 56, 1344, 5251, 6816, 5839, -5796 }, new int[] { 1777, 9844, -922, -5432, -5285, -9506, 1118, 3733, 9992, -8326 }, new double[] { 0.699872780451492, 0.285385548735683, 0.685559864475187, 0.762517974601368, 0.958008301424798, 0.236190768534406, 0.857087229311972, 0.935601968753898, 0.0848898524813772, 0.530498308842302 }, new double[] { 0.556483988443615, 0.990842851805893, 0.153144656286177, 0.267181175419679, 0.0338989622117481, 0.415873342387319, 0.898911625099793, 0.824287141125783, 0.0225510327250469, 0.221984286895946 }, new long[] { 420, -1631, -5102, 3775, -3451, 6322, -2294, -4067, 8313, -388 }, new long[] { 4958, -3698, -8573, 4899, -1969, 448, 3305, 3544, -3294, -4667 }, new int[] { 4202, 6539, 5118, -4769, 3073, 1960, 6782, -6266, -6110, 6396 }, new short[] { -7484, 4631, 3282, 5553, 1251, -4370, -9188, 9934, -1297, -7162 }, new long[] { 7017, 1209, -9601, 2086, 5650, -5171, 8390, -1836, 7312, 229 }, new short[] { 5011, -5565, -219, 5118, 236, 3880, 3248, 9666, -9296, 4587 }, new short[] { 9539, -6027, -7955, -8081, -2903, -9672, 3017, -4128, -6351, -7598 })]
		[TestCase(new short[] { -361, 3369, -5157, -6131, -1685, -7005, 6141, -6966, -421, -1754 }, new int[] { 3568, -1379, -3579, 3659, -8614, 8080, -5147, 8163, -4681, 7370 }, new int[] { 2380, -8855, 9232, 4114, -6702, 3045, -833, 8479, -5009, 5324 }, new double[] { 0.590498305200831, 0.625995568291282, 0.225755267881674, 0.745597434111683, 0.0295373122345364, 0.0820896877358154, 0.979555962597744, 0.295607801198777, 0.340221890872448, 0.36216016316887 }, new double[] { 0.886946508608268, 0.510797860338724, 0.50442216801663, 0.622829786791853, 0.0509178289449391, 0.546022197951573, 0.877602884488927, 0.419177513299127, 0.0266274013680534, 0.450781874568566 }, new long[] { 5474, 4853, -9445, -3723, 20, -1505, 4136, 727, -9427, 5267 }, new long[] { 3826, 7660, 8041, 4253, 6434, -8949, -5894, 1508, 3068, 9742 }, new int[] { 8488, 8938, 1360, 8073, 9631, -7834, 1054, -3222, 3096, 2375 }, new short[] { 5493, -9216, 7947, 5973, 9849, 6955, 1965, 8237, -5108, 2095 }, new long[] { -2494, -1136, -4659, 1536, 3415, -9921, 2173, 5833, 6020, 9968 }, new short[] { -3184, -3955, 5314, -9209, 525, 6534, -6505, -7519, -3355, -2143 }, new short[] { 7439, -2639, 7630, -1804, 9773, 3043, 9712, -7930, 4403, 9478 })]
		[TestCase(new short[] { -916, -4133, -3382, -9026, 2237, -373, 3598, 9822, -5341, 9553 }, new int[] { -8, 5220, 755, 3126, -4439, -549, -4531, 7157, -4550, -6684 }, new int[] { 3462, -513, 1594, 7034, 4655, -9854, 1231, 7144, 1761, -9626 }, new double[] { 0.0182224987159588, 0.505253362704652, 0.0715183071193836, 0.827096545522612, 0.544290924232589, 0.0474688154866308, 0.971341232755846, 0.717076535204927, 0.427576238954242, 0.0449669887521151 }, new double[] { 0.146774188218067, 0.18347063622599, 0.891068351869969, 0.354477987789772, 0.893243631763963, 0.110953364572932, 0.830216762530718, 0.225206347287263, 0.131751518292237, 0.516210059410059 }, new long[] { -2423, -7444, 6618, 1088, -3983, 9595, 4271, -418, -3682, 2092 }, new long[] { 8393, 6453, -1937, -5713, 9189, 9885, 3789, 4213, -7757, -5388 }, new int[] { 23, 1126, -1392, -5450, -9619, -206, 1665, -5494, 9169, 2436 }, new short[] { -6458, -3271, 4509, -8561, 2796, 7808, 3485, 341, 525, 1289 }, new long[] { -3322, -155, -1975, 6457, -7494, -3518, 5606, 3535, -2100, 7977 }, new short[] { -1571, -7608, -7736, 8023, -9698, 6448, 3947, 2070, 708, 6221 }, new short[] { -2068, -232, 411, 3879, -1447, 1666, -8054, -3375, 1489, -8618 })]
		[TestCase(new short[] { -3598, -6550, -6311, 952, 7932, -9820, -6897, 2148, -7954, 3898 }, new int[] { 4185, 8129, 6604, -8807, -5991, -8849, -5534, 6485, -8862, 6346 }, new int[] { -6137, -8583, 9631, 4302, -6641, 6909, 9432, 4144, -2093, 838 }, new double[] { 0.226827198745137, 0.449152577877581, 0.102289346094378, 0.325941776542897, 0.578898877640673, 0.249005514313004, 0.9351307619061, 0.565518882388956, 0.00450683757872639, 0.00612948835181514 }, new double[] { 0.66734603590674, 0.0899646794842392, 0.501287651481707, 0.840505476966736, 0.101818222134289, 0.490079953097776, 0.658094441358975, 0.461005227854943, 0.493566561720132, 0.3701114986884 }, new long[] { -2798, -4540, -4512, 5141, 7517, -5014, -6183, -615, -2405, -8975 }, new long[] { -9253, -1042, -5757, 1206, -637, -4796, 6083, 86, -386, 9027 }, new int[] { -7551, 3154, 6395, -8984, -6998, -7936, 1389, -7176, 2266, 3555 }, new short[] { -6251, 213, -5725, -9495, -6362, 9077, -6503, -3096, -999, -3407 }, new long[] { -8834, -682, -6283, 9065, 9376, -5609, 7556, 8818, -2551, 6832 }, new short[] { 3717, -6923, 9605, 842, -5044, 4046, -937, -5526, 2141, 5455 }, new short[] { 3595, -9006, 7117, 4037, 7274, 531, -5316, -6261, -2430, 284 })]
		[TestCase(new short[] { -8291, -819, -8912, -6978, 7863, 3129, -560, 7328, -8362, 8609 }, new int[] { -5493, 2569, 5374, 5433, 9837, -9326, 606, 3430, 5548, -409 }, new int[] { 15, 9021, 4761, 3544, 2996, -9827, 2199, -322, -8208, -1154 }, new double[] { 0.98531746072011, 0.690941028618692, 0.562500747648301, 0.85818472498012, 0.756279051190372, 0.226852773328709, 0.0994556788818239, 0.829276116019709, 0.648954656742958, 0.591256685830307 }, new double[] { 0.23038431034907, 0.586667616193494, 0.141830754066739, 0.67655992399741, 0.547508952462817, 0.0512903598376039, 0.280913605951198, 0.0842147311587886, 0.709989924314427, 0.830127912960075 }, new long[] { 9924, 1252, -1810, 7978, -9730, -7313, 4418, -2458, 24, 7691 }, new long[] { -9069, 9760, 5537, 2790, 8903, 686, -8679, 8210, -9690, 5301 }, new int[] { 8682, 4020, -9547, -6275, -5017, 8281, 6184, -8768, -7404, 1970 }, new short[] { 4552, 515, 5477, -4811, -1079, -1546, -4369, 3270, 6894, 2439 }, new long[] { 118, 4446, -3438, 5285, 895, -5153, 6194, 45, 4626, -9735 }, new short[] { 9704, -2592, -8622, 8897, 7918, -4095, 801, -5534, 2996, -8012 }, new short[] { -3499, 3187, -5052, 8052, -6859, 414, -5715, 349, -6128, 450 })]
		public void Forloop(short[] a, int[] b, int[] c, double[] d, double[] e, long[] f, long[] g, int[] h, short[] i, long[] j, short[] k, short[] val)
		{
			bool[] found = new bool[9];
			bool allFound = false;
			NKeyHash<short, int, int, double, double, long, long, int, short, long, short, short> nKeyHash = new NKeyHash<short, int, int, double, double, long, long, int, short, long, short, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, int, int, double, double, long, long, int, short, long, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, int, int, double, double, long, long, int, short, long, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<short, int, int, double, double, long, long, int, short, long, short, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, int, int, double, double, long, long, int, short, long, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, int, int, double, double, long, long, int, short, long, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<short, int, int, double, double, long, long, int, short, long, short, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, int, int, double, double, long, long, int, short, long, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, int, int, double, double, long, long, int, short, long, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<short, int, int, double, double, long, long, int, short, long, short, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, int, int, double, double, long, long, int, short, long, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<short, int, int, double, double, long, long, int, short, long, short, short> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);
		}

		[TestCase(-7668, 2264, false, -860, 6578, -2730, -6983, 7651, -8834, false, true, -4059, 6929)]
		[TestCase(-499, -1491, true, -9517, -9436, -4154, -3824, -5823, 5205, true, false, 3508, 3714)]
		[TestCase(3682, 8443, false, 1636, 2860, 9899, -9639, -3414, -7382, false, true, -8724, -2295)]
		[TestCase(-6919, -9144, true, -6107, -2224, -3591, -8071, -1746, 4735, true, true, 2347, 9572)]
		[TestCase(6241, 9964, false, -2875, -9390, -8944, 5630, -7134, 3586, false, true, -471, -2586)]
		[TestCase(5007, -4418, true, -3116, -7279, 6151, 9205, 2857, -7234, false, true, 1314, -6118)]
		[TestCase(9681, 1580, false, 8945, 9491, 2617, 9288, 3286, -6340, false, false, 5491, -4820)]
		[TestCase(4938, -4355, false, -507, 6282, -9216, 4363, -9636, 1400, true, true, -2147, 6231)]
		[TestCase(6865, 3140, false, 3476, 4644, 1049, 5809, 6727, -8626, false, true, 4640, -4920)]
		[TestCase(9397, 239, true, 1349, -4813, -3811, 1391, 7539, -8785, true, false, 3271, -962)]
		public void Add(short a, int b, bool c, short d, short e, short f, short g, short h, long i, bool j, bool k, short l, short val)
		{
			NKeyHash<short, int, bool, short, short, short, short, short, long, bool, bool, short, short> nKeyHash = new NKeyHash<short, int, bool, short, short, short, short, short, long, bool, bool, short, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<short, int, bool, short, short, short, short, short, long, bool, bool, short, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<short, int, bool, short, short, short, short, short, long, bool, bool, short, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<short, int, bool, short, short, short, short, short, long, bool, bool, short, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l));
		}

		[TestCase(3106, 0.984071230974082, false, 3565, -8405, -2562, 4851, true, -8614, -5875, -3763, -9947, 1160, 1719)]
		[TestCase(6460, 0.934592553383947, true, 9576, 8697, -9794, -4391, false, 8858, 3209, 3091, -1183, -150, -6451)]
		[TestCase(-8179, 0.182332895781069, false, -2444, -8831, 9436, 3080, true, -910, -2352, 1969, -9418, 8419, 7833)]
		[TestCase(-789, 0.641348179262759, true, -1770, -5925, 5833, 4632, false, -9899, -3429, -2127, -22, -9857, 2651)]
		[TestCase(-9177, 0.762066511792162, false, 2777, 7587, 1303, -615, true, -9966, 8679, 8883, 1723, 8638, -5249)]
		[TestCase(-397, 0.40026082955313, false, 8117, -8215, -2226, 1245, false, 5927, -5137, -5257, 4014, -1084, 7250)]
		[TestCase(-6451, 0.876040940580909, true, 1189, 9294, -9569, 888, true, -2827, 9190, -7007, -2883, -1549, 1471)]
		[TestCase(2794, 0.930035146386379, false, 2350, 7193, -117, 4964, true, 8961, -245, -1806, 2367, -8592, 4788)]
		[TestCase(9311, 0.780625403290906, false, -6426, -7610, 2132, 4189, false, 8996, -2305, 2427, 8209, 3861, 5754)]
		[TestCase(-9166, 0.420819953279952, true, 4666, 9322, 9772, 3237, true, 5516, 2391, 6819, 9032, -7713, 1453)]
		public void Upsert(int a, double b, bool c, int d, long e, short f, int g, bool h, long i, short j, short k, int l, short val, short newVal1)
		{
			NKeyHash<int, double, bool, int, long, short, int, bool, long, short, short, int, short> nKeyHash = new NKeyHash<int, double, bool, int, long, short, int, bool, long, short, short, int, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, l, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<int, double, bool, int, long, short, int, bool, long, short, short, int, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, l, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<int, double, bool, int, long, short, int, bool, long, short, short, int, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, l, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<int, double, bool, int, long, short, int, bool, long, short, short, int, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, l, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l));
		}

		[TestCase(0.514151086338866, 9602, false, 9921, 0.949239178071376, 0.801018732507256, 9209, 1261, 545, 0.731420096816225, 3526, 0.652230368765178, 0.0816278765358161)]
		[TestCase(0.0775553402852059, -8014, false, 5642, 0.337629332364364, 0.167796850282604, -152, -7262, -6046, 0.453432736198154, -5300, 0.274994801392311, 0.959343887846611)]
		[TestCase(0.888118407171275, -8778, false, 7258, 0.785355253510808, 0.496983309042167, -6993, -7507, -7044, 0.886232797469121, 3866, 0.623476587526256, 0.891788714980608)]
		[TestCase(0.150628328393506, -6923, false, -1987, 0.765025924781815, 0.473478940536025, 3882, 7389, 4547, 0.627485739359393, 1464, 0.77568721807361, 0.633313293863699)]
		[TestCase(0.068585025178541, -3529, true, -3669, 0.526723652392031, 0.847572989225189, 4422, 9796, 8257, 0.899482666468007, -8010, 0.664313254255947, 0.946064843305417)]
		[TestCase(0.179338144221966, 38, true, 8595, 0.21302019581805, 0.311418293654648, -6825, -1083, -9655, 0.338608441100739, -7455, 0.79702400779213, 0.688406811416339)]
		[TestCase(0.761458218452268, 1616, false, -6785, 0.433539745599748, 0.89037544694281, -8253, -6958, -1431, 0.826813756873279, -2052, 0.831254013735454, 0.359509145077089)]
		[TestCase(0.845775491486199, 8046, true, -5244, 0.25428396754632, 0.910180351655083, 4725, 6378, -4116, 0.192229760900247, 8249, 0.797613263035944, 0.414465543541343)]
		[TestCase(0.261823849874467, 2340, false, -8970, 0.98487944760587, 0.600055218953665, 389, 6765, -8276, 0.140298849502718, 8000, 0.752198479022923, 0.465942920868258)]
		[TestCase(0.209071034662924, 1540, true, 5018, 0.675114966312011, 0.559684955775591, -8028, 7069, -687, 0.256332012478417, 878, 0.779440518831574, 0.0843244735544196)]
		public void Delete(double a, int b, bool c, short d, double e, double f, long g, int h, int i, double j, short k, double l, double val)
		{
			NKeyHash<double, int, bool, short, double, double, long, int, int, double, short, double, double> nKeyHash = new NKeyHash<double, int, bool, short, double, double, long, int, int, double, short, double, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<double, int, bool, short, double, double, long, int, int, double, short, double, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<double, int, bool, short, double, double, long, int, int, double, short, double, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<double, int, bool, short, double, double, long, int, int, double, short, double, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
		}

		[TestCase(5945, false, 0.521192304101396, 5192, 5240, false, -289, true, 4021, -6813, 0.0249381978180903, 863, 0.517114794588236)]
		[TestCase(-2943, true, 0.560954492800382, 5923, -2786, true, -4560, true, -2339, -824, 0.968871111035753, 2375, 0.75169229309619)]
		[TestCase(4454, false, 0.446868718809853, 1610, -7864, true, -2520, true, 5247, 5734, 0.332318746639564, 4119, 0.494289441264369)]
		[TestCase(842, false, 0.295983426876358, 318, 8027, true, 8481, true, 6489, 3280, 0.458119709258024, 6646, 0.109599939132854)]
		[TestCase(-3578, false, 0.941379335215958, -1714, 7059, true, -7182, false, -4418, -8070, 0.341472327868208, -7587, 0.0525619914068663)]
		[TestCase(-6089, false, 0.683934137543633, 1808, 8245, false, -8195, true, -7971, 9560, 0.604571547175092, 7341, 0.557355634196361)]
		[TestCase(-7511, true, 0.880200531277899, 7963, 4501, true, 4962, true, 168, -4620, 0.891801321828645, -3036, 0.93375510719314)]
		[TestCase(5599, true, 0.483939163146512, -4738, -6049, true, -2093, true, 2980, 5096, 0.187557624274659, -5317, 0.751729916665577)]
		[TestCase(-5409, true, 0.243207607997212, -5606, -7460, false, 942, false, -1440, -1076, 0.130149746839958, -2382, 0.371334336870971)]
		[TestCase(-2945, false, 0.0554258842279324, 3741, 8005, true, -5154, true, -1027, 501, 0.38245316798913, 6766, 0.780573623152717)]
		public void Remove(short a, bool b, double c, int d, short e, bool f, short g, bool h, long i, int j, double k, short l, double val)
		{
			NKeyHash<short, bool, double, int, short, bool, short, bool, long, int, double, short, double> nKeyHash = new NKeyHash<short, bool, double, int, short, bool, short, bool, long, int, double, short, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k, l);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<short, bool, double, int, short, bool, short, bool, long, int, double, short, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k, l);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<short, bool, double, int, short, bool, short, bool, long, int, double, short, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k, l);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<short, bool, double, int, short, bool, short, bool, long, int, double, short, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k, l);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
		}

		[TestCase(1099, 6019, 2761, -2958, 0.118936199750256, -2923, 7643, 0.826157029637209, 2035, false, 5867, 9238, true)]
		[TestCase(-2091, 9835, 5463, 5616, 0.217091326237233, 7214, -2373, 0.3463671833027, 3734, false, 1742, 9051, true)]
		[TestCase(-1249, 4333, -2040, 1868, 0.366463686044544, -3969, -2033, 0.75827909529129, -5256, false, -3190, -8067, false)]
		[TestCase(-9425, 9121, 9087, -9033, 0.4489277477604, 8300, 267, 0.0852241749340781, -4055, true, -5996, 9567, true)]
		[TestCase(7862, 8148, 5912, 7364, 0.725697248115063, -8980, -2011, 0.6125609225652, 8324, false, -1436, -9832, true)]
		[TestCase(-161, 1272, -8073, -6833, 0.550581475976194, -1344, 3684, 0.810947269113244, 6641, false, -2160, 2769, true)]
		[TestCase(3440, -1215, -1576, -7193, 0.0444216607345369, -6043, 2300, 0.577577707160999, -1833, false, 9251, -2621, true)]
		[TestCase(-4209, 3943, 5871, -7751, 0.790617927345735, 524, -9200, 0.792512578327447, -1536, true, 9777, -7220, false)]
		[TestCase(5347, -4116, 9557, -8777, 0.482270403989717, -1925, -5404, 0.0993052903093888, -2422, true, -6171, 5519, false)]
		[TestCase(-5392, -2133, -8422, -8327, 0.0727805612016379, -7325, 5787, 0.835025805903145, -7134, true, -9651, 4393, true)]
		public void ContainsKey(long a, int b, long c, int d, double e, long f, long g, double h, long i, bool j, long k, short l, bool val)
		{
			NKeyHash<long, int, long, int, double, long, long, double, long, bool, long, short, bool> nKeyHash = new NKeyHash<long, int, long, int, double, long, long, double, long, bool, long, short, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<long, int, long, int, double, long, long, double, long, bool, long, short, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<long, int, long, int, double, long, long, double, long, bool, long, short, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<long, int, long, int, double, long, long, double, long, bool, long, short, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
		}

		[TestCase(0.558941097259028, -7216, 0.61625037976366, 8211, 4739, 2043, false, 0.669535667015955, -4082, 2932, 4273, -3208, true)]
		[TestCase(0.855251051883796, -3008, 0.286684724635763, 2483, -3857, 9210, false, 0.847702910121392, 759, 2624, -4691, -7399, false)]
		[TestCase(0.759178930781399, 5492, 0.198371130134152, 5998, -8550, -415, true, 0.0641950890720799, 1494, 3005, -5623, -5346, false)]
		[TestCase(0.415190820309888, -2333, 0.96503182685237, 1396, 9036, -7595, true, 0.612492889451092, 1539, 3036, 2720, 6123, false)]
		[TestCase(0.639064422174852, -9881, 0.160882562008166, -9579, 157, -2983, true, 0.266246670515391, 6859, 1234, -576, -81, true)]
		[TestCase(0.234476651174238, 2063, 0.812780417880407, -4389, 3984, -8640, false, 0.0570040704016593, 907, 9160, 7652, 9361, true)]
		[TestCase(0.145221647408428, -5586, 0.858237218977063, -6355, -7542, 1246, true, 0.0586555633035747, 6802, 4609, 8065, 1075, false)]
		[TestCase(0.867950957206986, -960, 0.98384878411137, 1443, 6430, -122, false, 0.3776494978823, 7713, -3876, 5993, -4070, true)]
		[TestCase(0.568117107063586, -1705, 0.956763641888631, -8125, -9042, -4435, false, 0.828520418996234, -5887, 1200, -1839, 3215, false)]
		[TestCase(0.908819812307516, 43, 0.51557380683514, -2112, 7453, 8188, true, 0.556879947686978, -6000, 8790, -8536, 9462, false)]
		public void Clear(double a, int b, double c, short d, int e, int f, bool g, double h, int i, short j, int k, short l, bool val)
		{
			NKeyHash<double, int, double, short, int, int, bool, double, int, short, int, short, bool> nKeyHash = new NKeyHash<double, int, double, short, int, int, bool, double, int, short, int, short, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j, k), 0);

			nKeyHash = new NKeyHash<double, int, double, short, int, int, bool, double, int, short, int, short, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j, k), 0);

			nKeyHash = new NKeyHash<double, int, double, short, int, int, bool, double, int, short, int, short, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j, k), 0);

			nKeyHash = new NKeyHash<double, int, double, short, int, int, bool, double, int, short, int, short, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j, k), 0);
		}

		[TestCase(2501, 0.500953108305555, -3722, 3246, 0.891969943368793, true, 0.911401146515925, false, 0.585047477663051, 1435, true, -172, -1330)]
		[TestCase(7804, 0.56970246768077, -2086, -2636, 0.475143104081574, true, 0.120493349209658, true, 0.889407685440689, -6827, true, 8921, 2910)]
		[TestCase(-3010, 0.775053046538985, -4626, 8291, 0.923118925151936, false, 0.647889233030327, false, 0.284366842491723, -5483, false, 752, -9047)]
		[TestCase(-53, 0.0617861715433123, 5076, 6074, 0.322448178344615, false, 0.768109031379274, false, 0.168280166652184, -3678, true, 2521, -7921)]
		[TestCase(-5633, 0.625960026227851, 5426, 4713, 0.34235032291261, true, 0.71623934931878, false, 0.226354628441089, -7272, false, 3408, 2972)]
		[TestCase(-1032, 0.843495770750333, -5130, 2117, 0.343901194326534, false, 0.830548560167918, false, 0.386292401881093, -8824, false, -8286, 6722)]
		[TestCase(-8255, 0.177999754984863, -6709, -6375, 0.459013270427945, false, 0.288523343060409, true, 0.195398319603595, -9560, false, 973, 7668)]
		[TestCase(-880, 0.821370856287596, 6022, -4580, 0.925438071566372, true, 0.133301032769168, true, 0.991242145184075, 8491, false, 1247, 9441)]
		[TestCase(2438, 0.795520291568488, 3526, 6639, 0.567252848561505, true, 0.650041993078795, true, 0.699887290922872, 764, false, -9096, 3546)]
		[TestCase(2398, 0.381931939805826, 6587, -4939, 0.821566563947856, true, 0.0572042586548274, false, 0.696704838283688, -9815, true, -7692, -7333)]
		public void Get(short a, double b, short c, short d, double e, bool f, double g, bool h, double i, int j, bool k, long l, long val)
		{
			NKeyHash<short, double, short, short, double, bool, double, bool, double, int, bool, long, long> nKeyHash = new NKeyHash<short, double, short, short, double, bool, double, bool, double, int, bool, long, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<short, double, short, short, double, bool, double, bool, double, int, bool, long, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<short, double, short, short, double, bool, double, bool, double, int, bool, long, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));

			nKeyHash = new NKeyHash<short, double, short, short, double, bool, double, bool, double, int, bool, long, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l));
		}

		[TestCase(6095, 0.898631486528847, false, true, -4336, 0.71923325011471, -5483, -5037, 0.0198973771277337, 5026, true, 4764, -7938)]
		[TestCase(-1742, 0.505198169734887, true, true, 5726, 0.0499260029988019, 4332, -1320, 0.0961883846186979, 3953, false, 2078, -4302)]
		[TestCase(-6899, 0.426347981871268, false, true, 7777, 0.686557592212482, 7790, -2661, 0.0199246807116664, -6827, false, 8811, 4520)]
		[TestCase(8142, 0.889519842290096, true, false, -5979, 0.317980835362329, -2846, -6992, 0.51406649291239, -7727, true, 8936, 4132)]
		[TestCase(-8140, 0.646747068337513, false, true, -5980, 0.0334115568704026, -6957, 9964, 0.564229456970575, 5988, false, -4558, 7248)]
		[TestCase(-6843, 0.848658328805425, true, false, -3067, 0.428493328592038, 9691, -8793, 0.142744786638182, 6542, true, 1968, -65)]
		[TestCase(-9481, 0.246272587797731, false, true, -3744, 0.215273790161719, 6019, -6353, 0.59360982132778, -5142, false, -3773, 9151)]
		[TestCase(-9003, 0.788534157810981, true, false, -8198, 0.827522762970777, -5485, -3228, 0.160167224779803, 180, false, -7576, 5339)]
		[TestCase(933, 0.962239279859811, true, true, 6391, 0.471874737400503, -7794, 4084, 0.00754871452578749, 8115, true, 8464, -265)]
		[TestCase(6846, 0.471036514021008, true, true, 2116, 0.389958901046756, -8366, -2219, 0.37870987615488, -6077, false, 5995, 4741)]
		public void TryGetValue(int a, double b, bool c, bool d, short e, double f, long g, int h, double i, int j, bool k, short l, int val)
		{
			int fetch;
			bool b1;
			NKeyHash<int, double, bool, bool, short, double, long, int, double, int, bool, short, int> nKeyHash = new NKeyHash<int, double, bool, bool, short, double, long, int, double, int, bool, short, int>(UnderlyingHashType.Dictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<int, double, bool, bool, short, double, long, int, double, int, bool, short, int>(UnderlyingHashType.ConcurrentDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<int, double, bool, bool, short, double, long, int, double, int, bool, short, int>(UnderlyingHashType.SortedDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<int, double, bool, bool, short, double, long, int, double, int, bool, short, int>(UnderlyingHashType.HashTable);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);
		}

		[TestCase(new long[] { 7485, -5977, -4931, -9154, 7653, 7279, -1606, 2066, 9702, 5093 }, new int[] { 3167, 1919, 8063, -9514, -9208, -2440, -6639, 5322, -3722, -6991 }, new short[] { -8348, 5011, 4749, 921, -7162, -6627, -7130, -1929, 8818, -6523 }, new double[] { 0.632268112447238, 0.14426767367137, 0.920796952173485, 0.182582628066923, 0.515636048519814, 0.880565443486239, 0.13558893284555, 0.336475138243509, 0.313372352306439, 0.468524445532134 }, new long[] { -2397, -7324, 4722, 2360, -3, -4604, 6680, 3921, -394, -6643 }, new long[] { 11, -8547, -5558, -140, -3185, -7524, -728, 4146, 8006, 4281 }, new long[] { 4410, -9675, 3247, 6226, -7551, 282, 3502, 4412, 171, -6820 }, new long[] { -5151, 6629, -944, 6905, 5404, 8974, -9710, -7609, -9073, 7441 }, new long[] { -3308, -1053, 8463, 5462, 3463, 1193, 8443, -1443, 6836, -2161 }, new double[] { 0.416992002360985, 0.428245455691705, 0.436093497293113, 0.599260194971813, 0.747955889323706, 0.363973642403248, 0.471362604513468, 0.924776754306991, 0.495623540364031, 0.985698527649836 }, new long[] { 1891, -7730, -6249, -3572, 8506, 3381, 2395, -2464, 4453, -2161 }, new long[] { -7813, -3117, 3221, -9433, -2408, -4534, -8140, 7783, -7235, 1254 }, new int[] { 1837, -5052, 7574, -7665, 4838, 6282, -2091, 7069, -8052, -1873 })]
		[TestCase(new long[] { -451, -8205, 2476, -8787, -4448, -5576, -4803, 2037, 6955, -9916 }, new int[] { 8796, 908, 4101, -1001, -4347, -8541, 5342, -1843, -5605, -505 }, new short[] { -4578, 1642, 5731, 8656, -2123, -3055, -5306, -8582, 1587, -7774 }, new double[] { 0.273675103799289, 0.766271649285346, 0.279399530160893, 0.316417457683206, 0.914520089474749, 0.0196440676318687, 0.720268431455022, 0.600522139389311, 0.750705509796136, 0.158425857852411 }, new long[] { -9730, -178, -9170, -7317, 2457, -9069, 845, -1423, 6681, 3381 }, new long[] { -9059, 9750, 2676, 2452, -7293, 7904, -3938, 3818, 3334, 8606 }, new long[] { 9728, -6219, -9549, 4730, 4608, -6527, -4678, -2226, 708, -4740 }, new long[] { -2947, -6666, 3142, -8773, -774, 5598, 814, 3050, -3799, -3052 }, new long[] { 6097, 6116, -5265, 8205, -8714, -4277, -7350, 3134, -6376, -9613 }, new double[] { 0.716585629487683, 0.0293073444763698, 0.933757695804237, 0.820349580990313, 0.171946472102751, 0.824436893139238, 0.468593683777653, 0.304855877209853, 0.403646478617399, 0.449294324242181 }, new long[] { 5607, -6926, 7867, 1423, -3670, 7606, -3390, 1451, -6772, -2893 }, new long[] { -2909, 3010, -2380, -3611, -7490, -6386, 9044, -7756, 3446, -1113 }, new int[] { -9175, 2185, -5849, 323, 927, -3533, -5341, 6734, 7785, 2736 })]
		[TestCase(new long[] { -3772, -5281, -5021, 7213, 1338, 3025, 8247, 3310, 1877, -6321 }, new int[] { 9111, 1197, -91, 6515, 3294, -8677, 2966, 2286, 3897, 9825 }, new short[] { 7442, -2870, 2650, 9185, -1837, -6576, 8921, -2454, -9502, 9861 }, new double[] { 0.647467938087633, 0.493676797251067, 0.683240890821089, 0.524497670365729, 0.0439558536950293, 0.118645170758779, 0.401644747425637, 0.520262683518353, 0.752497261740499, 0.474155147780737 }, new long[] { -4635, -4265, 365, -231, -226, -374, -7721, -2365, 7027, -393 }, new long[] { 3498, 2370, -7161, 7959, 5293, 9097, 2066, -4208, -948, -2083 }, new long[] { 4103, 703, 2814, 2014, 728, -760, 7531, 9417, 5636, 921 }, new long[] { 3287, -7437, 7235, -5584, 4461, 1708, 6762, -7117, -587, 8536 }, new long[] { -8854, 1288, 516, 890, -3636, -9420, -2963, 5703, 5195, -8218 }, new double[] { 0.515300353297638, 0.112074781727081, 0.0677003101760989, 0.356697377914888, 0.768972475905424, 0.733003934255337, 0.645984940997318, 0.917553139812105, 0.95200709716976, 0.0267318617676999 }, new long[] { 2092, -7140, 1996, -3892, 6317, 937, 5133, 8421, -6501, -6414 }, new long[] { -7663, -815, 6378, 514, -3228, -7183, -9811, -8074, -4348, 150 }, new int[] { -7796, -8171, -5777, 3856, -9383, 1046, -8791, 102, -964, 9801 })]
		[TestCase(new long[] { 8788, 8411, -6157, -1122, -3555, 8284, 9290, -5589, 4571, 5425 }, new int[] { -4555, -1386, 2206, 1610, 9444, -8877, -4137, 839, -9636, 2563 }, new short[] { 4472, 994, 2699, -1109, 8330, 265, 8636, 8138, -4508, -4728 }, new double[] { 0.486504873487402, 0.251574919210549, 0.469341693664594, 0.184808206364889, 0.239811598434957, 0.19615542338982, 0.26714138466266, 0.375062449544232, 0.203514231929329, 0.424257452331603 }, new long[] { -6475, 5777, -2647, 224, -5293, 3589, -378, 2610, 4410, 9493 }, new long[] { -4815, 367, -260, 6470, -4670, -2205, -4287, 4951, 546, 6178 }, new long[] { 9647, -8847, 8917, -698, -4303, -9586, 9225, -1489, -3184, 5521 }, new long[] { 5777, 8360, -3230, 1877, -959, 8693, -6356, -7524, -5815, -5257 }, new long[] { -9355, -3973, -6270, -4003, -9912, 9361, 5291, 2915, 8365, 7001 }, new double[] { 0.910555818076504, 0.519546368866948, 0.84774976402882, 0.394573654231883, 0.441823582836345, 0.118584693464723, 0.842957239059246, 0.90255062789775, 0.226457388245714, 0.214667699399715 }, new long[] { 4362, -8887, -4203, 8888, -6283, -3176, -6401, 7861, -2568, -3364 }, new long[] { -5848, -6762, 767, -4195, 5535, 3622, 7422, 2922, -785, -3666 }, new int[] { -4878, -3688, 143, -187, 7310, -4612, -8592, 8877, -6957, -3330 })]
		[TestCase(new long[] { -8163, -4407, 7945, 9889, 379, 9530, -9769, -5159, -7719, 3263 }, new int[] { 5763, 7429, -4515, 1731, 2850, 4973, 9622, 1150, 2355, 5213 }, new short[] { -5051, -6062, -1163, 8194, 9171, -1948, 968, 5983, -8421, 8327 }, new double[] { 0.270838895007427, 0.236007655149329, 0.74102662864189, 0.0381251969552251, 0.239968118369564, 0.927989688668395, 0.264541307587429, 0.543853136498413, 0.771234068913029, 0.800206845067538 }, new long[] { 3393, 2583, 642, 5950, 569, -2308, -9171, 8410, 6960, -7662 }, new long[] { -4235, 255, -3477, -2172, -8278, 7897, 6754, 9749, -9280, -7670 }, new long[] { -1436, -5754, -6737, -6047, -2152, 1043, -7389, -5277, -3067, 4290 }, new long[] { -316, -1253, 5725, 6351, -8178, 2364, 3294, 2885, -2373, 1481 }, new long[] { -2776, 2556, 9021, 9239, 2564, 5160, 8197, -3006, 9041, -3099 }, new double[] { 0.0902301143343701, 0.277022968175366, 0.507939701670753, 0.654808572332751, 0.372051823126176, 0.45740517110443, 0.466105709069458, 0.334529442402781, 0.40519785201419, 0.976271974377461 }, new long[] { -4917, 6105, 1479, -7328, 2653, 7017, 4528, 170, -3992, -643 }, new long[] { -5395, -6129, 2123, -763, 5104, 6005, -4776, -5978, 1387, 2685 }, new int[] { 2845, 5615, -4320, -9967, 2486, -5856, 8586, -7369, -1089, 2671 })]
		[TestCase(new long[] { -6957, -3395, -5217, -1899, -3600, 1117, -8921, 6351, -3412, 5545 }, new int[] { -9367, -1972, -9013, -314, -7702, 7934, 3415, -9077, 7990, 1434 }, new short[] { -6074, -4698, 5302, 5417, -3320, -534, 426, 1447, 184, -1489 }, new double[] { 0.92155059469936, 0.594967360885333, 0.0629855324807509, 0.666759032600913, 0.315698494350397, 0.899996005417777, 0.954407213700194, 0.201165675279296, 0.141861102144169, 0.199363682511898 }, new long[] { 4928, -1129, 7432, 5840, 2053, -5181, 4630, 5993, 7734, 4551 }, new long[] { 726, 7664, -5360, 7475, -1252, 7740, 1300, -636, -8577, 6933 }, new long[] { -9307, -370, -3831, 8076, 7114, -1267, -3231, -2349, -6627, -5702 }, new long[] { 8845, -606, 8083, 4003, 6504, 5054, -2132, 9461, -6634, -8138 }, new long[] { 4833, 4432, 3712, 5631, 7783, -9233, -2739, -6215, -5411, -1426 }, new double[] { 0.334962353731954, 0.486247987712849, 0.130098146912688, 0.29514630199184, 0.164792727755752, 0.264956653241514, 0.135142900112617, 0.967839772798046, 0.936300213419041, 0.166043416674269 }, new long[] { 8049, -3019, 2621, 3438, 5704, -8665, 9579, 634, -9028, 3692 }, new long[] { -126, 1838, -4001, 9559, -7899, -3740, 5916, 535, -9705, 6348 }, new int[] { -8527, -7015, -6937, 4798, 7596, -878, -3208, 2181, 708, 1206 })]
		[TestCase(new long[] { 2351, -1489, -9262, -9955, -6188, -2146, -8188, -9725, 9926, 6449 }, new int[] { -8814, 6625, -7186, 895, 8698, 4860, -6272, -6957, -6196, 7036 }, new short[] { -618, 2167, 9062, -7622, -8150, 5065, -6080, 7821, 5840, -3416 }, new double[] { 0.727128433402222, 0.36994133953468, 0.996338036840939, 0.488202656380927, 0.067035696034802, 0.0681469790023505, 0.555099014916969, 0.297722465497312, 0.787495647458125, 0.712311204854544 }, new long[] { -5551, 5642, 607, -6156, 5163, -5153, -9827, 2165, 6099, -7262 }, new long[] { -4604, -6249, -1621, 3670, -8174, -9814, -553, 8358, 8194, -1255 }, new long[] { -6064, -6011, -5566, 3344, -8091, 3785, 6698, 3048, -444, 7335 }, new long[] { -6240, 7771, -2708, -443, 2588, 3737, -8439, 5220, -2787, 7001 }, new long[] { 4894, 1752, -8276, 3104, -8811, 793, 9019, -3743, -2060, -8842 }, new double[] { 0.595801462696773, 0.637112465518113, 0.387964129628597, 0.350293293758432, 0.515560386476834, 0.0229865298713495, 0.560518665965888, 0.863149851962528, 0.0967614734995931, 0.0689041805774459 }, new long[] { -1852, -2877, -7388, 8762, 8976, -2376, 6457, 8821, -8917, -1913 }, new long[] { 8623, 4225, 1147, -8806, 3848, 2182, -7734, 1328, 2156, 1114 }, new int[] { 4765, 443, -4889, -1601, -4579, 1016, 12, -9713, 9244, 2129 })]
		[TestCase(new long[] { -7471, -5702, 3285, -4165, -1144, -2226, -858, -7039, 4126, 3564 }, new int[] { 4334, -9800, -4825, 9851, -7467, 7689, -8404, -3433, 3156, 8127 }, new short[] { 8193, 9880, -4893, 820, -3387, 7703, -7986, 4211, 3342, -2038 }, new double[] { 0.88051295461157, 0.808592942454197, 0.978821629648479, 0.447623439807269, 0.277939144185716, 0.7163942608593, 0.0470165689694772, 0.265661797609954, 0.616883627891952, 0.303783859733392 }, new long[] { -6958, 9304, 7201, 8591, 6778, 4567, -4730, -4742, -4132, -2269 }, new long[] { -578, -6553, -2870, -8882, 3934, -7353, 9189, -7534, 9221, 1150 }, new long[] { -4238, 4929, -383, -3833, 5953, 8162, -9377, 6220, 4293, -1795 }, new long[] { 6749, 6280, 4228, -2918, 5087, 8888, -7319, -3486, 4041, 2043 }, new long[] { 2434, 6754, -1654, -4386, 8538, 4163, -956, 8458, 5017, -7086 }, new double[] { 0.75686036178696, 0.923770143149314, 0.304545792427168, 0.0593348066598805, 0.015742503579586, 0.405550487994007, 0.484450833631889, 0.551803290169595, 0.131898768773255, 0.930774492179404 }, new long[] { 3946, -951, 963, 7662, 980, 3139, -782, -9951, -3970, 5045 }, new long[] { 9965, 2676, -1576, -2821, 8715, -994, -3415, -5995, -2372, -8208 }, new int[] { -879, -7837, -8795, 1381, 3066, 8273, 190, 3041, -3233, -3022 })]
		[TestCase(new long[] { -800, 1643, -6123, 5425, 8096, -6612, -4207, 682, 4631, -4600 }, new int[] { -5052, -1004, 2430, 9970, -7053, -7539, 52, 8911, -7528, 1309 }, new short[] { -8472, -4314, -6590, -9151, -504, 1784, -2155, 9581, -5403, 2706 }, new double[] { 0.147482887444777, 0.808763684150187, 0.664044988185188, 0.95257335945618, 0.292301726197964, 0.41613767036057, 0.440067868884684, 0.649852007930098, 0.454071247695978, 0.766477715580947 }, new long[] { -6785, 5901, -628, -7771, 6843, -9874, -269, -8766, -1564, 606 }, new long[] { -1777, 1278, 571, 5456, -4549, -6484, -1765, -6971, -4068, -3687 }, new long[] { 5541, -3789, -3913, -8073, -7550, -1228, 5714, 3379, 4125, 4622 }, new long[] { 3658, 7054, -169, -2858, -1904, -4374, 6312, -8818, -5995, -629 }, new long[] { -7945, -3387, 1146, 3988, -5515, 1671, -4396, 7822, 3600, -7667 }, new double[] { 0.00441553769838788, 0.288661597431014, 0.353291094467645, 0.138443494280075, 0.98935109935205, 0.850196852744649, 0.490772885033289, 0.372297568420087, 0.988953644404632, 0.403634194006973 }, new long[] { -5589, 6350, -2893, 3811, 6947, 1166, -8551, -6568, -2637, 9824 }, new long[] { -2798, -2946, 9023, 6560, -5740, -1069, 5062, 2096, 7440, 777 }, new int[] { -6831, 7890, 9777, 1794, 4534, -2114, -10, -2937, -2645, 1091 })]
		[TestCase(new long[] { 5808, -1132, -8597, 5930, -5039, -4297, 9504, 7334, 7040, 3316 }, new int[] { 223, -7826, 461, 3774, 5129, 3034, -3250, 504, 8509, 856 }, new short[] { -8058, 7717, 4, -998, -5094, -3480, 6572, 5311, 9275, -937 }, new double[] { 0.0588850379264378, 0.719270634334195, 0.803850897496497, 0.813522542739996, 0.200823404454078, 0.916691772135297, 0.282565881164077, 0.154677666330094, 0.580057458756518, 0.92782033743701 }, new long[] { -574, 7726, 5055, -5875, -9445, -9004, -2570, -3996, 6663, -8498 }, new long[] { -8862, 9483, -1447, 6496, -849, 8090, 8862, 2400, 1025, 8440 }, new long[] { -870, -5806, 8058, -2020, 2139, 5837, -3903, 4190, -241, 6795 }, new long[] { -2616, -6344, 8902, 9952, -8567, -5785, -7336, -4119, -1552, -6089 }, new long[] { 9088, 569, 8647, 7775, -2074, -8306, -4166, 9578, -2879, -4074 }, new double[] { 0.97353614073877, 0.662531644414427, 0.603379488737965, 0.658007843260657, 0.471333692535448, 0.261596365487946, 0.983420783646135, 0.353808552657165, 0.599244271684086, 0.235768806299087 }, new long[] { 4898, 3238, 6244, 9867, 4116, 7480, -9418, -1401, 5065, -5062 }, new long[] { 5427, 2982, -6046, -2883, 9350, 8559, -4454, -9716, -9945, 446 }, new int[] { 5, -3483, -2928, -6166, 7324, 4132, 1587, -4256, 526, 6198 })]
		public void Count(long[] a, int[] b, short[] c, double[] d, long[] e, long[] f, long[] g, long[] h, long[] i, double[] j, long[] k, long[] l, int[] val)
		{
			NKeyHash<long, int, short, double, long, long, long, long, long, double, long, long, int> nKeyHash = new NKeyHash<long, int, short, double, long, long, long, long, long, double, long, long, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0]), 9);

			nKeyHash = new NKeyHash<long, int, short, double, long, long, long, long, long, double, long, long, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0]), 9);

			nKeyHash = new NKeyHash<long, int, short, double, long, long, long, long, long, double, long, long, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0]), 9);

			nKeyHash = new NKeyHash<long, int, short, double, long, long, long, long, long, double, long, long, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0]), 9);
		}

		[TestCase(new short[] { -7815, 497, -3512, -702, -5047, 3808, 866, 9685, 9384, -2977 }, new long[] { -8460, 4709, -1616, -3832, 2411, -7456, 9982, -4105, 4837, 8070 }, new long[] { 8865, -9607, 9840, 9087, -9777, 8104, 3500, -5763, -3234, 6622 }, new bool[] { false, false, true, false, false, true, true, false, false, true }, new int[] { 9659, 6512, -4839, -1435, 2356, -978, -9371, 9682, -8086, 6236 }, new short[] { -6323, -5449, -3725, 9162, -4352, -8207, 656, -2600, -923, -3153 }, new long[] { -9690, -3369, 2920, -7236, 7411, 2203, -8058, -3618, -8719, 9074 }, new double[] { 0.585248837054357, 0.757396584263722, 0.962902801559727, 0.145141457275088, 0.920533074960361, 0.117684317341859, 0.76158876100629, 0.563840516174138, 0.336571362491963, 0.559964387938364 }, new bool[] { true, true, false, true, true, false, false, true, true, false }, new int[] { -7319, -6561, 5758, 9788, 1626, 3029, -6407, -7602, 1152, -9846 }, new bool[] { false, true, true, false, false, false, false, false, false, false }, new double[] { 0.328014343198396, 0.968971367445295, 0.0334068196981246, 0.893854052710279, 0.468387193730281, 0.324576403631166, 0.215389629926248, 0.119626180324529, 0.490800837749057, 0.617564828422649 }, new short[] { -855, -1665, 26, 8183, 6395, -1733, 9387, 9467, 1276, -4619 })]
		[TestCase(new short[] { 8761, 2834, -9874, -3420, -5881, -6766, 5411, 9484, -4002, -5581 }, new long[] { 9768, 9687, 2852, 3061, 6534, -6699, -7229, 7881, 422, -4864 }, new long[] { -1277, -8799, 2580, 8800, 1008, 8746, -5779, -9778, -3558, 6264 }, new bool[] { false, false, true, true, false, true, true, true, true, false }, new int[] { 1079, -5177, 6395, -4601, 2581, -543, 5480, 6963, -8350, 3096 }, new short[] { -4502, -8492, -953, -3858, 6657, 7562, -9744, -8676, 5570, -4629 }, new long[] { 9011, 5191, 3044, -268, 5278, 3945, -2406, 7479, -1469, -7189 }, new double[] { 0.202239365876764, 0.434049365312815, 0.206145553014309, 0.214340016345652, 0.702796850215083, 0.195001368967351, 0.24016416456558, 0.359161439518985, 0.310952428873141, 0.0776021611306826 }, new bool[] { false, false, true, true, true, false, true, false, true, false }, new int[] { 3470, 7931, 8517, -1611, -2876, 5886, 1777, -3335, 118, 8635 }, new bool[] { false, true, false, true, false, true, true, false, true, true }, new double[] { 0.637981164566232, 0.653543013918001, 0.755196947490423, 0.700942715490676, 0.105201116346382, 0.587857417570361, 0.831016044519383, 0.985002804540565, 0.948142292885176, 0.382292114841888 }, new short[] { 7167, -8360, 8764, -8437, -661, -3887, 162, 5733, 7163, 8167 })]
		[TestCase(new short[] { 2121, 8138, 7063, -2417, 9687, -4733, 8819, 9732, -5706, 3952 }, new long[] { 249, 2018, 3868, -4042, 4208, -9598, -7171, -5500, -3714, 5365 }, new long[] { 9265, 2077, -2298, -7526, -8530, -9774, 9233, -3126, -499, -7060 }, new bool[] { false, false, false, true, false, true, true, false, true, true }, new int[] { 2936, 6886, 5406, -4989, 7395, -4849, -2230, 2808, -2647, -1061 }, new short[] { -6714, -4336, -550, -8201, 8901, -9955, 437, 4591, -3885, 9462 }, new long[] { -3967, 1947, 233, -8645, -2699, -1400, -5576, 9951, -4678, 9587 }, new double[] { 0.219700114903832, 0.765339215176804, 0.508465282855772, 0.472345592208368, 0.121467520539401, 0.118978139534117, 0.833530587532339, 0.134584542892214, 0.253819441075353, 0.815935706168383 }, new bool[] { true, false, true, false, true, false, true, false, true, false }, new int[] { -5816, -8584, -8591, 4865, 805, -9010, -3345, 4053, 7708, -1203 }, new bool[] { false, false, false, false, false, false, true, false, true, true }, new double[] { 0.168669532597377, 0.387283486494461, 0.475756116898617, 0.489765375614988, 0.350406737695638, 0.980308245858321, 0.62133627693231, 0.483566947506539, 0.0849413196951809, 0.315532389709508 }, new short[] { 6399, 8625, -5060, -5270, 5404, -7020, 3898, 5302, 8640, -8558 })]
		[TestCase(new short[] { 5724, -7382, -5017, 6279, 5591, -5359, 8937, 1756, 6016, 1677 }, new long[] { -4504, 2197, -3571, 8491, 7217, 6437, 1899, 1611, -2141, 1199 }, new long[] { -1437, 6982, 2354, 1398, 2396, -7898, -7121, -7240, 2359, -8433 }, new bool[] { true, false, false, true, false, false, false, true, true, false }, new int[] { -9330, -9328, 3653, 21, -9183, -5796, 2197, -3553, -2488, 8966 }, new short[] { 1079, -7712, -2554, -2558, 2877, 8741, 261, 3582, -6116, 3491 }, new long[] { -8237, 6179, 9396, 4451, 7598, -4695, 835, -1499, 7694, 6461 }, new double[] { 0.683700163235748, 0.933216369214103, 0.870446407175831, 0.274476860312036, 0.526580176095748, 0.394604859591743, 0.166450415815436, 0.116666495388684, 0.52919176152404, 0.409703846745986 }, new bool[] { false, true, true, true, true, true, true, true, false, false }, new int[] { 494, -819, -647, -9287, -9392, -5510, -8726, 9200, 2422, 5510 }, new bool[] { true, false, false, true, false, true, false, false, true, false }, new double[] { 0.770669249245277, 0.396426236907219, 0.149953988450558, 0.784440812554416, 0.179409741041907, 0.266538907432248, 0.046609561912068, 0.300263158651191, 0.198320740926229, 0.290397349880262 }, new short[] { 2558, 6914, -6549, 5639, -4032, -5506, -688, 6696, -5116, -3956 })]
		[TestCase(new short[] { -3380, -5872, -89, 5072, 4826, -3793, -2319, -5800, -1900, 8070 }, new long[] { -3086, 790, 7010, -9935, -3358, -7433, -3817, 3663, 7122, 5275 }, new long[] { -6443, 5266, 5234, -3384, -7047, 6451, -9751, 3110, -4917, -9199 }, new bool[] { false, false, true, true, true, true, true, false, false, true }, new int[] { 7650, 6733, 7905, -4104, 8894, -8230, 9903, -6613, -1000, -6598 }, new short[] { 8310, 5647, 9572, -392, -7512, 1351, -1107, -6703, 2120, 8374 }, new long[] { -4040, 4568, 9115, -2700, 4967, 8730, 3717, -3855, -8301, 5354 }, new double[] { 0.227416417201709, 0.912785882555314, 0.640093255154832, 0.987066213966844, 0.881243267041279, 0.341129769729976, 0.868056268835466, 0.466983291537959, 0.385975968272414, 0.0591788031436404 }, new bool[] { true, true, false, false, false, false, false, false, false, false }, new int[] { -7605, 4721, 5804, -7512, 1423, -6917, 7616, 607, 927, -9835 }, new bool[] { false, true, false, true, true, false, false, true, true, true }, new double[] { 0.699535359488584, 0.977623308067035, 0.77882106778157, 0.546874097803083, 0.0913590952248122, 0.454879280391559, 0.522876391430794, 0.871789584342292, 0.240524515621608, 0.3756212714946 }, new short[] { 123, -3747, 7763, 4681, 2961, -173, -7548, 314, -1682, 4542 })]
		[TestCase(new short[] { -794, -3246, 8410, -2443, 3132, -7211, 5171, 467, -7171, -7566 }, new long[] { -5390, -1224, 5482, 2715, 3023, -7157, 9144, -5132, -9339, -7673 }, new long[] { 2623, -9817, -4202, -6583, 39, -8200, 5994, -2992, -9316, -973 }, new bool[] { true, true, true, true, false, false, false, false, true, true }, new int[] { 3925, 9988, 4607, -7621, -7095, -8650, 769, -4950, -8341, 119 }, new short[] { 680, 7582, -344, -4007, -8080, -975, -9042, 4995, 7515, 1334 }, new long[] { -3207, -1834, -215, 3801, -5171, 2077, 7260, 8042, -3742, -4212 }, new double[] { 0.0850341031723815, 0.556250082122278, 0.353138694704109, 0.0810184502420102, 0.420029456922798, 0.63171222369732, 0.278684570118172, 0.170954521359389, 0.025606243417415, 0.434549665746535 }, new bool[] { true, true, false, true, true, false, false, false, true, true }, new int[] { -3719, -3855, 504, -3529, 2246, -4239, 204, -9193, 7549, 825 }, new bool[] { false, true, true, true, false, true, true, false, true, false }, new double[] { 0.172529670490199, 0.876881053148248, 0.724204150365761, 0.441266536918127, 0.0153195164237728, 0.792312273193296, 0.140838197963703, 0.961109142732392, 0.772833124628678, 0.240297242645313 }, new short[] { -798, 1738, -7476, -1177, 9505, 5555, -9378, -9406, -626, -7358 })]
		[TestCase(new short[] { -7569, -5231, -4130, -313, -5396, 8300, 2153, -521, -7855, 8788 }, new long[] { -498, 4840, -2068, -3764, 3983, -1257, 1660, -8320, -3835, 6400 }, new long[] { -7056, 982, -4650, 2744, -8375, 2349, 203, -30, 6363, 2862 }, new bool[] { true, false, true, true, false, true, true, false, false, false }, new int[] { -6306, 3338, 7077, 6666, 5304, 4359, -6192, 6286, 4838, 764 }, new short[] { -6103, 8941, 4428, 2972, 9696, 1446, 9418, 3124, -1937, 2253 }, new long[] { -1901, -7815, 3113, -719, 9853, 9572, 6179, 2980, 9379, 5300 }, new double[] { 0.853695086135387, 0.343143989026148, 0.872841640316342, 0.207941525246921, 0.63541706261943, 0.480217034220797, 0.695207426648218, 0.434083845668511, 0.871972580380725, 0.363183152099691 }, new bool[] { false, true, true, false, false, true, true, false, true, true }, new int[] { 9262, 8543, 6734, 1967, 3906, -8490, -9774, -2201, 6812, 5731 }, new bool[] { true, true, true, true, true, true, false, true, false, true }, new double[] { 0.877115471697001, 0.536876086395642, 0.784252283528565, 0.0399445151164869, 0.185554930095354, 0.709074663328507, 0.352634990752039, 0.375718903437126, 0.0156534412017341, 0.993062601421523 }, new short[] { -5924, 491, 7727, -6028, 6037, 8528, 127, -4510, 251, 1199 })]
		[TestCase(new short[] { -620, -3893, 1868, -8291, -916, 7716, 7008, 5593, 1909, 1934 }, new long[] { 8507, -4771, -4575, -4839, 7865, -1474, -7140, 5935, -1742, 9724 }, new long[] { 4455, 2710, -2514, 6950, 1656, -2310, 3097, 2935, -6500, 5160 }, new bool[] { false, true, false, false, false, true, true, true, true, false }, new int[] { 7171, 1458, 5604, -1621, -8645, 8845, -4932, 2567, -3895, -2487 }, new short[] { 5669, 4191, 7230, 526, 6743, 6668, 8619, 4916, 50, -8604 }, new long[] { -5379, -5926, 2094, 6748, -4969, -7487, -4789, 6359, -5553, -3569 }, new double[] { 0.48285116696863, 0.444100875614258, 0.211030177870314, 0.113153869804532, 0.127653174627411, 0.149847847944986, 0.855269691839474, 0.955331491285624, 0.779916643062568, 0.640558360442779 }, new bool[] { false, false, false, true, true, true, true, false, true, false }, new int[] { 2815, -6047, -6072, 321, -8624, 3099, 9363, 8855, -6650, 8840 }, new bool[] { true, false, false, true, true, false, false, true, false, true }, new double[] { 0.97819170261649, 0.975709127716585, 0.965940692911828, 0.861973688407789, 0.938619322580574, 0.20451132869558, 0.862048656615451, 0.805381445123526, 0.86291862133095, 0.615819428868508 }, new short[] { -6252, 5717, -5959, -9597, 3614, -4294, -5044, 3899, -9110, -546 })]
		[TestCase(new short[] { -6366, 8248, 5757, 6755, 9174, 3914, 2407, -2841, 8130, 2701 }, new long[] { -7257, -6203, -8480, 8572, -5518, 3301, -5366, -3312, 1548, 7283 }, new long[] { 5857, -6742, -8401, 1032, 5094, 7917, -5332, -2279, -3940, 2149 }, new bool[] { false, true, true, true, true, false, false, false, true, false }, new int[] { 1682, 83, 7975, -5443, -425, 9949, 4199, -4532, 5920, -9685 }, new short[] { -8926, 8267, -7648, -6394, 3594, -9622, 6650, -5274, -8337, -8741 }, new long[] { -752, -5312, -8900, -4017, 869, -3329, -283, -7000, -1541, -6833 }, new double[] { 0.477246082144438, 0.103523685179429, 0.4311454391252, 0.334565677370208, 0.280063401572436, 0.288776302844647, 0.264031153295204, 0.852076554136386, 0.0729103805836804, 0.757236604000086 }, new bool[] { false, true, true, false, true, false, true, true, false, false }, new int[] { -5336, 9030, -9098, 6806, 5609, -3003, -1015, 1993, 3686, -7095 }, new bool[] { true, true, true, true, true, true, false, true, true, false }, new double[] { 0.754787196756707, 0.980486121019575, 0.163351131213527, 0.325831435306851, 0.876956723573132, 0.502353348537513, 0.644419630358191, 0.767655776705433, 0.745240051646363, 0.365225136915792 }, new short[] { 2949, 9239, 8073, 8719, 8501, 513, -8829, 1815, 1081, 8604 })]
		[TestCase(new short[] { 6790, 3286, -6645, 8553, -5088, 2517, -7806, 9042, 4976, 2074 }, new long[] { 3918, 8060, 2471, 7104, 4641, -4945, 5763, 4383, 9266, -4436 }, new long[] { 4106, 3630, 7088, -3616, -45, 993, 3126, 8286, 4252, -9744 }, new bool[] { true, true, false, true, true, false, true, false, false, false }, new int[] { -2145, 3844, -9623, -7169, 3384, 4887, -3230, -9030, -5921, 3448 }, new short[] { 4749, -3214, 2548, -4480, -5501, -6839, 6197, 6970, -1399, 3917 }, new long[] { 9390, -6094, -5209, 4721, 4241, 6089, 3483, 3074, -3922, 2832 }, new double[] { 0.439914508461912, 0.552575402219116, 0.638917114883157, 0.712307862337822, 0.885400309639704, 0.0131098739863885, 0.662757746718245, 0.71296346407056, 0.64987292776344, 0.753322771169861 }, new bool[] { false, true, true, false, false, true, false, true, true, false }, new int[] { -4388, 9282, 6112, -2311, -4369, -6049, -944, -4345, -1412, 7294 }, new bool[] { false, true, true, true, false, false, true, true, false, false }, new double[] { 0.495252481426696, 0.0969176791128319, 0.198704846761518, 0.676674511598737, 0.484652044942906, 0.361649186518811, 0.484754242694357, 0.199277483485303, 0.460851950785542, 0.159744347520054 }, new short[] { 809, 4424, 8174, 8208, -2777, -485, 4938, -4909, -1384, 3757 })]
		public void Any(short[] a, long[] b, long[] c, bool[] d, int[] e, short[] f, long[] g, double[] h, bool[] i, int[] j, bool[] k, double[] l, short[] val)
		{
			NKeyHash<short, long, long, bool, int, short, long, double, bool, int, bool, double, short> nKeyHash = new NKeyHash<short, long, long, bool, int, short, long, double, bool, int, bool, double, short>(UnderlyingHashType.Dictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<short, long, long, bool, int, short, long, double, bool, int, bool, double, short>(UnderlyingHashType.ConcurrentDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<short, long, long, bool, int, short, long, double, bool, int, bool, double, short>(UnderlyingHashType.SortedDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<short, long, long, bool, int, short, long, double, bool, int, bool, double, short>(UnderlyingHashType.HashTable);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());
		}

		[TestCase(new long[] { 663, 7962, -6326, 5309, -7420, 7994, 8396, 4254, -4929, 6435 }, new int[] { -4606, -3513, -3019, 5518, 6681, -5976, 5135, -1240, -1082, -313 }, new int[] { 4052, 3028, -7695, 6265, -1727, 9870, 9161, -33, -3269, -2168 }, new double[] { 0.370486670346226, 0.307716690147164, 0.191547289579896, 0.158803765270302, 0.375570825476, 0.0123184337338053, 0.177441496950314, 0.710231853979748, 0.617975888595905, 0.354722437148319 }, new long[] { 218, 9501, -3862, 1164, -9719, -783, -3317, 5010, -9414, 8940 }, new long[] { -8980, 3047, -1876, 7290, 7194, 7633, 5658, -2593, -2961, -7291 }, new double[] { 0.941634192569942, 0.421554851076358, 0.37622756714757, 0.861907392675945, 0.451341396407849, 0.961914552823601, 0.132752986686655, 0.190186761873861, 0.400387589074852, 0.821789139798744 }, new short[] { -9524, -9067, 6399, -8176, 9467, 4549, -3108, 1138, 5986, 9054 }, new double[] { 0.659449093816545, 0.207580617259993, 0.469095876193184, 0.389449373534624, 0.340660379426861, 0.718083153813185, 0.901539199008392, 0.326963898878062, 0.29902724609665, 0.493834951191132 }, new short[] { -5412, 6141, -2832, -348, -1738, -8212, 1978, -1100, -7861, -8958 }, new double[] { 0.328055261787053, 0.143930683445153, 0.350168917491179, 0.207433728597795, 0.923364351933526, 0.00434410805084934, 0.832417641222671, 0.315049762052973, 0.891161428713781, 0.132272901540749 }, new int[] { 743, -5478, 1418, -2017, -481, 4680, 9048, 9734, 424, 4664 }, new long[] { -8791, 6115, 7822, 8130, 1848, -5667, 3764, -3251, 3560, 7680 })]
		[TestCase(new long[] { -7427, 7991, -999, 4946, 2494, 310, 7147, -4766, -678, -3273 }, new int[] { 7712, 1729, -1283, -6664, 9132, -9932, -5276, 9183, -9866, 3580 }, new int[] { -7261, 2242, 8473, -2526, 9832, 445, -4944, -1127, 2299, 4135 }, new double[] { 0.316117702199201, 0.495011692631529, 0.63701027754555, 0.00709610013621678, 0.00368208624594011, 0.637574202212307, 0.776028217177851, 0.823618174448432, 0.774371696531014, 0.96042845768874 }, new long[] { 7532, 3815, 413, -6300, 6951, -522, -2600, 4487, 8996, 1782 }, new long[] { 9607, 4579, -3384, 9979, 4942, 329, 9516, -8471, 5112, -7949 }, new double[] { 0.262747242703451, 0.413795420161353, 0.646669255870706, 0.759313175342657, 0.0201985691768111, 0.390653819958984, 0.949479159409869, 0.428706370028065, 0.16307225830996, 0.319090651496821 }, new short[] { -5453, -1748, -6302, -9075, 6047, -1077, -8170, 4775, 521, 355 }, new double[] { 0.152279556334149, 0.528365996446631, 0.493728495432869, 0.0258553167925474, 0.726349119435227, 0.587126060196723, 0.164238802699483, 0.638005462306554, 0.259928430085968, 0.48722587967628 }, new short[] { 3233, 3992, -8640, 3437, 3953, -742, -9116, 5227, -6704, -861 }, new double[] { 0.524406757449921, 0.941280247616247, 0.56133291291135, 0.63079713267777, 0.361862530169013, 0.567871122419774, 0.544128574684322, 0.28456828896169, 0.196612021511706, 0.301066838810717 }, new int[] { -1499, -5257, 1006, -5241, 9002, 4687, 8400, 2416, -9339, -1338 }, new long[] { -5471, -3770, -6623, 3516, 3147, 552, -3107, 259, -3029, -3208 })]
		[TestCase(new long[] { -1960, -3398, 1481, -8616, 9866, -5779, 9339, 7257, 3279, -6829 }, new int[] { -9139, 7592, -1172, 9176, -8754, -1507, -7012, 6600, 4433, 9265 }, new int[] { 855, -1533, 4567, 4632, -5388, -5740, 5449, 7708, 9467, 6684 }, new double[] { 0.2232733192962, 0.0311705661151421, 0.936044902976623, 0.857065683164199, 0.899093578988264, 0.0949533298122479, 0.663020946859857, 0.481191123594153, 0.244509516397728, 0.739187772729987 }, new long[] { 5346, -8856, 9135, 7488, -2198, -3064, 7400, -5801, 2272, -5344 }, new long[] { -2434, 290, 5824, -2295, 5934, 9572, 2032, 6847, 6771, 5608 }, new double[] { 0.438497001043752, 0.0815465492576112, 0.88952370634746, 0.82974388442456, 0.935204677719253, 0.0118269193972586, 0.94362561076117, 0.58432775763065, 0.0597680122869872, 0.967257780007672 }, new short[] { 5231, 3362, 1711, 9649, -6080, -287, -670, 7077, -3167, 7674 }, new double[] { 0.342852804038139, 0.562585959007305, 0.271851265463909, 0.740638454789593, 0.455987184055144, 0.708745751394306, 0.239930534847048, 0.550821485720026, 0.0602988754679909, 0.920433951504731 }, new short[] { -133, 6411, 2851, -718, -3985, 3715, -6647, -7457, 8784, -2434 }, new double[] { 0.403118892760537, 0.285752498677816, 0.150148336379858, 0.646377488806088, 0.471169873825819, 0.710100931911776, 0.928966849077943, 0.808709826696995, 0.189271611249666, 0.311122839018294 }, new int[] { 243, 4953, 16, 9095, -1248, 7517, 6193, -7021, -2524, -5470 }, new long[] { 5437, -2143, 480, -7212, -520, 8818, -9487, -7569, 3636, 202 })]
		[TestCase(new long[] { -3638, -3211, 8292, 9265, -386, -8857, -1751, 2509, -4610, 4917 }, new int[] { 5595, -1375, -2768, 4983, -1834, 4911, -3603, 3755, -9469, -1504 }, new int[] { 7521, -9624, 5065, 4256, 2126, -9792, 5233, -9782, -6550, 603 }, new double[] { 0.684536778686818, 0.807474657337868, 0.12687039381213, 0.679121418706664, 0.993090725966306, 0.172751935745008, 0.833067116715511, 0.537479113572035, 0.474154604819675, 0.38048787991539 }, new long[] { -730, -6314, 7587, 2557, -1066, -3186, -9373, 5496, 4620, 4566 }, new long[] { 2423, -3244, -8098, -4858, 2680, -4013, 1721, -5962, -2860, -593 }, new double[] { 0.295376688845165, 0.401623347029846, 0.453046237329508, 0.7392773780689, 0.0613494734565492, 0.972304244978495, 0.304350314337923, 0.682428455763696, 0.756085310483391, 0.235514868160484 }, new short[] { 8249, 5645, -5726, 2919, 9225, 3837, -7213, -7490, -4676, -4686 }, new double[] { 0.979060517148609, 0.986870770802196, 0.279747018720837, 0.444069802967864, 0.909017539075118, 0.346754157145859, 0.712462807405956, 0.869810690577054, 0.0450775558338862, 0.693785216982376 }, new short[] { 1732, 2624, -6389, -9922, -8296, -8762, 4623, -7196, 1330, -512 }, new double[] { 0.0363253620622332, 0.348825794807088, 0.0187675352295709, 0.495552388716281, 0.815832639958632, 0.8388477702806, 0.124155694676636, 0.44901938803914, 0.295753392994289, 0.942159040338434 }, new int[] { -6799, -787, 8712, -8173, -174, -3829, -7561, -9819, 6604, 4291 }, new long[] { -4802, -1309, 2746, -8753, 2976, -4373, 2036, -5803, 1217, 7988 })]
		[TestCase(new long[] { 9213, 9982, 1178, 5834, -5412, 2604, 9361, 5683, 2564, -8595 }, new int[] { -5547, -4730, 1480, -7940, 675, -7478, 3910, -8215, 250, 5531 }, new int[] { 8798, 4443, -3802, 7037, -5708, 2035, 4229, 9128, 6933, 690 }, new double[] { 0.23701617365564, 0.914337643847958, 0.888138117216592, 0.396297155132656, 0.981449487610464, 0.16082493456119, 0.901715380093882, 0.143916963200978, 0.861958092479947, 0.861050489293901 }, new long[] { -3191, -3246, -2384, 5201, -160, 9926, 7208, 688, 570, 456 }, new long[] { 1714, 252, 3945, 5684, 9188, -5229, 3785, 4139, 1544, 2551 }, new double[] { 0.918759827464241, 0.0116357938440683, 0.937499817897333, 0.0936885485861863, 0.833153595138878, 0.308260818621265, 0.375305302150224, 0.177760142450109, 0.121469027884989, 0.372964706911223 }, new short[] { -5513, 1032, -5454, 3029, -1275, 2045, -3170, 995, -2801, -5636 }, new double[] { 0.741303412123259, 0.177042510442921, 0.427956989699955, 0.323850002290611, 0.948822044743608, 0.724370100407102, 0.217043257419506, 0.103862119421299, 0.436814661341167, 0.742938770327223 }, new short[] { -569, -6105, 1333, -5311, 8844, -3424, -1996, -4258, 8537, -6324 }, new double[] { 0.6210927160555, 0.682722183727996, 0.412963356549369, 0.155545745117378, 0.298547423118049, 0.034086077024269, 0.285418642352064, 0.0458212113221275, 0.348073407238383, 0.357190448025796 }, new int[] { 7940, -7209, -3058, -2817, 7724, 4833, 1673, 2272, -7101, -7823 }, new long[] { -8174, -4570, 4818, -2429, 8027, -9407, 9698, 9855, 4183, -7850 })]
		[TestCase(new long[] { -5957, -8910, 2456, -6475, 1940, -8827, 5281, -4551, -9492, 8293 }, new int[] { -1220, -6574, 5115, -8406, 6917, -3359, 6952, -5847, -3037, -5987 }, new int[] { 4901, 5730, -7155, 6362, -8148, -3006, 8834, -9310, -4917, -4620 }, new double[] { 0.0491302372185188, 0.292584361179073, 0.336638698045462, 0.240637705307751, 0.155080282667223, 0.842642311864832, 0.516648895813454, 0.170881912191809, 0.762052379903408, 0.827680302237943 }, new long[] { 9551, -3774, 1766, -5396, 3396, 8399, 313, 3226, 652, 1387 }, new long[] { -6360, 5546, 2893, 172, -2752, -1688, 8243, 6093, -8325, -5051 }, new double[] { 0.11680452577621, 0.729646054901949, 0.018296459232595, 0.756340648865486, 0.86560573050082, 0.146367096875965, 0.834583348051916, 0.515151006875164, 0.924543930648148, 0.0032453052714678 }, new short[] { 6307, 3534, -1089, 408, -5540, -1323, -6035, 8240, -7032, -6548 }, new double[] { 0.833995062780564, 0.280455434825483, 0.501790458570137, 0.684715768641194, 0.0870136497947451, 0.271763063162455, 0.647881699096356, 0.828029529577135, 0.878290087859281, 0.73950218210905 }, new short[] { 8607, 4238, -8255, 293, 4217, -5039, -4140, 6639, -2709, 469 }, new double[] { 0.0854121670524646, 0.000503463670845825, 0.736777337145422, 0.529397335149998, 0.754015969463631, 0.505192980405499, 0.331830888209786, 0.124251345230383, 0.285673986787756, 0.928527092527844 }, new int[] { -5651, -9995, 3127, 8222, -1731, 6726, -5442, -3328, 3386, 1876 }, new long[] { -30, -9867, 2736, -6298, -8542, -7930, 1790, 8616, 6190, 9497 })]
		[TestCase(new long[] { -7182, -2676, 950, 2496, -8256, 6669, 873, 9446, 8613, 1636 }, new int[] { 8797, 472, 847, 8994, 442, 8604, -8887, -6478, -7974, 7489 }, new int[] { -9596, 9186, -6745, 5413, -9499, -8421, -2726, 1034, -868, 3011 }, new double[] { 0.915645297111778, 0.400952908397165, 0.314675804839784, 0.310730913333004, 0.78767766793616, 0.851215031394369, 0.45264206242405, 0.0315229804401859, 0.824040544603039, 0.579907411979468 }, new long[] { -4146, -4890, -1942, -8249, 3077, 9496, -715, 3741, 3258, -7147 }, new long[] { -9041, -1729, 6591, 8700, 9095, -6370, -5929, 5536, 1997, -9833 }, new double[] { 0.469849054454756, 0.991942509073737, 0.515823404079221, 0.280117909088786, 0.666175372277468, 0.538979266555505, 0.208954549026189, 0.231624629456375, 0.162085327395278, 0.670893878522745 }, new short[] { -447, -9518, -2959, 426, 1636, 5292, 1130, -8495, -7663, -8996 }, new double[] { 0.61466007289228, 0.676544620970518, 0.88880274998434, 0.313988853392186, 0.602717794292941, 0.502153894166534, 0.571334223529014, 0.379626949960192, 0.355924351772258, 0.606218653082018 }, new short[] { 2954, 3515, -1366, 6315, -7798, -3985, 4792, -7543, -1573, -7700 }, new double[] { 0.765900494887447, 0.232573646229028, 0.525012596289167, 0.992038960099238, 0.664976178512432, 0.0238170926570041, 0.0614756671998071, 0.308266801903149, 0.35319316263925, 0.190132522578413 }, new int[] { 2498, -7432, 3201, 994, -2127, 5865, -7936, -5962, 3547, -6718 }, new long[] { 9351, 6585, 7513, 1117, -9535, 6035, 1847, 724, -1773, -4377 })]
		[TestCase(new long[] { -9498, -1324, 3076, -9962, -4315, -2358, -6968, 7934, 2979, 1577 }, new int[] { -1186, -4738, -9470, -6683, 9624, 387, -9684, 7637, -1555, -3664 }, new int[] { -6047, 756, -1092, -4853, -7053, 8730, -2862, 9381, 9376, 7262 }, new double[] { 0.431416608128425, 0.525248032773495, 0.896973276462859, 0.0720659545958349, 0.165097552428533, 0.191202960531787, 0.474483092070782, 0.658234672927407, 0.265527960502323, 0.0115059437283808 }, new long[] { 2835, -5871, 1056, -8029, 4466, 4091, 6057, 4197, 1491, 75 }, new long[] { 5721, 4209, -7718, -8108, -8328, -255, 9766, -2069, 7090, -3046 }, new double[] { 0.025213058118342, 0.182386102705442, 0.927902329213872, 0.785845860273505, 0.147484093507512, 0.915430194193232, 0.366094145163006, 0.954367832725108, 0.000694276765312197, 0.790066196019792 }, new short[] { -9100, -2850, 2327, -1786, 3499, 9823, 9698, -3062, 679, -1145 }, new double[] { 0.133679084076397, 0.646964920054639, 0.394548404214228, 0.465074946854764, 0.0770776812346083, 0.720910678487695, 0.411216129274674, 0.802433675063045, 0.988527471659951, 0.677867100424071 }, new short[] { -5943, -8440, 6073, 8356, 9724, -812, -4430, 5338, 9019, 6157 }, new double[] { 0.338483476237619, 0.848525979019946, 0.709214171724959, 0.784531321741888, 0.458878620275705, 0.428603575764505, 0.0941393352552035, 0.70334211629971, 0.419558086162227, 0.0923257270326492 }, new int[] { 44, 2830, 7250, -1762, -5719, -2434, 5756, -743, 4174, -1468 }, new long[] { 84, 1273, 9315, -3543, 1744, 9338, 1075, 3969, -1511, -5687 })]
		[TestCase(new long[] { 4254, -5639, -2082, 4520, -7914, -4296, 8754, 2200, -9875, 2969 }, new int[] { 2535, 4157, -2342, 7923, -6486, 1225, -5691, -2163, 4077, 2160 }, new int[] { 3430, 6312, -8834, 488, -3925, 5495, 7652, -2272, -6053, -161 }, new double[] { 0.87479845382031, 0.395649593973369, 0.278945214710638, 0.203962877022085, 0.379586611119838, 0.284241182861962, 0.245672079383243, 0.136513422772527, 0.307620590695935, 0.928818918265784 }, new long[] { -1189, -6442, -867, -8793, 5995, 5926, -6383, -8606, -7055, -9480 }, new long[] { 5030, -6759, 9890, 6326, 880, 7941, -6803, 7427, -1552, -3411 }, new double[] { 0.402467487101661, 0.551363752945961, 0.4127326646879, 0.514275329892652, 0.773675651649793, 0.231121749259123, 0.428928798264325, 0.178912711878732, 0.516615133507464, 0.891378107895785 }, new short[] { -3687, -8421, -8314, 5501, -6648, -125, -2819, 9957, 4492, 147 }, new double[] { 0.594038124938513, 0.813047001516934, 0.239179109800225, 0.17133659178919, 0.740347049078134, 0.712828091677664, 0.401064682472993, 0.462593060667903, 0.659916275488174, 0.482493752838342 }, new short[] { -7510, -2514, 4282, 9563, 526, 7781, 5301, 8846, -4267, 1373 }, new double[] { 0.36741125367927, 0.00187216932041206, 0.553023482930392, 0.255829777687709, 0.710320827416294, 0.672703694399774, 0.0777561930370313, 0.219498999984702, 0.648804796230423, 0.0503186099465557 }, new int[] { 761, -6761, -7063, 8299, 4706, 1788, -3755, -5171, 5478, -8782 }, new long[] { 6600, 9325, 379, -9316, 5338, 8826, -2705, -7879, -5024, -4431 })]
		[TestCase(new long[] { 4572, -1666, 4225, -6880, -7200, 1843, -4799, 9666, -779, -8646 }, new int[] { 2701, -6368, 6275, 2191, 8887, 9250, -5449, 5982, -5142, 8737 }, new int[] { 1538, 473, -6630, -5484, 4771, -1978, -342, 378, -222, 5378 }, new double[] { 0.307992684798312, 0.971760535599552, 0.97076451963315, 0.370391075206171, 0.321678569690175, 0.121418180466359, 0.450589686376317, 0.990806886922012, 0.775047552667115, 0.143197998471185 }, new long[] { -3411, -3422, 5607, 4125, -1484, 2969, -6948, 8187, -8205, 6086 }, new long[] { 4276, 1310, 7262, -3763, 4028, -5900, -5034, -289, -1653, 4776 }, new double[] { 0.109290222688248, 0.741121416325272, 0.494455269768115, 0.692056086236637, 0.759650669880049, 0.66331136304108, 0.210801162855141, 0.443397189231309, 0.287919095851443, 0.822997915941755 }, new short[] { 239, -5265, -9516, -8006, 2150, -5037, 4865, -757, 5999, -8196 }, new double[] { 0.248528042923905, 0.573476962080913, 0.429196818000263, 0.68451571217017, 0.0550979809160801, 0.742445679727218, 0.108619435740923, 0.658960984860994, 0.668926347824245, 0.116730407866058 }, new short[] { 7462, 9300, 1469, -9275, -9320, 1765, 6686, -8232, 8931, 5248 }, new double[] { 0.437690221442697, 0.709150283927634, 0.621479674997497, 0.266707368319252, 0.292410671381471, 0.477169132082336, 0.54143055320784, 0.763484540750964, 0.704269556190944, 0.453351044772822 }, new int[] { -767, 5721, 3710, -3455, -193, 716, -3761, 6198, 2738, -9654 }, new long[] { 1093, 1036, 5488, -6575, 8995, 937, 3264, 9757, -8684, -9613 })]
		public void Forloop(long[] a, int[] b, int[] c, double[] d, long[] e, long[] f, double[] g, short[] h, double[] i, short[] j, double[] k, int[] l, long[] val)
		{
			bool[] found = new bool[9];
			bool allFound = false;
			NKeyHash<long, int, int, double, long, long, double, short, double, short, double, int, long> nKeyHash = new NKeyHash<long, int, int, double, long, long, double, short, double, short, double, int, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, int, int, double, long, long, double, short, double, short, double, int, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Key11 == l[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Key11 == l[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, int, int, double, long, long, double, short, double, short, double, int, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<long, int, int, double, long, long, double, short, double, short, double, int, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, int, int, double, long, long, double, short, double, short, double, int, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Key11 == l[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Key11 == l[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, int, int, double, long, long, double, short, double, short, double, int, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<long, int, int, double, long, long, double, short, double, short, double, int, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, int, int, double, long, long, double, short, double, short, double, int, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Key11 == l[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Key11 == l[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, int, int, double, long, long, double, short, double, short, double, int, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<long, int, int, double, long, long, double, short, double, short, double, int, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, int, int, double, long, long, double, short, double, short, double, int, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Key11 == l[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Key11 == l[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<long, int, int, double, long, long, double, short, double, short, double, int, long> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);
		}

		[TestCase(3101, -8257, -4408, false, 916, -38, 0.276350952347904, false, -972, 8587, -5843, 7716, 0.93467944252057, -994)]
		[TestCase(-3661, 4909, 6278, true, 3954, 3699, 0.0396174034288234, true, -4587, 2959, 3494, 9018, 0.583815973523919, -7010)]
		[TestCase(-1643, -8818, 6323, false, 1942, 1177, 0.516094872036993, true, -4652, -1660, -1157, 1352, 0.742907475560395, -2213)]
		[TestCase(-5926, 1721, 6594, true, 2093, 34, 0.845593847728145, true, 5279, 2950, 2947, -4605, 0.1759578996226, 6968)]
		[TestCase(6329, 2630, 1429, true, 8284, -7460, 0.606605966857917, false, -7734, 9963, -4225, -2484, 0.934196114975119, -916)]
		[TestCase(-437, -2059, -7771, false, 8841, 3006, 0.603028013651738, true, 6364, 8162, -3074, -8356, 0.303841300915853, 5424)]
		[TestCase(-4098, -6626, 1243, false, -2341, 3352, 0.0461997403978369, true, 6908, 6944, 3067, 2319, 0.78268719081892, 6225)]
		[TestCase(-543, 6630, -442, false, 1350, -2171, 0.168455183584455, false, 722, 346, -3448, 512, 0.245416557996262, -7359)]
		[TestCase(6265, 3266, -5027, true, 6460, 6706, 0.0972892535372122, true, -1278, 9223, 9855, -4668, 0.407980732809743, 6845)]
		[TestCase(1030, -4716, -465, false, 7352, 5834, 0.211662658588804, true, -1394, -7652, 291, 8247, 0.602782492340907, 8560)]
		public void Add(int a, long b, int c, bool d, long e, int f, double g, bool h, short i, int j, short k, short l, double m, short val)
		{
			NKeyHash<int, long, int, bool, long, int, double, bool, short, int, short, short, double, short> nKeyHash = new NKeyHash<int, long, int, bool, long, int, double, bool, short, int, short, short, double, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<int, long, int, bool, long, int, double, bool, short, int, short, short, double, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<int, long, int, bool, long, int, double, bool, short, int, short, short, double, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<int, long, int, bool, long, int, double, bool, short, int, short, short, double, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m));
		}

		[TestCase(-2090, true, 0.236068146878885, 0.300964370510059, 9667, 0.32614251613903, 0.815450785595668, false, -9186, 0.00146466679939286, 3159, 0.453672914511372, 8406, 6531, -5338)]
		[TestCase(-7374, false, 0.910646576392765, 0.232585798591648, -6614, 0.31205693460631, 0.391217197473728, true, -7288, 0.844312072193395, -124, 0.0197813855576242, -2611, 3309, 3109)]
		[TestCase(663, true, 0.0777485268552548, 0.683398246152046, 1824, 0.913623346906911, 0.88128549274117, false, 8579, 0.276639976201877, -7747, 0.360507014375416, -9914, 9967, -6013)]
		[TestCase(9370, true, 0.995930226052147, 0.949068202613419, -651, 0.503637478455732, 0.88227059267567, true, 895, 0.216207477830447, -9913, 0.55531642332455, -7988, -866, -207)]
		[TestCase(-3872, false, 0.606524585097341, 0.385112981025648, -634, 0.737678443890847, 0.375924387656117, false, -5291, 0.319428228456261, -5000, 0.103934261996268, 9632, 9118, -8866)]
		[TestCase(9030, false, 0.96291390944408, 0.936234894644578, 7514, 0.499958000378664, 0.0238511595054768, false, -6037, 0.151861426025565, 3018, 0.205585053751983, 659, -656, 1738)]
		[TestCase(-2833, true, 0.756982819529708, 0.439356771036683, 9404, 0.666575472181, 0.753982429278075, true, 603, 0.461628942034034, 1852, 0.756883896774093, 5210, 2592, -5650)]
		[TestCase(-2005, true, 0.758787278904946, 0.488138243317668, -4706, 0.617279714726508, 0.59240251388047, false, 1617, 0.989680513269119, -4349, 0.0256798477031662, -1830, -5334, 6346)]
		[TestCase(641, true, 0.769761462588683, 0.648447800263971, 9221, 0.46919807580728, 0.346951442466561, true, 9712, 0.39004962071313, -6048, 0.767873456593544, -1344, -507, -4337)]
		[TestCase(4860, false, 0.790711393482383, 0.98063455288328, 5042, 0.750304918154285, 0.446797774847037, false, -5948, 0.969662637435674, 5317, 0.616468654766897, -6477, -1006, 3755)]
		public void Upsert(long a, bool b, double c, double d, int e, double f, double g, bool h, int i, double j, long k, double l, long m, int val, int newVal1)
		{
			NKeyHash<long, bool, double, double, int, double, double, bool, int, double, long, double, long, int> nKeyHash = new NKeyHash<long, bool, double, double, int, double, double, bool, int, double, long, double, long, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, l, m, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<long, bool, double, double, int, double, double, bool, int, double, long, double, long, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, l, m, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<long, bool, double, double, int, double, double, bool, int, double, long, double, long, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, l, m, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<long, bool, double, double, int, double, double, bool, int, double, long, double, long, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, l, m, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m));
		}

		[TestCase(-8657, 6987, -6806, 3793, 0.297786249917832, -5067, 0.0191988851964469, false, -1443, -378, false, -8293, 5961, true)]
		[TestCase(3575, -6095, 7053, -6581, 0.0926182629040527, -4041, 0.749153996235297, true, -2359, 4398, true, 668, 5118, false)]
		[TestCase(-7555, -5351, 3987, -2160, 0.673677472711391, 8934, 0.135443144075313, false, 2124, 8534, true, -5938, 3371, false)]
		[TestCase(8353, 8094, 2915, 6884, 0.951604993525709, -1601, 0.433307110533727, false, 7909, 7636, false, -495, -3021, false)]
		[TestCase(-652, -1205, -7106, 5286, 0.490654740245386, 7358, 0.112775730021659, false, 5633, 3500, false, 7025, -1364, true)]
		[TestCase(1778, 8518, -4148, 7790, 0.629328112876661, -3135, 0.934296587451499, false, -8515, 4016, true, -3278, 4357, true)]
		[TestCase(-3262, 6349, -7473, -6030, 0.597823698352009, 8406, 0.652859752836106, false, 5642, -7720, true, 6011, -4136, true)]
		[TestCase(-7537, 9413, -1347, -7993, 0.988109074527449, 7494, 0.884343404734667, true, 1785, -2476, true, -9884, -4384, true)]
		[TestCase(-2689, -1124, -6348, -6907, 0.150068370695258, -722, 0.858557117571382, true, 975, -5736, false, 228, 8112, false)]
		[TestCase(-7123, -6426, -6456, 6574, 0.0500753857428559, -5759, 0.354155582540741, false, -4635, -369, false, 6861, 5290, false)]
		public void Delete(long a, short b, short c, long d, double e, long f, double g, bool h, long i, long j, bool k, short l, long m, bool val)
		{
			NKeyHash<long, short, short, long, double, long, double, bool, long, long, bool, short, long, bool> nKeyHash = new NKeyHash<long, short, short, long, double, long, double, bool, long, long, bool, short, long, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<long, short, short, long, double, long, double, bool, long, long, bool, short, long, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<long, short, short, long, double, long, double, bool, long, long, bool, short, long, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<long, short, short, long, double, long, double, bool, long, long, bool, short, long, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
		}

		[TestCase(-1561, -5610, 6934, -465, 9381, -761, 0.825797146105113, -1786, 0.199024795647256, -9655, 9111, 0.0687774536520138, 0.636001891752706, false)]
		[TestCase(-6487, 4019, 6132, -3860, 3986, -174, 0.735946168534433, 5972, 0.860601684013662, 3227, 7435, 0.242966752146821, 0.621369949831334, true)]
		[TestCase(-5053, 2386, -6435, -5583, -3034, -6094, 0.681540327929678, -9024, 0.634780656841947, 7424, 7479, 0.30260488172183, 0.541494672904487, true)]
		[TestCase(1021, -3291, 2729, 1416, -9465, 779, 0.162809379008976, -5392, 0.751169014140577, -3127, -7400, 0.372486043429228, 0.422974829758971, true)]
		[TestCase(-2822, -6292, 2098, 4522, 6810, -9590, 0.163383971044507, 1594, 0.838939240592969, 4696, 4410, 0.440767307505369, 0.580522794546803, false)]
		[TestCase(-8674, 8707, -1341, -2065, 8994, 8366, 0.247580719295694, 503, 0.0249108453397224, -3980, -5674, 0.0824022810358565, 0.642582525798391, false)]
		[TestCase(7362, 6691, -8181, 9514, 5444, -8833, 0.689892505616831, -1011, 0.266327268102359, -7041, -759, 0.52108943160674, 0.654171830813481, true)]
		[TestCase(-70, 8032, 7005, 1718, 9167, -9279, 0.164122115897072, 6314, 0.910675633191446, 4663, -1545, 0.504584463082526, 0.37567122577488, true)]
		[TestCase(-6790, -3920, 197, 5162, -2443, -7070, 0.711562905326282, -9912, 0.64394438948666, 4895, 3369, 0.522234411687699, 0.43693323267481, true)]
		[TestCase(3381, -4298, 8693, -1426, -4715, -4475, 0.0287303347274337, -7534, 0.450653527141853, 2606, -7520, 0.606598885081056, 0.852798432043194, false)]
		public void Remove(short a, long b, short c, int d, long e, long f, double g, short h, double i, int j, long k, double l, double m, bool val)
		{
			NKeyHash<short, long, short, int, long, long, double, short, double, int, long, double, double, bool> nKeyHash = new NKeyHash<short, long, short, int, long, long, double, short, double, int, long, double, double, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k, l, m);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<short, long, short, int, long, long, double, short, double, int, long, double, double, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k, l, m);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<short, long, short, int, long, long, double, short, double, int, long, double, double, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k, l, m);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<short, long, short, int, long, long, double, short, double, int, long, double, double, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k, l, m);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
		}

		[TestCase(0.25771540461933, -7889, 8347, -1275, 1980, 0.547302293380397, -7065, 0.6256462506138, 5969, 9879, false, -8009, 6098, -9254)]
		[TestCase(0.853311876232415, 7590, 2683, 5423, -4126, 0.659180111558726, -8392, 0.286262162628706, -6164, -1983, true, 1613, -3442, 4133)]
		[TestCase(0.647024026907526, -5382, -4291, 5129, -9671, 0.536573420994251, 7309, 0.345146180291263, 4257, 3754, false, -3889, 8113, -4033)]
		[TestCase(0.559185338932641, 1179, -9452, 1662, -8973, 0.251753858873506, -7818, 0.75846246292743, -8606, -2558, false, 2012, -1763, 9428)]
		[TestCase(0.913752746262472, 331, 1931, -9632, -5610, 0.439969305619583, 9571, 0.567658438145955, 4171, -322, false, -4632, -6565, 163)]
		[TestCase(0.166635132937988, 8928, 5272, 9762, 5069, 0.782046457651093, 4541, 0.632753499612563, -2529, -4870, true, -8477, 1953, 7770)]
		[TestCase(0.161189740598756, 8266, 849, -1684, -7503, 0.894082404623778, -1371, 0.196314495148284, -8176, 9783, false, -685, -3605, 9829)]
		[TestCase(0.850381355197346, 868, 1, 5658, -8397, 0.600884292554522, 1836, 0.123182627429805, 2167, -5481, true, 2594, -5111, -4379)]
		[TestCase(0.143070367231532, -3197, -221, -7132, 6845, 0.0900606597261786, -1870, 0.795248153524123, 8826, 3346, false, -4447, -8463, 9405)]
		[TestCase(0.855312345482089, 5488, 8041, -4244, -752, 0.735549922909378, 5646, 0.830069332304443, 5127, 4928, true, 9934, -4064, -9238)]
		public void ContainsKey(double a, short b, int c, short d, long e, double f, short g, double h, long i, long j, bool k, int l, short m, int val)
		{
			NKeyHash<double, short, int, short, long, double, short, double, long, long, bool, int, short, int> nKeyHash = new NKeyHash<double, short, int, short, long, double, short, double, long, long, bool, int, short, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<double, short, int, short, long, double, short, double, long, long, bool, int, short, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<double, short, int, short, long, double, short, double, long, long, bool, int, short, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<double, short, int, short, long, double, short, double, long, long, bool, int, short, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
		}

		[TestCase(2041, 6653, 2786, 6049, 482, true, false, 6677, -3524, 0.559400586671848, -6651, 176, -27, false)]
		[TestCase(1673, 4849, -7053, 6909, 5865, false, false, 2495, -8023, 0.648570515517411, 2557, 8526, 8340, false)]
		[TestCase(-4515, 9186, 3286, -5344, -6989, true, false, 8473, -7857, 0.193524275996501, -546, 3504, 5402, false)]
		[TestCase(9855, -9815, -3447, -7181, 3035, true, false, 5154, 5907, 0.777903787222646, -1273, -5667, 1297, true)]
		[TestCase(4678, 9814, -6506, 1954, 4088, false, true, -2712, 7900, 0.934660184632363, -2833, 5427, -8299, true)]
		[TestCase(2707, 9074, -2542, -7637, 1966, false, true, -8207, -3580, 0.487001088208985, -4507, -6462, 8738, true)]
		[TestCase(-6719, 7727, 5928, 8677, -6752, false, false, -7673, -9620, 0.874935969186451, 9415, 2130, 8228, true)]
		[TestCase(-7716, -2140, 5650, 7606, 3104, true, false, 6831, -1898, 0.318200023061689, 2365, 915, -3093, true)]
		[TestCase(3396, 3751, -3537, 551, -5466, false, false, -9826, -7234, 0.424439674906637, 2180, 6684, -595, true)]
		[TestCase(8696, -41, -7053, 9834, -7845, false, true, 8558, 4088, 0.394232063737806, 431, -1407, -2117, false)]
		public void Clear(short a, short b, int c, int d, long e, bool f, bool g, long h, int i, double j, long k, short l, int m, bool val)
		{
			NKeyHash<short, short, int, int, long, bool, bool, long, int, double, long, short, int, bool> nKeyHash = new NKeyHash<short, short, int, int, long, bool, bool, long, int, double, long, short, int, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j, k, l), 0);

			nKeyHash = new NKeyHash<short, short, int, int, long, bool, bool, long, int, double, long, short, int, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j, k, l), 0);

			nKeyHash = new NKeyHash<short, short, int, int, long, bool, bool, long, int, double, long, short, int, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j, k, l), 0);

			nKeyHash = new NKeyHash<short, short, int, int, long, bool, bool, long, int, double, long, short, int, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j, k, l), 0);
		}

		[TestCase(-4904, -2837, -4572, 6419, 0.037113760149625, 2065, 8134, 8141, -6581, 2529, -1238, 0.341798408581781, 3377, true)]
		[TestCase(9662, 8576, -9878, 5939, 0.649102554027504, 7559, 545, 3199, -7822, 9847, 8575, 0.9248251276672, -8546, true)]
		[TestCase(8921, 4081, 2237, -5210, 0.575429091963651, 7399, 3464, -3072, -7541, 4011, -2149, 0.790817163787231, -1687, true)]
		[TestCase(-3852, 3782, -6428, 1272, 0.876488719078008, 4092, -3037, 2458, -1256, 1657, -5616, 0.550043173856122, 1563, true)]
		[TestCase(-5013, -4421, 7842, -7753, 0.530672888052963, -3936, 9219, -663, -9706, -6026, 5326, 0.798922201059257, -8627, true)]
		[TestCase(6119, -3891, -1909, 7164, 0.462418645835677, 9059, -2946, -1606, 6277, -2696, -9032, 0.36798275325819, -4890, false)]
		[TestCase(-4661, -9419, -9592, -9491, 0.291786858016526, -8429, -8057, 6879, 6168, -4395, -4796, 0.112458454963033, 2263, true)]
		[TestCase(3489, 9596, 5944, -8447, 0.636034791653992, 4225, 6337, -7363, -6432, -2782, -8246, 0.625166372687168, -5157, true)]
		[TestCase(-700, 539, -8720, -6745, 0.0476934826223615, 2756, -6001, 9711, -6432, 4819, 142, 0.990085626016411, 794, true)]
		[TestCase(-60, -7512, 1962, -3000, 0.339833446936604, 242, 4903, 6679, 1358, 9414, 4638, 0.544139939613705, 125, false)]
		public void Get(int a, int b, short c, long d, double e, int f, int g, short h, int i, int j, short k, double l, int m, bool val)
		{
			NKeyHash<int, int, short, long, double, int, int, short, int, int, short, double, int, bool> nKeyHash = new NKeyHash<int, int, short, long, double, int, int, short, int, int, short, double, int, bool>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<int, int, short, long, double, int, int, short, int, int, short, double, int, bool>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<int, int, short, long, double, int, int, short, int, int, short, double, int, bool>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));

			nKeyHash = new NKeyHash<int, int, short, long, double, int, int, short, int, int, short, double, int, bool>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m));
		}

		[TestCase(0.801574768871802, -8873, 0.570431174976021, 2918, 0.171574424566503, 7097, 2695, -8918, 5253, true, false, 0.729988210708829, -8310, 2618)]
		[TestCase(0.959059783704141, -8135, 0.430742173190574, 71, 0.131597650298661, -8704, -7299, 377, 6063, true, false, 0.272285385649784, 1659, -5688)]
		[TestCase(0.908057155510437, 13, 0.285195218531971, -2709, 0.871456752005712, -8873, -9350, 232, -1993, false, false, 0.651337625296478, 6, 5931)]
		[TestCase(0.896735913072124, -5997, 0.381287559578795, -7870, 0.18303777658522, 4961, -3551, -7537, 3333, true, true, 0.575898267596913, 1077, -4345)]
		[TestCase(0.25306234520537, 4597, 0.492271829160057, 7984, 0.271942115981105, -1614, -7079, -4758, -950, true, true, 0.0281213647816895, 1969, -1051)]
		[TestCase(0.692843617728373, -3104, 0.130988027961453, -394, 0.564423332253668, -3231, 2442, 2062, -815, false, false, 0.834897075237193, 7861, 5699)]
		[TestCase(0.833975005817588, 4479, 0.52073924267699, -4088, 0.502417735523739, 4994, -4828, 3408, 1874, false, false, 0.0810536356088955, 3012, 2693)]
		[TestCase(0.747627934323451, -791, 0.247888620126941, -6900, 0.149588312092045, 7498, -1395, -3560, -1395, false, false, 0.215490446060659, 3211, 2998)]
		[TestCase(0.27068901912807, -1099, 0.810041429852155, -1258, 0.526151010080311, -2779, -1438, 4569, -1997, true, true, 0.848742742486644, -6222, -9550)]
		[TestCase(0.751016410417397, 3153, 0.10086451568681, -332, 0.68777448669438, 9747, 7109, 9974, 5986, true, true, 0.0181568353521437, -2904, 240)]
		public void TryGetValue(double a, long b, double c, long d, double e, short f, short g, short h, short i, bool j, bool k, double l, long m, long val)
		{
			long fetch;
			bool b1;
			NKeyHash<double, long, double, long, double, short, short, short, short, bool, bool, double, long, long> nKeyHash = new NKeyHash<double, long, double, long, double, short, short, short, short, bool, bool, double, long, long>(UnderlyingHashType.Dictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(long));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<double, long, double, long, double, short, short, short, short, bool, bool, double, long, long>(UnderlyingHashType.ConcurrentDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(long));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<double, long, double, long, double, short, short, short, short, bool, bool, double, long, long>(UnderlyingHashType.SortedDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(long));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<double, long, double, long, double, short, short, short, short, bool, bool, double, long, long>(UnderlyingHashType.HashTable);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(long));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);
		}

		[TestCase(new int[] { -8792, 3697, 2583, -3982, 3721, -1843, 1418, 5449, -4747, 562 }, new short[] { 554, 3462, 5888, -4561, 2912, 7513, 5034, 159, -9873, 8320 }, new int[] { -1305, -5142, -4421, -5223, 5190, 1604, 2453, 2045, 9888, -6829 }, new int[] { 8568, -2036, 5614, 6726, 8768, -7710, -3897, -2310, -3358, 8937 }, new short[] { 8820, 424, 7891, 5119, 5183, -1678, 6283, -7442, 61, 5749 }, new long[] { -6187, -9060, -4332, -4187, 1688, 6348, -1879, -2191, 825, -7881 }, new int[] { 5701, 9372, 5560, -7917, 1992, -7408, 7846, 9160, -3330, 623 }, new short[] { 1411, -2654, -6480, -8812, 9498, 8268, -3035, 458, -408, -3129 }, new long[] { 5319, -102, -8014, -5860, 9357, 7630, -7703, -196, -4960, -7579 }, new double[] { 0.708426771084045, 0.914681971964744, 0.843177167625715, 0.226143312280133, 0.16181284476156, 0.972406070200916, 0.743213194302848, 0.79051756523108, 0.156340142784799, 0.629650704390207 }, new long[] { 473, 7121, 5886, 9436, -5660, 6466, 7418, -5518, -3687, 3418 }, new int[] { -614, 7661, 8216, -6043, -3202, -4194, 7387, 1421, -7275, 4361 }, new short[] { -9703, -1955, 4122, -5749, 6454, 3117, 481, 8995, 7949, -9947 }, new short[] { -6594, 1154, -2668, 6997, 6396, 8197, 4009, -7451, 9799, -7108 })]
		[TestCase(new int[] { -9786, 7813, -6508, 1619, 3034, 6505, -9922, 2907, 7724, 7430 }, new short[] { -7939, -6556, 3085, -1234, 2297, -7570, -7000, 1637, -7017, 1220 }, new int[] { -4014, 8422, -3468, -3738, 13, 8230, 330, -8779, -2441, -1400 }, new int[] { 1795, 4840, 1621, 9832, 4149, -7518, -5445, -7496, 1215, 9948 }, new short[] { 3041, 7573, -8728, -9479, 7990, 9961, 8067, 8565, -5298, 3967 }, new long[] { 5198, -7627, 9564, -1419, 6905, -8209, 1283, 7229, -8392, 4802 }, new int[] { -3824, 8856, -4649, -873, -4364, -2780, 1821, 3252, 4615, -183 }, new short[] { 7874, -9502, -9576, -6966, 8177, -1588, 7151, -3987, -1730, 50 }, new long[] { -9836, 1764, 6517, 3590, 3399, -576, 5275, -6957, -7072, 2360 }, new double[] { 0.559850320015033, 0.366179117172109, 0.0448362645901908, 0.820598052265401, 0.688686974201671, 0.709245895831495, 0.611210262221848, 0.607222876328613, 0.744189248766838, 0.538640561298765 }, new long[] { -1858, -5184, -6048, 4883, 6091, 4702, -8049, 6531, 401, -1504 }, new int[] { -5362, -4727, -1038, 1555, 4640, 4410, -7660, 1758, 5725, 6210 }, new short[] { 1942, -1219, 326, -7743, 8618, 552, 9598, -5989, -740, -6005 }, new short[] { 6186, -4991, 1127, 7495, -8089, 5347, -2185, -8364, 7498, 8696 })]
		[TestCase(new int[] { -2525, 8742, 2639, 4431, -2276, -4074, 8361, -658, -8227, 9362 }, new short[] { 1846, -9533, 6417, 8671, 8828, 9360, 4488, -8304, 6263, -4459 }, new int[] { 5103, 7938, -2726, -3591, 2307, 9628, 4143, 1464, -354, 9291 }, new int[] { -3403, -9294, 4259, 7028, -1262, 3199, 6139, 5894, 4531, 2694 }, new short[] { 2189, 258, -7760, -103, 2147, 5720, -1410, 2455, 8665, -7451 }, new long[] { -9139, -3880, -4629, 1958, -6406, -464, 1470, -3767, -7875, -1906 }, new int[] { 1781, -3102, 9694, -7520, 2766, 1142, -3793, 9387, -65, -4369 }, new short[] { -6777, 8592, -2836, -6429, 3350, -5153, 5699, 7375, 4260, 6586 }, new long[] { 1039, -8311, 2798, -2901, 8432, -9521, 5333, -7698, 3435, 9201 }, new double[] { 0.0864248825639602, 0.495393519054816, 0.688570293918518, 0.32191730026245, 0.045660146067692, 0.264593533829131, 0.528140324879503, 0.988028249697773, 0.856484928101527, 0.0502576139058255 }, new long[] { -484, -798, -7478, 3036, 9325, -7733, 8955, -8198, 8607, 8746 }, new int[] { 3834, 4094, 1971, -4463, 7053, 93, 4098, 2597, -5954, 2288 }, new short[] { 5807, -6094, -4047, 732, -6097, 3313, -5177, -9274, -7343, -1941 }, new short[] { 4282, 5938, -9752, 3255, -2928, -8160, 9165, 9761, -2228, 6167 })]
		[TestCase(new int[] { -8477, 3532, -6307, 4688, -4632, -2365, 7935, -1764, -615, 819 }, new short[] { 1192, 7964, 5714, -5158, -4802, -4389, -6750, 1788, -865, -3986 }, new int[] { 7442, 8230, 9143, 550, -5534, 7894, 3847, 8715, 8464, 5214 }, new int[] { 926, 4336, -5173, -2122, 767, -7723, -9785, 1263, -4634, 6267 }, new short[] { 5376, 6586, 1340, 1836, 6865, 6316, -9774, 5405, -1941, -8538 }, new long[] { 8589, -2621, 627, -8240, 8723, -6709, 4387, 3141, 223, -2527 }, new int[] { 3786, 9219, -230, 4168, 9891, 6854, 3139, -2161, 4072, -7078 }, new short[] { -4602, 1984, -3575, 2866, 635, -9143, -3108, -2691, 3683, -1852 }, new long[] { 7670, 8440, 657, 7003, 6624, -6450, -6289, -6931, -847, -2522 }, new double[] { 0.394396700614317, 0.353558644351344, 0.0519952811542876, 0.894646251525099, 0.124061861598893, 0.80784856891625, 0.340884239571581, 0.858543489528142, 0.597198519202507, 0.000522518065070043 }, new long[] { -6821, 2385, -8665, -4861, 6063, -3394, -9044, 7759, 1122, 7868 }, new int[] { 6398, -2920, 9456, -7923, -199, 5344, -1436, 2765, 7543, 6343 }, new short[] { 3145, 72, 8684, -3404, 5032, 8325, 945, -1469, 385, 4478 }, new short[] { 4037, -279, 5363, 3673, -5029, -4713, 7107, -4480, -9058, 19 })]
		[TestCase(new int[] { -7404, -4050, 1944, 1283, 1078, -9190, -2386, 8962, -1907, -2863 }, new short[] { -2405, 4051, 9625, 5599, -3134, 3105, 3699, 4737, 104, 7737 }, new int[] { 5659, 2423, -2625, 6643, -6168, -3321, 1715, -4215, 7105, -5484 }, new int[] { 8235, -6955, 1825, -2475, 3748, -2803, 8126, -2597, 5516, 4224 }, new short[] { 712, 1981, -9560, -6749, -3115, 9985, 93, 9763, -3190, 1863 }, new long[] { 1585, -7628, 5414, -6796, 4359, 171, 8573, 5299, -2546, -5599 }, new int[] { -907, -8169, -8141, -6422, -1100, -5448, -7772, 2101, -8148, 9667 }, new short[] { 4977, -3701, 9220, 5879, -2974, -6320, 1984, -5874, -240, -6154 }, new long[] { 6584, 1951, 8974, -4757, 2929, 5865, -2370, -1376, 3164, -6421 }, new double[] { 0.431081046551038, 0.141393449688979, 0.99744184873879, 0.555820975711486, 0.256601803589892, 0.444161177354009, 0.506208142501399, 0.843064398431715, 0.717493805902774, 0.116705346441225 }, new long[] { 7758, 7991, 7912, -2859, 6885, -4712, -6850, 9533, 6176, 681 }, new int[] { 8185, 4449, -4459, -6390, -2184, 7140, -7144, 6614, 647, 3032 }, new short[] { 6920, 3603, 8936, 8271, 1046, 2149, -3650, -1894, 748, 8141 }, new short[] { 3553, 5123, -224, -2574, -3914, 8591, 4038, 1834, -1643, -2357 })]
		[TestCase(new int[] { 2716, -1905, 2445, -7515, -4607, 4171, 7287, 6339, -6698, -2008 }, new short[] { -3970, 3509, -3786, -8682, -4587, -5843, 9054, 9639, 6093, -5263 }, new int[] { 8936, 5043, -1213, 8034, 7126, -6936, -5325, 8113, 7522, -776 }, new int[] { -6896, 1019, -1741, -6993, -9682, -1172, -8841, 6452, 2880, 6874 }, new short[] { 4861, 8, -5195, -7242, 2112, -9954, -1089, -1541, -7985, -8069 }, new long[] { 9536, 4397, 5740, -6378, -1295, 7672, 9307, 4410, -4643, -7669 }, new int[] { -502, 9172, 8816, 4077, -5111, 5008, -4748, -6791, -8998, 6584 }, new short[] { -7001, -7397, -3240, 9218, -126, -1071, 240, -3970, -4077, 7081 }, new long[] { 4151, 6215, 6100, 5593, -314, -1295, 5278, -5361, 4300, -7356 }, new double[] { 0.475961080508289, 0.337363403913269, 0.554860133936098, 0.52755356930548, 0.368853341959814, 0.784440324541386, 0.559586537796811, 0.536298448003968, 0.893458595449784, 0.855210378232976 }, new long[] { 4793, -4297, -2541, -4571, 8930, 6935, -2361, 6520, 3746, 9774 }, new int[] { -2567, 3278, -1511, -1725, -1822, 3281, -6926, -6776, -5606, 6182 }, new short[] { 9728, -9385, -1092, 8356, -2933, 6250, 1504, 6207, 1841, 4184 }, new short[] { 7736, 9513, -1839, -1181, -7710, -1549, -1242, 673, 6662, 2749 })]
		[TestCase(new int[] { -8933, 8756, 890, 4524, 5210, 6239, 8257, -7176, -7625, 4094 }, new short[] { 2616, -2031, -3666, -8313, 7373, 4179, 6793, -898, 8361, -7318 }, new int[] { -4567, 1429, -5319, 9561, -7960, -2081, -4880, 9669, -4013, 9725 }, new int[] { -5474, 2399, -3439, 1642, 5116, -9027, -276, 4382, -6852, 825 }, new short[] { 7991, -1318, 3834, 7746, -8430, -231, 3180, -3525, 1443, -1891 }, new long[] { 1656, 9655, 2310, 3981, -2681, -363, 4077, 1327, 2485, -2707 }, new int[] { 1121, 8587, 6836, -7352, -429, -9781, -8591, 4690, -3431, 6402 }, new short[] { -5542, -7587, -4045, -2463, -5311, 6749, 7594, -3067, 7993, 2269 }, new long[] { 4736, 8643, -1772, 7876, -1929, -5131, -9910, 2577, -5674, -4518 }, new double[] { 0.344670219973042, 0.919776224959537, 0.0948246429184566, 0.792697134331193, 0.98521252907124, 0.970185753875499, 0.592223254308208, 0.559382867328535, 0.408823686376598, 0.0675653708482 }, new long[] { -1639, 8489, 9904, 5039, -6347, -754, 3701, -5224, -705, 567 }, new int[] { 2040, -2853, 3333, -9782, 2555, 2476, 360, 8958, 4576, -5297 }, new short[] { -9870, -1170, 365, -8912, -490, -3938, -9484, 100, -2167, -4714 }, new short[] { -5093, -3591, 8755, 6642, -6090, 6246, 8737, 3186, 4225, 8824 })]
		[TestCase(new int[] { 1165, 5312, -6715, 3756, 3440, 9746, -4937, -8318, -6700, -2772 }, new short[] { -957, 2884, 6610, -6525, -8776, 9530, -1875, 8818, -4468, 7589 }, new int[] { -1269, -6397, 6942, -5990, -4337, -4366, -1610, 6690, 6306, 6307 }, new int[] { 3737, 7173, -5265, 5751, 3536, -5183, -4454, 6608, -2353, -238 }, new short[] { -8999, 8833, -3197, -9394, 6241, 2020, -203, 5281, 5419, -5621 }, new long[] { -1877, 9918, -2343, 6634, 95, -2435, 8369, 9274, -1905, -2192 }, new int[] { 1357, -1629, -4625, -3009, 3489, 1868, -1848, -9139, -62, 6406 }, new short[] { 3985, 1515, 1172, 5768, 6590, -104, 6799, 6337, -2232, 3641 }, new long[] { 5835, 3107, -8728, 1928, -1814, 3818, -481, -1901, -4343, -4027 }, new double[] { 0.322261960395734, 0.313525279664213, 0.425708710879883, 0.991923143617773, 0.920201084539388, 0.631429354954245, 0.673049215075117, 0.990581355518932, 0.355756401250025, 0.218663481631625 }, new long[] { -6130, -1062, -4655, 9012, 392, 6606, -1253, 1886, -9955, -9799 }, new int[] { 764, -7967, 1507, 4452, 1971, 8249, -2899, 3444, 8803, 9670 }, new short[] { -7648, -9945, 5202, -6034, -38, -2284, -6998, 1334, 7364, -6036 }, new short[] { 6433, 6987, -776, -6605, -227, -3101, -2236, -7742, -8463, 1578 })]
		[TestCase(new int[] { -4927, 7630, -1945, -4542, 5207, -5586, 4762, 4060, -2132, -9845 }, new short[] { -4471, -9983, -8992, -2555, -7976, -6183, 3734, -8620, -948, -7321 }, new int[] { 3605, 7411, 4521, 6080, -6234, 3776, 2808, -1886, -5318, -4926 }, new int[] { 486, -5156, 1909, -2773, 4598, -5279, 1998, -254, -1242, -4451 }, new short[] { 2951, -1059, -6531, 7210, 8433, 6417, 5980, -8220, -8627, -4042 }, new long[] { 3163, -3615, 3204, 8857, 7971, -2340, -6890, 1973, -8307, -8568 }, new int[] { 1604, -3350, -619, -7205, -333, -9313, -1893, 3780, 2844, 7302 }, new short[] { 1817, -6010, 2621, -6495, -274, -5333, 3944, 7310, 7646, -2653 }, new long[] { 7794, 1029, -3257, 8723, 1909, -5896, 1637, 3050, -745, -3059 }, new double[] { 0.0805478436316121, 0.00126391183643784, 0.402698084899549, 0.366338080897153, 0.69718775744419, 0.315148342547542, 0.977992742312137, 0.0336853466153542, 0.377208126418855, 0.88743487460885 }, new long[] { -1687, -7798, -1065, -5930, 4139, -825, 3762, -298, -867, 3305 }, new int[] { 3713, -4201, 4326, 4344, -6363, -9424, 9906, 656, 884, -4435 }, new short[] { -951, 5054, -5473, -4095, 5691, 1791, 5934, -4705, -440, -6576 }, new short[] { -4893, 3270, -233, 9897, 9033, 5594, -7904, -7325, -5414, -7263 })]
		[TestCase(new int[] { 339, -8063, -6081, 5947, 3225, 5812, -4300, 3708, -6308, 3368 }, new short[] { -3603, -1096, -210, -8019, -1299, 3256, 7673, -6969, -1623, -7651 }, new int[] { 3238, -1531, -9857, -4289, -1799, -9556, 6030, 4427, 5310, -1958 }, new int[] { 8479, 7232, -3927, -1851, 5223, -2887, 1137, -1422, 2678, 9877 }, new short[] { -3906, -7772, -8395, 6190, 7025, 6201, -6517, -2212, 1197, -4221 }, new long[] { 7919, 9064, 4296, -7762, -503, -8127, -8205, 8207, -2251, 2782 }, new int[] { 9781, 1270, 8396, 5649, 4888, -837, -7167, -8358, -3243, -8410 }, new short[] { -7879, -903, 351, -1501, 6253, 1012, -3134, -6048, -1316, 1997 }, new long[] { 6960, -1755, -6768, -467, 121, 9413, -7062, -6164, 8650, 3352 }, new double[] { 0.265906555236274, 0.646453023257876, 0.0414782786003678, 0.994763401334529, 0.00482356548533941, 0.741139377346793, 0.191443028948942, 0.297677312184906, 0.0651125326124544, 0.393217278361887 }, new long[] { 3370, -8158, -8968, -391, -6340, -1176, -1286, -4200, -4017, 8483 }, new int[] { 5006, 7842, -475, 5750, 5821, 1537, -1960, -1134, -4470, 5473 }, new short[] { -3774, 8995, -7009, 3402, 6269, -809, -1732, 456, -1598, -8567 }, new short[] { -2816, -9087, -7350, -9179, 8625, 5120, -2786, 3621, -4125, -8701 })]
		public void Count(int[] a, short[] b, int[] c, int[] d, short[] e, long[] f, int[] g, short[] h, long[] i, double[] j, long[] k, int[] l, short[] m, short[] val)
		{
			NKeyHash<int, short, int, int, short, long, int, short, long, double, long, int, short, short> nKeyHash = new NKeyHash<int, short, int, int, short, long, int, short, long, double, long, int, short, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0]), 9);

			nKeyHash = new NKeyHash<int, short, int, int, short, long, int, short, long, double, long, int, short, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0]), 9);

			nKeyHash = new NKeyHash<int, short, int, int, short, long, int, short, long, double, long, int, short, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0]), 9);

			nKeyHash = new NKeyHash<int, short, int, int, short, long, int, short, long, double, long, int, short, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0]), 9);
		}

		[TestCase(new int[] { -8360, 4374, 8850, -2372, 3337, 4467, -9442, 8256, 7396, -5448 }, new double[] { 0.565070665238924, 0.704770173740001, 0.759714609365777, 0.435247699467115, 0.85622349095355, 0.035041116194353, 0.216247676972415, 0.720851318315068, 0.149525865050743, 0.211558290390092 }, new double[] { 0.238617447316003, 0.454351316417731, 0.0572042987016981, 0.141112218676653, 0.752869926277953, 0.439773131832375, 0.28928144708708, 0.159424289203912, 0.31914317669307, 0.992162812031881 }, new bool[] { true, true, false, true, true, false, true, true, false, true }, new double[] { 0.0370834772647747, 0.62223509634949, 0.987065958784458, 0.665082532290873, 0.443283508272508, 0.212522975268086, 0.614043399511857, 0.734988723292476, 0.397712730522134, 0.168638467401563 }, new short[] { -5766, 2366, 1973, 6192, -8943, 2551, 3230, 6028, 2570, -5456 }, new bool[] { false, true, true, true, false, true, true, true, false, true }, new short[] { -5568, -5259, 4132, 1584, -6509, 2327, -654, -2157, 3956, 806 }, new short[] { 6513, 1085, 5233, -6989, 5609, -7717, -9753, -5706, 5763, -3371 }, new int[] { 1021, -9758, -2984, 5741, -7275, -6625, -9428, -7811, -6600, -216 }, new short[] { 641, 3906, -4824, 5081, 8940, 9492, 8232, -9609, 2703, -1271 }, new long[] { -6793, -4611, -7926, -8235, -1971, 7595, -7865, -1135, -8055, -2378 }, new bool[] { true, false, false, false, false, false, true, true, false, false }, new short[] { 1756, -2841, -5556, -5826, -9833, -7391, -4088, -9846, -5930, 6115 })]
		[TestCase(new int[] { -5951, 9855, 1589, -2963, -6577, -4365, 8167, -4747, -2285, -4872 }, new double[] { 0.0620362274637615, 0.585339747176198, 0.0121852438953636, 0.788913017040544, 0.547365681523162, 0.0663118632819093, 0.564866306988926, 0.113948214386566, 0.661536650108889, 0.737555180554071 }, new double[] { 0.0884761279860866, 0.992142535276777, 0.576428663253984, 0.629428007467383, 0.848569700889555, 0.802408300713826, 0.047225793845591, 0.89496862045255, 0.0799086536652914, 0.27101354732691 }, new bool[] { true, false, false, false, false, true, true, true, true, true }, new double[] { 0.301109711779798, 0.623630930960007, 0.533849241460603, 0.186677328863497, 0.943734512638177, 0.00250753667322338, 0.345720563710537, 0.433257397931655, 0.661285113385546, 0.941948020803718 }, new short[] { 1310, -6367, -3077, -682, 4345, -5794, -1671, 8999, 64, -2625 }, new bool[] { false, false, false, false, true, true, false, true, true, true }, new short[] { -6399, 5723, -7194, 7012, -1270, -703, -834, -2204, 3713, 6920 }, new short[] { -866, 2279, -5325, -7240, 4109, -1945, 5058, 5477, 1481, 9366 }, new int[] { 651, 8724, -4490, 2099, 1528, -4246, -1180, -1616, 292, 9613 }, new short[] { 3138, 2498, 6458, -8741, 5238, 5586, -9172, -91, -9410, -4949 }, new long[] { 5038, -9465, -4712, 3143, 8239, 2409, 5594, -9104, -1816, -4612 }, new bool[] { false, true, false, true, false, false, true, true, false, false }, new short[] { -9521, -9216, 7501, 4098, -6216, 6634, 5819, -6583, -2479, 8522 })]
		[TestCase(new int[] { -2772, -4848, 4889, -3567, -5671, 118, 3438, 2365, 3859, 9117 }, new double[] { 0.507900827800809, 0.396232749985639, 0.00998551026451658, 0.245289225711156, 0.77069813700891, 0.0852691787692109, 0.478221189919031, 0.181058407379807, 0.997075892517844, 0.518230084105502 }, new double[] { 0.268590145403794, 0.506111845609784, 0.221160082715172, 0.880642399136276, 0.228581985099512, 0.712847843632497, 0.151530370186796, 0.559387063868058, 0.468044912660515, 0.0802534125187683 }, new bool[] { true, true, true, false, true, true, true, true, false, true }, new double[] { 0.57178047791672, 0.892461129879794, 0.842230057270373, 0.318336876723141, 0.640881124716662, 0.627660922998405, 0.0291384407454815, 0.629836212205624, 0.934255253958635, 0.103854876991294 }, new short[] { -2929, 2198, -6525, 7154, 3151, 7104, -9271, 7275, -8138, 70 }, new bool[] { false, false, false, true, false, true, true, true, false, true }, new short[] { -4837, 3061, 5110, -1256, 8928, -2477, 3277, 8055, -5204, 2018 }, new short[] { 3673, 433, 2502, -2715, 4533, -5608, -1294, 6217, 6508, -8944 }, new int[] { 8321, 9266, 4641, 8438, -5888, -815, 4844, -5409, -6161, 4838 }, new short[] { 8001, 43, -4149, -7677, 6914, 4008, 7087, 4730, 8225, -4370 }, new long[] { -6171, -7328, 2481, -158, 6396, 6653, -251, 5720, 7719, 8136 }, new bool[] { false, true, true, false, true, false, true, true, false, false }, new short[] { 2677, -1311, 4217, -43, 4015, -6368, -5415, 181, 368, -9473 })]
		[TestCase(new int[] { -2696, 3974, 7991, 879, 7225, 5651, -3213, -5199, -7956, -2543 }, new double[] { 0.971808731542811, 0.956183585783552, 0.343453123859807, 0.285040740522109, 0.2782928390793, 0.983536913983308, 0.800644710101487, 0.00789471716056332, 0.214013196161954, 0.55106112014086 }, new double[] { 0.77940462891916, 0.0208406681291948, 0.504896331813604, 0.424110632121614, 0.647545251831201, 0.756977639513545, 0.422635397139301, 0.126266537292985, 0.791312418780901, 0.638297852891636 }, new bool[] { true, true, false, true, true, true, false, false, false, false }, new double[] { 0.955430799143124, 0.681024672780663, 0.731418386442316, 0.858811587029515, 0.515412174870918, 0.677718089743386, 0.0909468280574991, 0.425873515394457, 0.219513096948859, 0.717248429878265 }, new short[] { -2381, -5573, -4098, 9346, -5061, -3113, -6122, -490, 7928, -7912 }, new bool[] { false, false, false, false, true, true, true, false, true, true }, new short[] { 9329, 2861, 1691, -8108, 1912, -8031, -4211, 2921, 8173, 9395 }, new short[] { 3320, 9934, 8134, -8517, -4851, -2355, 3665, -3993, 2256, -6051 }, new int[] { 1422, 830, -4777, -3620, 5189, 4847, -5352, -4648, -8209, 439 }, new short[] { 9782, 2144, 3650, 4122, 5013, 4755, 2733, -5989, -2565, -7029 }, new long[] { -8901, 954, 1335, 8531, -1233, -2735, -3874, -2507, -5870, -2257 }, new bool[] { false, false, true, true, true, false, false, false, false, true }, new short[] { 7320, -9562, 1131, -2264, 9612, -8823, -3715, -5987, -3532, 392 })]
		[TestCase(new int[] { 4910, -344, 8570, -713, -7149, -9531, 9493, -3310, 7611, -2073 }, new double[] { 0.436144190577857, 0.857725387838541, 0.0611373437853238, 0.70237738206162, 0.211805141163899, 0.600897082407445, 0.736346743412477, 0.136595847614387, 0.763927508035641, 0.32570219893274 }, new double[] { 0.355748247520881, 0.371014461559716, 0.865474262212158, 0.518500567189651, 0.282474645544996, 0.0330510870707459, 0.991139491084562, 0.180045059034622, 0.945962001544406, 0.379515477632878 }, new bool[] { false, false, false, true, true, true, false, false, false, true }, new double[] { 0.450279319402892, 0.0475731427071491, 0.385048688103002, 0.938705363282331, 0.417075355731452, 0.00831153244167172, 0.960708990209135, 0.854222985382296, 0.174935572396468, 0.379763376144582 }, new short[] { -3550, -6446, -1266, 9951, -6721, -2509, 2346, -1798, -6362, -7810 }, new bool[] { false, true, false, true, false, false, true, false, false, false }, new short[] { -7175, -3403, 4662, 6900, 7507, -3836, 9718, 8534, -7970, -4516 }, new short[] { -8552, -7260, -9896, 1323, -8857, 7426, 3379, -8926, 458, -4658 }, new int[] { -5798, -9006, -5505, -4119, 7731, 3111, 3181, 7678, 1826, -8267 }, new short[] { -5962, 1727, 5867, 5809, -5227, 9852, -1110, 1831, -7554, 7113 }, new long[] { -2228, 3810, -3826, 8153, -9257, 7905, 5791, 6445, -1118, -479 }, new bool[] { true, true, true, true, false, false, false, false, true, false }, new short[] { 2981, -7958, -3291, -9702, -8552, -280, -3129, -5706, -3447, -8711 })]
		[TestCase(new int[] { -1462, -8450, 8627, 3344, 7568, 389, 4819, -3659, -4861, 9824 }, new double[] { 0.866011044413788, 0.836777754517634, 0.439900553524448, 0.115331674514027, 0.425147761788754, 0.449021776881545, 0.73500461677788, 0.999648940283642, 0.616072878994082, 0.147032035583179 }, new double[] { 0.887559632718358, 0.00535625079896126, 0.633143117946174, 0.90239101131558, 0.20660111503983, 0.286538456700062, 0.355131306385217, 0.293816792449829, 0.835383864042994, 0.551142248116034 }, new bool[] { true, true, false, false, false, true, true, false, true, true }, new double[] { 0.350531215477051, 0.788097969623328, 0.182210480879159, 0.967152201089613, 0.353821396526797, 0.812321214383618, 0.662119436851758, 0.22008997817528, 0.589671318693865, 0.623286074317659 }, new short[] { 5018, -3122, 1970, -6387, -6462, -1569, -1114, -9418, -787, 1838 }, new bool[] { false, false, false, true, false, false, false, false, false, true }, new short[] { 2551, 1017, -8311, 9221, 5929, -8009, 6462, 3319, 971, -2114 }, new short[] { 2488, -7298, 4082, -5757, 6003, -5840, 9527, -3717, -5943, 2552 }, new int[] { -7203, 5847, 4469, -3533, -188, 8065, -3870, -471, 553, -8743 }, new short[] { -595, 2037, -6921, 4970, 9912, -5997, -4809, 2747, -2317, -8451 }, new long[] { 1966, 5565, -391, -8671, 9349, -9412, 4860, -4609, 8110, -5369 }, new bool[] { false, false, true, false, true, true, true, true, false, true }, new short[] { 5859, -3065, -7232, -283, 8480, -9548, 9621, 9110, -5671, 2001 })]
		[TestCase(new int[] { 8968, -3219, 8598, -7490, -9413, -2770, -3759, 3142, -2883, -774 }, new double[] { 0.160288249682769, 0.0369564774618281, 0.570852774461197, 0.296157111551686, 0.748120076837074, 0.442195436657497, 0.744427378636053, 0.715393910051973, 0.0472258539158971, 0.160536653902632 }, new double[] { 0.372729559602556, 0.498446571407116, 0.166850685219677, 0.490927682021133, 0.28439193790983, 0.251646967256277, 0.639964312612994, 0.994636265558487, 0.14229645772944, 0.944976693924971 }, new bool[] { false, true, false, false, false, true, false, true, false, false }, new double[] { 0.523174672631163, 0.170214148783225, 0.405233495126121, 0.00928551936954517, 0.732875574721431, 0.756026856953291, 0.775857158832186, 0.842161582709365, 0.737682364758887, 0.481866984852528 }, new short[] { -4437, -4684, 8166, -8881, -5451, -999, -6556, -1218, 6820, 5552 }, new bool[] { true, false, true, false, false, false, true, false, false, true }, new short[] { -3116, -9750, -3876, 4147, 2746, -5949, -8134, -6848, 5160, 567 }, new short[] { -484, 5955, -4860, 3208, 3336, 5648, 7581, 9944, -8437, 6659 }, new int[] { 6069, 3179, 7818, 2631, 2366, -5882, 3107, 9887, 1923, -2798 }, new short[] { 5443, 209, 6580, 9303, -7245, -4685, 9190, -5979, -1629, -9501 }, new long[] { -2863, -9707, 3619, -3746, -3962, 8473, -8791, 7087, 4879, 2612 }, new bool[] { false, true, false, false, true, true, false, true, false, false }, new short[] { 942, -8023, 1227, -2039, 5122, 9305, 9374, -4164, 454, -1976 })]
		[TestCase(new int[] { 6457, 3562, 1575, -8934, -476, 5777, 9558, 1565, -3405, 3891 }, new double[] { 0.145426859215566, 0.800947250705653, 0.250431534950822, 0.965555065295452, 0.866348809966049, 0.785618747484693, 0.323217434027799, 0.6489159514424, 0.996242415158191, 0.452509175731106 }, new double[] { 0.144235960740706, 0.284966425637233, 0.111946844082301, 0.986962539603451, 0.477708812559819, 0.258014320516034, 0.453212121712608, 0.283013771419885, 0.556507244033975, 0.336554711375644 }, new bool[] { true, true, false, false, true, true, false, false, true, false }, new double[] { 0.707235273768769, 0.543184707659848, 0.344882544290685, 0.39441947610789, 0.286111306532338, 0.746202196807695, 0.848375325020577, 0.595814904475498, 0.531647815616637, 0.970553443287757 }, new short[] { 2841, -3602, -4089, -8594, -4861, 758, 1323, 1835, 1510, -5636 }, new bool[] { false, true, false, true, true, false, false, true, false, false }, new short[] { -2443, -6215, 8898, 6323, 4904, 2020, 8800, 4350, 4016, 4629 }, new short[] { -1807, 7147, 5026, 1718, 3888, 2701, -536, -4770, -8281, -4602 }, new int[] { -5011, 6319, 1169, -284, 6886, -9753, 428, -2965, 3094, 8185 }, new short[] { -4460, 8814, -1239, -382, 1854, -942, -2502, -413, -3500, 3116 }, new long[] { 1956, 6972, 7818, 6879, 6169, -433, 8870, -1283, -4025, -7908 }, new bool[] { true, false, true, true, true, true, true, false, true, true }, new short[] { -8406, 1767, -8743, 5829, -908, -622, -1612, -4589, 9863, -5167 })]
		[TestCase(new int[] { -4794, 9875, 8729, -1399, 3439, -1985, 8500, 4288, 3544, -2679 }, new double[] { 0.0687108626909139, 0.0855934727404236, 0.0530314226881747, 0.550197197380567, 0.00572103588176939, 0.0691687348620821, 0.119063591174345, 0.550040896306765, 0.679497430417453, 0.0309644411462194 }, new double[] { 0.822170846081418, 0.915683467367517, 0.507455195070922, 0.591959179189037, 0.576225890115009, 0.0094771925404096, 0.78588398582576, 0.0994330575221372, 0.389473446826205, 0.339652838343593 }, new bool[] { false, true, false, false, true, true, false, false, false, false }, new double[] { 0.636712179815728, 0.916271438783161, 0.78193866032266, 0.605820582996039, 0.664272948943206, 0.994045590513407, 0.535328751679197, 0.512574510887533, 0.785791252639979, 0.385390290704272 }, new short[] { -3003, 7386, 1819, 9243, -1611, -3108, -272, -3108, 7075, 3250 }, new bool[] { true, true, false, false, false, false, true, true, true, false }, new short[] { 5957, 4547, -3318, -4422, -2114, 8117, -7324, 8031, 8552, 1643 }, new short[] { -516, -4533, -3726, -9917, 9795, -6207, -8357, -392, 2753, -4 }, new int[] { -1532, 8532, 756, 1069, 5715, 6220, 1825, -1113, -4025, -4626 }, new short[] { -2978, 788, 6133, 3796, 1749, 2447, 705, -3756, 1359, 270 }, new long[] { -5783, 1694, -1662, -4566, -6232, -3168, 239, -3581, -3044, -7648 }, new bool[] { false, false, false, false, true, true, false, true, false, true }, new short[] { -3707, 3787, 2058, 3180, -5377, 8693, -667, 2475, -1667, -2650 })]
		[TestCase(new int[] { 3085, 5398, 8246, -7515, -4219, 6771, 195, -4675, -2697, -1115 }, new double[] { 0.299073902098031, 0.270406847014281, 0.0965802707227786, 0.181191048203591, 0.955125598681683, 0.188462913589768, 0.181205815720002, 0.600621674023858, 0.017267690048212, 0.716217524239895 }, new double[] { 0.432850529641309, 0.754678257161136, 0.81906486387321, 0.984807255670804, 0.198904851544138, 0.521393839047008, 0.981838239348418, 0.75785225013171, 0.0405216189290032, 0.253632433364928 }, new bool[] { true, true, true, true, false, true, false, false, true, true }, new double[] { 0.361464963928547, 0.923345608135381, 0.415509728908311, 0.0488290321309255, 0.28410622071666, 0.0441949954462214, 0.592826939929662, 0.42172850827767, 0.703909502226817, 0.0426506321144526 }, new short[] { 5070, 7318, 2130, 4007, 8690, 7991, 9017, 8550, 8505, 5351 }, new bool[] { true, true, false, false, true, false, false, false, true, false }, new short[] { 8764, 8943, 3670, -6333, -2904, 190, -3216, 5404, 4013, -6905 }, new short[] { 8570, 1202, -8920, 9956, 2, -9819, -4366, -5921, -9084, 1271 }, new int[] { 1853, -3546, -3825, -7009, 9542, 2190, 3952, -3918, -409, 7463 }, new short[] { 3560, -468, 4074, -4152, -7911, 6125, -6350, -1535, -3086, -1498 }, new long[] { 1208, -6386, -5461, 5411, 6779, -4066, 3959, -5443, 2226, 1206 }, new bool[] { false, false, false, false, true, true, true, true, false, true }, new short[] { 6236, -9296, -4185, 6548, -467, -959, 7126, 5231, 7868, 3875 })]
		public void Any(int[] a, double[] b, double[] c, bool[] d, double[] e, short[] f, bool[] g, short[] h, short[] i, int[] j, short[] k, long[] l, bool[] m, short[] val)
		{
			NKeyHash<int, double, double, bool, double, short, bool, short, short, int, short, long, bool, short> nKeyHash = new NKeyHash<int, double, double, bool, double, short, bool, short, short, int, short, long, bool, short>(UnderlyingHashType.Dictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<int, double, double, bool, double, short, bool, short, short, int, short, long, bool, short>(UnderlyingHashType.ConcurrentDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<int, double, double, bool, double, short, bool, short, short, int, short, long, bool, short>(UnderlyingHashType.SortedDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<int, double, double, bool, double, short, bool, short, short, int, short, long, bool, short>(UnderlyingHashType.HashTable);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());
		}

		[TestCase(new double[] { 0.744015686094768, 0.515808957403437, 0.406041422582251, 0.54939335749922, 0.473457225353204, 0.488793110236895, 0.167833563484174, 0.648457246203188, 0.217074541010463, 0.600424912106444 }, new double[] { 0.613232995203339, 0.525334981514763, 0.889952904959187, 0.399407564848386, 0.293941338683451, 0.387021718726969, 0.440323034506442, 0.936396216944045, 0.334351078297175, 0.917583771011598 }, new double[] { 0.73384210222114, 0.270768857687138, 0.304022593099634, 0.449873007112124, 0.151220726851011, 0.406882386378423, 0.519854297637872, 0.100376104051422, 0.22351231529541, 0.525645355473107 }, new long[] { 6672, -3159, -3151, -2569, -8330, 9215, -9079, -3860, -4236, -1906 }, new short[] { 518, -6438, 2827, -4843, -9850, -443, 441, 3926, -5115, 8468 }, new int[] { -5195, 9501, -7289, 5501, -6292, -535, -5763, 9122, -2036, -8667 }, new short[] { 9377, -8649, -1500, 3828, 5334, -4575, -6341, 368, -3680, -3337 }, new long[] { -3178, -7331, 2964, 8592, -2166, 1115, 2587, -9074, -1150, 3467 }, new int[] { 7695, 6469, 7123, -3998, -4290, 7169, -5868, 1346, -6275, 2203 }, new long[] { 4980, -8203, 8174, -5568, -1285, -830, 5061, 8997, -178, 4723 }, new double[] { 0.294903984430667, 0.00362167088483538, 0.380397479692659, 0.911073645069764, 0.582407574440542, 0.106808406816241, 0.326886175352561, 0.205810152090066, 0.383464585236956, 0.62954524561276 }, new int[] { 6876, -6687, 274, 4494, -6364, -7090, -5774, -7501, -1880, 8163 }, new long[] { -8705, 2311, -3354, 4114, 1680, -4974, -5507, -1465, -121, 8662 }, new double[] { 0.802705615201362, 0.679457667600111, 0.555155087055245, 0.706256552462586, 0.378505174246852, 0.881204431821222, 0.443107849658983, 0.945125013098645, 0.717633799983949, 0.178661246867227 })]
		[TestCase(new double[] { 0.531646776260644, 0.000712604262266589, 0.183854914821617, 0.556626407688775, 0.766361089314502, 0.583480504147467, 0.576074829127674, 0.184019636914143, 0.0398131469450021, 0.290301639721869 }, new double[] { 0.247224197838094, 0.628192221572712, 0.543981470420948, 0.582847269057691, 0.671496567629043, 0.679315900746414, 0.671358711398839, 0.674655238946274, 0.327021017822912, 0.331134144836634 }, new double[] { 0.882224220727675, 0.900188563810749, 0.711868132330416, 0.450304271862984, 0.826839630411398, 0.164390490932572, 0.610415582363687, 0.807458555236207, 0.346258297723838, 0.300544304447502 }, new long[] { 4046, -4676, -1854, -5453, -2468, -8719, -1365, 5512, 8786, -9987 }, new short[] { 3503, -9187, -2262, -5926, 3718, -6509, -7289, 9445, -9303, 3983 }, new int[] { -5802, 5368, 2361, -2269, -4070, 2628, -4222, 4670, 4595, 2039 }, new short[] { 9460, 5371, 6754, 4784, 1759, 9620, -5580, -3665, -5873, 2149 }, new long[] { -5047, 7913, 4705, -3470, 3118, 6832, 266, 164, 5286, 3046 }, new int[] { -9420, 2761, 5453, 2941, -8185, 8676, 2960, -9583, 8616, 4901 }, new long[] { 5502, 3963, -9082, -3251, -9448, 8130, -5943, 2952, 2313, 4096 }, new double[] { 0.953590928555276, 0.818793011744876, 0.766027111451154, 0.427251000621939, 0.451606541616659, 0.314123560820764, 0.0331785231983189, 0.291655100552205, 0.730564110786917, 0.4547773545863 }, new int[] { -7636, 5611, 9382, -8449, 1460, -3300, 9917, -6185, 2971, 3081 }, new long[] { -3338, -5996, -2283, -776, 6646, 987, 6996, -2042, -4020, 4986 }, new double[] { 0.638856461569134, 0.865688477114629, 0.892563378388324, 0.0595224504636239, 0.698735308227472, 0.210121282008533, 0.872080652914979, 0.345447569780726, 0.195462482606742, 0.776575023204356 })]
		[TestCase(new double[] { 0.900694499677371, 0.356374692337762, 0.290205990565105, 0.476083904260809, 0.626954236825441, 0.994526391846373, 0.729000039272476, 0.968389234025213, 0.764354248421432, 0.692550043897959 }, new double[] { 0.910664623095963, 0.0121108950172136, 0.99904536362693, 0.961561390646529, 0.371785089081053, 0.753438564833923, 0.432971085157698, 0.30485475496615, 0.594885127895924, 0.902206335636883 }, new double[] { 0.464251175738988, 0.635314988733882, 0.992713407144283, 0.981210893011285, 0.815920893017166, 0.252465636121326, 0.888053341250892, 0.909660036167903, 0.378725232267159, 0.362935022619988 }, new long[] { -742, 3009, 9903, 7439, 5067, 9532, 8198, 8193, 6683, 6756 }, new short[] { 6407, 7628, 2669, 2127, 6773, 2534, 7332, 8619, 3754, 8905 }, new int[] { 5542, 1344, 5010, -4134, -3753, -4691, -2726, -3819, 3202, -2509 }, new short[] { -7869, 6386, 1793, -1971, -5405, -4795, -9661, -7458, -5836, -2097 }, new long[] { 6869, 464, -587, 5140, -8363, 1655, -9962, -2273, -7148, -6215 }, new int[] { -2283, 9140, -5560, -1331, 1715, 7912, 7997, 4039, 1193, -239 }, new long[] { 2260, 2018, -5007, -805, 4626, -9977, -4163, -5357, -2465, 1569 }, new double[] { 0.609864503894869, 0.739592985128794, 0.722849080675677, 0.292638196746185, 0.101804551715872, 0.253917134019508, 0.0965892626422407, 0.99351679486852, 0.211449978040275, 0.729555822782943 }, new int[] { -4728, 9545, -6669, -580, 9772, -7010, 1948, -6874, 6312, -3319 }, new long[] { -2793, -3701, 1347, 4402, 5640, -5148, -4526, -9780, -9485, -8384 }, new double[] { 0.290948875383916, 0.769715642449314, 0.00960364751964977, 0.564028193039833, 0.579310822570376, 0.646229537504832, 0.234202272833419, 0.929284478039148, 0.331623937157739, 0.331867691749645 })]
		[TestCase(new double[] { 0.799061343911598, 0.906390896954756, 0.490523707350029, 0.830115565019714, 0.224455164384309, 0.635685111692029, 0.434478476380221, 0.778587326304329, 0.471063440884959, 0.581944733197775 }, new double[] { 0.403642835283486, 0.135583636414066, 0.416455660209272, 0.0426951772732172, 0.218207307727173, 0.294957126628122, 0.172214244572546, 0.00272514624648036, 0.510563671360986, 0.859263635640621 }, new double[] { 0.980259082270907, 0.0856821462911005, 0.967837578136398, 0.130703972713418, 0.438606947399027, 0.493858165803299, 0.967735880039509, 0.602444606182372, 0.891676862208022, 0.342436540565657 }, new long[] { 8303, 3362, 6491, -324, 699, -921, 6487, 4744, -86, -7071 }, new short[] { 6160, -98, 796, -1125, 3541, -6892, -2934, 9337, -3083, -4312 }, new int[] { -519, -5369, -1625, -552, -2967, 4267, 8770, -2803, -2169, 4611 }, new short[] { 3358, 6640, 7737, -7426, 3334, 4709, -3780, 8652, 154, 5285 }, new long[] { -588, -1300, 141, -2716, -8975, -296, 916, 482, -927, -4334 }, new int[] { -7187, -9982, -4867, 2146, 7367, 3674, -5011, -2954, -7356, 6431 }, new long[] { 306, -708, -3084, 5300, -431, 9519, 2162, -1775, 5539, 8830 }, new double[] { 0.844393178282489, 0.420571030313415, 0.45917488190307, 0.581509478195342, 0.813780239230851, 0.0390642238962763, 0.724420750385346, 0.054546549010345, 0.421159105571527, 0.866420252652103 }, new int[] { -6648, -1710, 8123, -7833, 1799, 3342, 1508, -4407, -4795, 9658 }, new long[] { -278, 9173, 6010, 3722, -5020, -9878, -8215, 4839, 7713, -8495 }, new double[] { 0.877028095478671, 0.134621695678039, 0.747093920012514, 0.512007617630068, 0.438848530146688, 0.720027153249843, 0.541652527890006, 0.67511424267437, 0.793542927034918, 0.829357023737094 })]
		[TestCase(new double[] { 0.959321547280681, 0.194865494591587, 0.93109216863806, 0.265737846151804, 0.654041664513779, 0.100892357575191, 0.558345003313546, 0.23748764872434, 0.175072956446127, 0.811318360181208 }, new double[] { 0.400618420169045, 0.328572963517426, 0.151011122460948, 0.794026163310756, 0.455495243638519, 0.885672391804714, 0.620040177190695, 0.773023684869066, 0.332540652869521, 0.807770717799557 }, new double[] { 0.949867712776115, 0.982436145647632, 0.168812473383179, 0.345986479123117, 0.989392157173432, 0.0329190311175394, 0.667356304203792, 0.394211314336495, 0.669418379044821, 0.869971661767909 }, new long[] { -7489, 8005, -279, -1382, -9525, -4174, -9446, 695, -9356, -7037 }, new short[] { -1046, 7033, 1338, -8510, 3490, 969, 9671, 9060, -8868, 1063 }, new int[] { -7999, 5372, -3148, 9714, 7589, 9536, -9477, 1701, -4472, 2422 }, new short[] { -1329, -6716, 1361, -3897, 3716, 6, 6849, 4402, 5406, -6714 }, new long[] { 7160, -8294, 4817, -6310, -2797, -8036, -1689, -8111, 3428, -1181 }, new int[] { -9012, 4285, -3245, -7674, 5399, -2862, 1154, 5, 1027, -9063 }, new long[] { -4695, -1149, -4830, -1780, 4290, -4328, -4326, -4763, -2228, -6514 }, new double[] { 0.705926539239439, 0.263448079704981, 0.182703057389102, 0.892249577162904, 0.695132364376975, 0.014739805839369, 0.0277146906721008, 0.158109404685958, 0.625666009553553, 0.781330460580685 }, new int[] { 1227, 8632, 8272, 6707, 1436, 4384, 6528, -963, 702, -3419 }, new long[] { 8851, -3154, -6623, 4471, 7980, -1689, 6535, -3401, -601, -8467 }, new double[] { 0.814519257663991, 0.153714143742674, 0.705830108703035, 0.497200580079668, 0.735010485972748, 0.785860378195467, 0.531585490112931, 0.445449363182042, 0.421109876325871, 0.755244879869393 })]
		[TestCase(new double[] { 0.329125760276395, 0.399612912162958, 0.874606152006707, 0.770028857407174, 0.485415158088047, 0.333523162330279, 0.528849511653581, 0.423038654226362, 0.839172723628195, 0.995292908509864 }, new double[] { 0.457096080508594, 0.83181256373963, 0.726693744643914, 0.0595580339709101, 0.231631496097721, 0.363670108077894, 0.0946449041807302, 0.459114420441498, 0.993166205935723, 0.279611518736748 }, new double[] { 0.187939953612136, 0.697787437447248, 0.688185633946297, 0.549090639012442, 0.966811202916694, 0.407646760534331, 0.225826154568152, 0.416472836591524, 0.100398177793435, 0.785953797300325 }, new long[] { -6246, -2380, -9384, 5596, 9996, 859, -646, -2024, -5236, 1311 }, new short[] { 7732, -1924, -184, -507, 2389, 9653, -1459, 2925, -4688, -2572 }, new int[] { 3823, -8549, -954, -7169, 1345, 2626, 4228, -3489, 6063, -8443 }, new short[] { -7845, -7751, -3546, -8934, 6152, -8476, 6021, 8935, -8805, 3772 }, new long[] { 7919, 3917, -5580, -1447, -2140, 5683, -5858, -5728, 8591, 9681 }, new int[] { 9611, 1590, -6981, 4580, -8104, -7695, 8573, 7783, -5748, -2628 }, new long[] { 6630, -7156, 1910, -6791, -842, 5485, -8376, -1249, 3339, 867 }, new double[] { 0.181611282835534, 0.480198383554909, 0.586596895748096, 0.576924872387631, 0.475320548971799, 0.995344887951084, 0.851530128089492, 0.0246771602074975, 0.748558172839022, 0.783126170645992 }, new int[] { -1513, -42, -2081, 6381, -8056, 562, 9228, 1871, 9168, 3848 }, new long[] { -7051, 8236, 4684, 3822, 7140, 5077, -7992, -8788, 9393, 2372 }, new double[] { 0.70305803404332, 0.769497304581803, 0.546554802240131, 0.38624275400594, 0.8024932261568, 0.500427977880662, 0.992957184087931, 0.573978880221946, 0.253737250926782, 0.0993934353345043 })]
		[TestCase(new double[] { 0.263660817995509, 0.904025067996245, 0.140660622222657, 0.429440632196814, 0.944239117179177, 0.333687499786582, 0.746230602146234, 0.776443518128453, 0.0632630451876964, 0.929720273208674 }, new double[] { 0.81282173647211, 0.487538045033597, 0.479055000226505, 0.974560022807941, 0.395960128119197, 0.269734666808385, 0.745943170853864, 0.895466248921801, 0.71984066708006, 0.721435486209316 }, new double[] { 0.89503096551403, 0.790994267813393, 0.0549343643034503, 0.129912647013512, 0.0800681366026719, 0.654808110396754, 0.951317704260032, 0.00966141000839947, 0.0166199193413462, 0.596714058237483 }, new long[] { 703, -2249, -3202, 7181, -1424, -5131, 5423, -3903, 4937, 467 }, new short[] { -9845, -3522, 9944, -9198, 6115, -5689, -4190, 1439, 9804, 655 }, new int[] { 5089, -8049, 7082, 645, -5912, -546, 6981, -9784, -3012, -4210 }, new short[] { -2352, 4730, 5195, -668, -2109, -1493, -7045, 2399, 915, -6947 }, new long[] { -29, -1177, -7027, -6070, 4275, 1423, 5873, -9700, -3517, 7290 }, new int[] { -2712, -2413, -9611, -322, 6843, -1245, 667, 6150, 3094, 9121 }, new long[] { -2113, 5208, 9107, -850, -7178, -4577, 1280, 614, 2909, -2389 }, new double[] { 0.0678273695836902, 0.670474471836572, 0.0262138852971671, 0.83770589662609, 0.0342398863445222, 0.313356216677165, 0.948916215891445, 0.657694251582815, 0.818520739124399, 0.633201908615046 }, new int[] { 3578, 6682, 3732, -303, 8500, -9938, 4343, -4480, 2486, 9135 }, new long[] { 7838, -3196, 9303, 1793, 5165, 4760, -286, 3821, -8890, -1145 }, new double[] { 0.00711375568393327, 0.262997624586801, 0.369423848283209, 0.943592762548287, 0.796720778009259, 0.693891334204884, 0.353109039530674, 0.181672887495567, 0.449621473648409, 0.52887303453352 })]
		[TestCase(new double[] { 0.488778592780595, 0.875661577505833, 0.9890229217657, 0.0215227892722575, 0.277167481033675, 0.56011383308103, 0.0738089010463138, 0.470617736908895, 0.532395322123727, 0.137980039295731 }, new double[] { 0.553894860462237, 0.28808456672732, 0.90640409239866, 0.688648272626404, 0.488524229958898, 0.727678411047756, 0.705231337205149, 0.436545569652946, 0.0794218625311841, 0.296189231935977 }, new double[] { 0.827669711237619, 0.257802019481455, 0.602277200018185, 0.375824982009747, 0.626088152931113, 0.415947472870325, 0.464755013801509, 0.743066355000747, 0.688103569991935, 0.231173866536084 }, new long[] { 2998, 710, 6526, -8090, -638, -9672, -2977, 8873, -3749, -6035 }, new short[] { 3284, -9697, -6824, 8347, 7775, 4380, -2867, 3615, -898, -8618 }, new int[] { 9772, 8330, -7954, -6930, 4023, -5379, -4531, 2263, -2091, 7223 }, new short[] { -8092, -3384, 5649, -3975, -239, -9631, -765, 6218, -5587, -555 }, new long[] { -2468, 5229, -7518, 7624, 2638, 6251, -8017, 3696, -259, 8140 }, new int[] { -8812, 5679, -4239, 2380, -5149, 4667, -1334, 3457, -2114, -5257 }, new long[] { 4858, 4758, 965, -974, -7942, -3329, -5348, 7149, -1411, 7407 }, new double[] { 0.257285387375059, 0.54563614099549, 0.460188430948271, 0.982854590277585, 0.692489992683982, 0.227149005153751, 0.79251873483533, 0.220999363447074, 0.521484763138688, 0.888602380588931 }, new int[] { -7361, 1770, -7475, -232, 6036, -3772, -9144, -6730, -8824, 5092 }, new long[] { 1702, 5776, -1665, 9669, 4585, 2772, -5734, 3454, 5568, -4030 }, new double[] { 0.580046341093279, 0.241585726496571, 0.255445383608083, 0.61660052864654, 0.64977357659944, 0.513717799686695, 0.323791007196433, 0.305143232133772, 0.926571210346451, 0.0153648643825971 })]
		[TestCase(new double[] { 0.940855626454975, 0.212267132109155, 0.151423760294646, 0.505640997321178, 0.105191126514781, 0.154381720421082, 0.61175424261566, 0.0599100366513757, 0.649414758966032, 0.791432000599537 }, new double[] { 0.290754483682455, 0.0691016377271626, 0.798789832647326, 0.67472695730381, 0.285312712325394, 0.468450109226839, 0.128922127712947, 0.476685840858466, 0.253566558125227, 0.0538657154207424 }, new double[] { 0.0139237223257887, 0.119754826240127, 0.442559083664119, 0.223036491881607, 0.308556039495653, 0.890307701607378, 0.33309880613028, 0.509573325752082, 0.838602095767205, 0.28814826779447 }, new long[] { 9750, 4751, -5261, -9132, 6275, -2542, 2747, 8220, 7565, 1497 }, new short[] { -9461, -6933, -9532, 9739, -9845, 218, -1143, 1614, -3373, -6372 }, new int[] { -2303, 6941, -8967, 7453, -9970, 6421, 5393, 8566, -6057, -5701 }, new short[] { 6425, -7955, -5573, -2774, 6076, 1062, 6643, 5108, 7217, 8248 }, new long[] { 6620, -5642, 1967, 3572, -9459, 7211, -8071, -888, -5692, 5951 }, new int[] { -1049, 5047, -6433, 3145, 8066, -7189, 3720, -2716, -9161, 9853 }, new long[] { 2062, 4180, 4279, 3268, 5071, 8492, 8639, 3241, -6336, -909 }, new double[] { 0.67872481917903, 0.687348782870615, 0.719803689382879, 0.418818816271992, 0.350284875999337, 0.166946560222165, 0.248730789054525, 0.372916427614594, 0.845709814152545, 0.140832665907607 }, new int[] { 4493, -3716, 4260, -2010, 5346, -8621, 8477, 1280, -841, 3266 }, new long[] { 7341, -639, 4270, 7363, -3812, -7558, 77, 8698, 8499, -7953 }, new double[] { 0.928601170856786, 0.434323018153349, 0.272386151958437, 0.760801908914373, 0.118886516950506, 0.760163024887519, 0.0325766904431287, 0.759466693158944, 0.306993752395266, 0.736406035598557 })]
		[TestCase(new double[] { 0.891752418545891, 0.313108389877299, 0.518466444461824, 0.901068913704282, 0.268016296563678, 0.288978419866869, 0.995979685334479, 0.314514436439851, 0.896056421518352, 0.68472086297568 }, new double[] { 0.000793710351359896, 0.367977992802848, 0.204168763106767, 0.519804233461527, 0.587412620702485, 0.210681193606314, 0.973803251503875, 0.851600372629054, 0.109485480054042, 0.228270534066609 }, new double[] { 0.663085506606421, 0.313784450438705, 0.447879578661117, 0.743403251163384, 0.212231495050821, 0.290372105450543, 0.0417710920058988, 0.952242655191683, 0.280587104745483, 0.00720859226175053 }, new long[] { -9272, -6710, -4858, 4429, 5431, 1080, 8990, 6248, 2003, -9591 }, new short[] { -7478, -6212, -9221, -5193, -7968, 1212, -5396, 5051, -6531, 8163 }, new int[] { 5726, -6379, 2999, -8424, -8532, 1559, 7303, 5500, 3776, 9551 }, new short[] { -5055, -9124, -9320, 7776, 2967, 6726, -7780, -346, 4963, -9331 }, new long[] { -4777, -6772, -4971, -8216, -7954, -525, -4501, -5848, 2837, 3031 }, new int[] { -8794, -4215, 5576, -2552, -5582, 7106, 288, -6433, 2963, -6126 }, new long[] { 3775, -6509, -7526, 2450, 5462, -8353, -6890, -6998, 1838, -4696 }, new double[] { 0.449680745345392, 0.747493351692098, 0.00438568555022855, 0.139996452322228, 0.647101310848771, 0.625033139542226, 0.929562965375168, 0.560850649401942, 0.976487340860296, 0.599581639561607 }, new int[] { -3938, 3152, -7335, -9254, 8347, 9159, -4701, 3230, 3359, 5860 }, new long[] { -3561, 8651, 6688, 1091, -3107, -8267, -9245, 2577, -3679, -9600 }, new double[] { 0.318319603949003, 0.124852445500368, 0.615642625659538, 0.376742541965443, 0.201927571651492, 0.312724498711864, 0.284803487958761, 0.638856914657567, 0.725280470552519, 0.595815679335881 })]
		public void Forloop(double[] a, double[] b, double[] c, long[] d, short[] e, int[] f, short[] g, long[] h, int[] i, long[] j, double[] k, int[] l, long[] m, double[] val)
		{
			bool[] found = new bool[9];
			bool allFound = false;
			NKeyHash<double, double, double, long, short, int, short, long, int, long, double, int, long, double> nKeyHash = new NKeyHash<double, double, double, long, short, int, short, long, int, long, double, int, long, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, double, double, long, short, int, short, long, int, long, double, int, long, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Key11 == l[7] && mkv.Key12 == m[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Key11 == l[8] && mkv.Key12 == m[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, double, double, long, short, int, short, long, int, long, double, int, long, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<double, double, double, long, short, int, short, long, int, long, double, int, long, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, double, double, long, short, int, short, long, int, long, double, int, long, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Key11 == l[7] && mkv.Key12 == m[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Key11 == l[8] && mkv.Key12 == m[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, double, double, long, short, int, short, long, int, long, double, int, long, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<double, double, double, long, short, int, short, long, int, long, double, int, long, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, double, double, long, short, int, short, long, int, long, double, int, long, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Key11 == l[7] && mkv.Key12 == m[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Key11 == l[8] && mkv.Key12 == m[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, double, double, long, short, int, short, long, int, long, double, int, long, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<double, double, double, long, short, int, short, long, int, long, double, int, long, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, double, double, long, short, int, short, long, int, long, double, int, long, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Key11 == l[7] && mkv.Key12 == m[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Key11 == l[8] && mkv.Key12 == m[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<double, double, double, long, short, int, short, long, int, long, double, int, long, double> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);
		}

		[TestCase(0.517050654402492, 0.913019779097764, -1003, true, 0.560511286165803, true, false, false, 9130, 0.281262035612605, 0.178220989265582, -9158, 5128, 6705, 0.604701841997309)]
		[TestCase(0.67321466639322, 0.626026748505433, 8724, false, 0.867258931913999, false, true, true, 3279, 0.313476107229235, 0.0452488316433732, 9024, 8474, 17, 0.202524287720455)]
		[TestCase(0.824445868760555, 0.642809368037996, 6334, false, 0.684876917249, false, true, true, -6703, 0.00846997462607453, 0.62509411881915, 4174, -5093, 5346, 0.712345608376127)]
		[TestCase(0.989103162190459, 0.28491094023218, -4977, false, 0.141914767744911, false, true, false, 8631, 0.574909718509256, 0.786245564364943, -7456, 5716, -361, 0.51526245452243)]
		[TestCase(0.636068367229806, 0.376938407019218, 4879, true, 0.45681616685205, true, false, false, -6990, 0.204997122383209, 0.838240663445667, 5650, 5429, -8724, 0.242164813094849)]
		[TestCase(0.659591465564254, 0.485529178979587, -9628, true, 0.324372945038775, true, true, true, -2820, 0.0111370729334359, 0.266837213312666, -5340, 7702, 7171, 0.898631352884058)]
		[TestCase(0.272552821912129, 0.0491341208336568, -2768, true, 0.372401607396268, false, true, false, -3789, 0.176933987148541, 0.763847720699314, 9238, -7985, 7907, 0.303674104299245)]
		[TestCase(0.408822790909942, 0.786112760094047, -3076, true, 0.915318252945001, false, false, true, -6848, 0.754924563111237, 0.935899597097141, 1071, -2298, 4857, 0.189978953539384)]
		[TestCase(0.30246199960935, 0.340104832472328, -713, false, 0.932444300471081, true, false, false, 3825, 0.994009101294917, 0.694876421100868, 9884, 4159, 5493, 0.560525224339462)]
		[TestCase(0.798345023672257, 0.599484815541415, 8557, false, 0.602314282023494, false, true, false, 8864, 0.597914967498702, 0.163925150020013, -5700, -5919, 7890, 0.436502010299127)]
		public void Add(double a, double b, short c, bool d, double e, bool f, bool g, bool h, long i, double j, double k, int l, int m, long n, double val)
		{
			NKeyHash<double, double, short, bool, double, bool, bool, bool, long, double, double, int, int, long, double> nKeyHash = new NKeyHash<double, double, short, bool, double, bool, bool, bool, long, double, double, int, int, long, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<double, double, short, bool, double, bool, bool, bool, long, double, double, int, int, long, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<double, double, short, bool, double, bool, bool, bool, long, double, double, int, int, long, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<double, double, short, bool, double, bool, bool, bool, long, double, double, int, int, long, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
		}

		[TestCase(-3870, -1987, -8809, true, 0.956579539438979, -3271, 2513, 0.329810690754005, 0.140573447170003, 4184, 0.415658767994334, -7111, 420, 3077, 5369, 1483)]
		[TestCase(-5658, -5451, -4903, false, 0.115236736422049, -5081, 1748, 0.900238019833452, 0.136782336112476, -3986, 0.750594120822192, 9298, 813, 2290, 6331, -5360)]
		[TestCase(5, 4456, -4170, true, 0.155452353020875, 2139, 8759, 0.1000872287434, 0.0688795396447552, -5002, 0.607789932567528, -1773, -823, -4412, 9531, -6099)]
		[TestCase(-6110, 8807, 5415, false, 0.400024902261805, -2079, -7895, 0.0605236250257695, 0.813182732934683, -6814, 0.460237977309263, 3117, 1716, 3214, 5781, 521)]
		[TestCase(7852, -6325, 2882, true, 0.362401640211419, -9894, -1625, 0.61004428733608, 0.289404371422438, -6904, 0.230572868245921, 7307, 2762, -6476, -1171, 7148)]
		[TestCase(-3519, 1111, 5409, true, 0.843732142282525, -2402, 6638, 0.104266031693791, 0.617637281593698, -5380, 0.950111482269183, 9923, -7064, -4357, 285, -1836)]
		[TestCase(-785, -8364, 372, false, 0.635187234559649, -6430, 6651, 0.18922913781797, 0.521683295965979, -6784, 0.147312224445544, -5093, -6690, -5203, -1551, 2740)]
		[TestCase(4356, 2055, -3361, false, 0.890233944584724, -6223, 3646, 0.512769378960491, 0.351746488992007, 797, 0.180551743218932, -7370, -8896, -1549, -733, -9852)]
		[TestCase(2808, 6447, -1905, true, 0.657513773840626, -6673, -5554, 0.145565080989881, 0.722970956341816, 1625, 0.0786145590611801, 3659, -5348, 1732, 8776, -2442)]
		[TestCase(6170, -3737, -4431, true, 0.950200993078854, -319, 358, 0.271899682130618, 0.399399326834548, -9881, 0.923376553190582, -8093, 9957, 4022, -7316, -8015)]
		public void Upsert(long a, int b, long c, bool d, double e, int f, int g, double h, double i, int j, double k, long l, long m, long n, short val, short newVal1)
		{
			NKeyHash<long, int, long, bool, double, int, int, double, double, int, double, long, long, long, short> nKeyHash = new NKeyHash<long, int, long, bool, double, int, int, double, double, int, double, long, long, long, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, l, m, n, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<long, int, long, bool, double, int, int, double, double, int, double, long, long, long, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, l, m, n, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<long, int, long, bool, double, int, int, double, double, int, double, long, long, long, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, l, m, n, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<long, int, long, bool, double, int, int, double, double, int, double, long, long, long, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.AreEqual(val, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Upsert(a, b, c, d, e, f, g, h, i, j, k, l, m, n, newVal1);
			Assert.AreEqual(newVal1, nKeyHash.Get(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
		}

		[TestCase(5301, true, 6053, -3541, 0.742030536635793, 0.144130031179697, 0.919356837365477, -8856, -6870, false, -7343, -6859, true, 0.242925204915425, -7460)]
		[TestCase(-7046, false, -1056, 9587, 0.985565129195138, 0.0925733307807582, 0.981794845770018, 1916, 854, true, -3328, 4536, false, 0.763876212650852, -6464)]
		[TestCase(-5820, false, -1998, 4513, 0.158271360284775, 0.494268575913398, 0.195193272640553, -2434, -2158, true, 5560, -8341, false, 0.0384907517761415, 4045)]
		[TestCase(4179, false, -3827, -4927, 0.038664786628757, 0.285459178632805, 0.861818768951026, -7384, -9723, false, 5665, -9895, false, 0.3803429614661, -1830)]
		[TestCase(-1654, true, -4134, 9592, 0.095556190747561, 0.971094137044202, 0.756930278500975, 8518, -8306, true, 9048, 2870, false, 0.0244009257407863, -5849)]
		[TestCase(-9805, true, 1147, 6807, 0.233545696005945, 0.00569609180358057, 0.418264033467632, 8195, 4503, true, -3057, -9380, false, 0.53804966366759, -2500)]
		[TestCase(-218, true, 9957, 9671, 0.537771900434872, 0.0221307207933304, 0.789649872477003, -624, 8857, true, 9040, -1961, false, 0.620893785087808, -8275)]
		[TestCase(2838, true, -7872, 6124, 0.17793686277137, 0.249933635466701, 0.447819402649915, -1608, -7063, false, 9979, 6921, true, 0.0883682151736544, 4968)]
		[TestCase(8802, false, -2241, 4193, 0.143599269047193, 0.0172503553411227, 0.645616377073161, -8570, -267, false, -5598, -8706, true, 0.109204302592764, -4370)]
		[TestCase(2075, false, -4220, 2779, 0.249382394016433, 0.540375627363276, 0.924582553526658, 1600, -2797, false, -9173, 313, true, 0.580856415247943, 775)]
		public void Delete(long a, bool b, long c, short d, double e, double f, double g, int h, short i, bool j, short k, short l, bool m, double n, short val)
		{
			NKeyHash<long, bool, long, short, double, double, double, int, short, bool, short, short, bool, double, short> nKeyHash = new NKeyHash<long, bool, long, short, double, double, double, int, short, bool, short, short, bool, double, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<long, bool, long, short, double, double, double, int, short, bool, short, short, bool, double, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<long, bool, long, short, double, double, double, int, short, bool, short, short, bool, double, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<long, bool, long, short, double, double, double, int, short, bool, short, short, bool, double, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
		}

		[TestCase(false, 6667, -3792, true, 5978, 6093, true, 8579, 6779, false, 0.0155715132204683, 5811, -9442, 1693, 0.102331915917961)]
		[TestCase(true, 5889, -188, true, -9812, 9967, true, -1601, -3636, true, 0.589809621493243, 3601, 6232, 1401, 0.25308070390163)]
		[TestCase(true, -3902, 9181, false, 8793, -5841, false, 9715, 5637, true, 0.618848961134837, -4147, 827, 9728, 0.775492654077472)]
		[TestCase(true, 9722, 8590, false, 1347, -5963, false, 3436, 2231, true, 0.501060370123508, -1730, 9843, -6693, 0.209163553644514)]
		[TestCase(false, 4910, -2820, true, -1940, 4213, true, 2511, 2898, true, 0.296276431668679, 6173, 4173, -5723, 0.390490789613915)]
		[TestCase(true, -7142, -1330, true, 8183, 2072, true, -1266, -9944, false, 0.56033645270408, 2659, -3049, -1145, 0.438660626038285)]
		[TestCase(true, -5737, 6409, true, 2189, 7465, true, 9108, 1669, false, 0.959330471213595, -2788, -4306, -389, 0.271082918751558)]
		[TestCase(false, 720, -838, false, -4925, -2835, true, -1008, -4877, true, 0.374123333196213, -3822, -2874, 692, 0.842650994585199)]
		[TestCase(false, -320, -6342, false, -7998, -8335, true, -7279, 2086, true, 0.77213123616396, -6252, 6999, -442, 0.949860555096464)]
		[TestCase(false, -682, 9122, true, 3162, -9512, false, -7470, -6218, false, 0.814394370566306, 5270, 1287, 9342, 0.235346887835929)]
		public void Remove(bool a, short b, short c, bool d, long e, int f, bool g, int h, int i, bool j, double k, long l, long m, long n, double val)
		{
			NKeyHash<bool, short, short, bool, long, int, bool, int, int, bool, double, long, long, long, double> nKeyHash = new NKeyHash<bool, short, short, bool, long, int, bool, int, int, bool, double, long, long, long, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<bool, short, short, bool, long, int, bool, int, int, bool, double, long, long, long, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<bool, short, short, bool, long, int, bool, int, int, bool, double, long, long, long, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<bool, short, short, bool, long, int, bool, int, int, bool, double, long, long, long, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Remove(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
		}

		[TestCase(-6582, -7398, 9432, -3874, 0.362481609155648, 8164, false, true, 7529, true, 8055, -2848, 0.993830061049121, -7482, -4286)]
		[TestCase(-3606, -1523, -6623, -2620, 0.952689300734871, -6105, true, false, -183, false, -8692, -2249, 0.575721493724604, 874, -4935)]
		[TestCase(2485, -3577, -1549, 4149, 0.909601351669804, 3687, true, false, 2093, false, -5763, 9055, 0.544359579470176, 8448, -8314)]
		[TestCase(-7642, -6321, 9049, -8103, 0.86827359156137, 9621, false, false, 5024, false, -1912, -9582, 0.480864208881214, 6634, -4056)]
		[TestCase(415, 5538, -8381, 2465, 0.194069544409434, 1633, true, false, -5674, true, 555, -6686, 0.56408642491516, -9161, 4817)]
		[TestCase(-5161, -5556, -6265, -1867, 0.356689668426611, 7628, false, false, 3508, false, -2139, 6725, 0.671293158862411, -1587, 105)]
		[TestCase(3270, -3779, -1471, -3848, 0.806291193611124, -1302, true, true, 4567, true, -6343, 7949, 0.736291058238731, -129, -3189)]
		[TestCase(6308, 3342, -1141, -9792, 0.0449626175896091, -6355, true, false, -498, false, -8282, -4079, 0.405459987654099, -2975, 6020)]
		[TestCase(4906, -4725, 7313, 4219, 0.937747448188135, -5663, true, false, -5287, false, -2600, -3978, 0.45828337895604, 8080, -6521)]
		[TestCase(9677, 3973, 9747, -3300, 0.456599596169125, 4516, false, true, -2486, false, 6586, -5264, 0.951344264182888, 7836, 4409)]
		public void ContainsKey(int a, int b, int c, long d, double e, int f, bool g, bool h, short i, bool j, int k, int l, double m, long n, int val)
		{
			NKeyHash<int, int, int, long, double, int, bool, bool, short, bool, int, int, double, long, int> nKeyHash = new NKeyHash<int, int, int, long, double, int, bool, bool, short, bool, int, int, double, long, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<int, int, int, long, double, int, bool, bool, short, bool, int, int, double, long, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<int, int, int, long, double, int, bool, bool, short, bool, int, int, double, long, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<int, int, int, long, double, int, bool, bool, short, bool, int, int, double, long, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Delete(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
		}

		[TestCase(true, -2482, -6595, 0.301166823739729, -1364, 0.387131276255069, false, false, 7891, false, false, 2055, -198, -2241, -7831)]
		[TestCase(true, 5757, -2706, 0.515119842027835, -6655, 0.903530334543218, true, true, -7060, false, true, 3466, -1367, -5774, -2391)]
		[TestCase(false, -6277, 9131, 0.700681816181486, -1161, 0.453516014597153, false, true, -798, false, true, -2080, 3504, 7042, -1896)]
		[TestCase(false, 834, 2747, 0.447403900067976, -7127, 0.288291572261737, false, true, 743, true, false, 6898, -9533, -9071, -406)]
		[TestCase(true, 7538, 7184, 0.51422257233142, 5198, 0.165886239225923, true, true, 8918, true, true, -7244, 8091, -6363, -3260)]
		[TestCase(true, -8879, 3574, 0.74174070998176, 8769, 0.410346584119995, false, true, -8646, false, false, -122, -1610, 8583, -4158)]
		[TestCase(true, -9133, 2076, 0.980376882935118, 2391, 0.953257907625873, true, false, -8155, false, true, 5046, 3828, 5850, -5397)]
		[TestCase(false, -7172, 208, 0.200221404992147, -4722, 0.0939560523694176, false, false, -7841, false, true, 7853, 5831, -1557, -185)]
		[TestCase(true, -5464, 7202, 0.653936147994332, -9073, 0.870248457356472, true, true, 1243, false, true, 7897, 1730, 48, -4632)]
		[TestCase(true, -3109, -6165, 0.837572200613828, 8830, 0.127897144354832, true, false, 3306, false, false, 5234, -81, 8219, 8834)]
		public void Clear(bool a, int b, int c, double d, long e, double f, bool g, bool h, int i, bool j, bool k, int l, short m, long n, long val)
		{
			NKeyHash<bool, int, int, double, long, double, bool, bool, int, bool, bool, int, short, long, long> nKeyHash = new NKeyHash<bool, int, int, double, long, double, bool, bool, int, bool, bool, int, short, long, long>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j, k, l, m), 0);

			nKeyHash = new NKeyHash<bool, int, int, double, long, double, bool, bool, int, bool, bool, int, short, long, long>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j, k, l, m), 0);

			nKeyHash = new NKeyHash<bool, int, int, double, long, double, bool, bool, int, bool, bool, int, short, long, long>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j, k, l, m), 0);

			nKeyHash = new NKeyHash<bool, int, int, double, long, double, bool, bool, int, bool, bool, int, short, long, long>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
			Assert.AreEqual(nKeyHash.Count(a, b, c, d, e, f, g, h, i, j, k, l, m), 0);
		}

		[TestCase(false, 1592, 5580, 6789, -1772, -3333, 0.701053760340928, true, -388, -2743, 3770, -9848, 0.194782358684941, 0.455862515818264, 2077)]
		[TestCase(false, -9239, -9735, 2408, -3536, -5484, 0.156022435126837, true, 8702, 6498, 5314, -3859, 0.445403861089332, 0.47774008311226, -3501)]
		[TestCase(true, -9294, -1946, -2552, 9979, 7253, 0.982691117554294, true, -6, 2168, -2810, 5821, 0.258326577142964, 0.238696003909547, 7574)]
		[TestCase(false, 3948, 1632, -7151, -4972, 1572, 0.203945263849546, false, -132, -8654, -9138, 1892, 0.843926982881467, 0.0145431379855346, 2912)]
		[TestCase(false, -4886, -474, -6886, -958, 3066, 0.604822737446438, true, -863, 4823, -7483, -2369, 0.513531916082619, 0.0119858295712554, 9272)]
		[TestCase(false, 7953, 4926, -8871, -2218, -8633, 0.72535260986786, false, -5471, 4925, 4135, 4147, 0.909309248397736, 0.305173718978266, 9119)]
		[TestCase(false, -7223, 2837, 7080, 1642, -7922, 0.314821660665247, false, 5732, -5490, 6620, 7500, 0.124827649502469, 0.401188356523024, -7488)]
		[TestCase(false, 3807, -3683, 593, 2650, -7093, 0.848277016937862, true, 2509, 1546, -3980, 9051, 0.24988508049859, 0.409366755005609, 4904)]
		[TestCase(true, 3909, 344, 15, -538, 9739, 0.739633433865213, true, -1402, 7196, -7602, 5899, 0.959693473744995, 0.830950770448405, 1159)]
		[TestCase(false, 2010, 8036, -7982, 983, -9671, 0.391602748721653, false, 3452, 6213, -1603, -2975, 0.0164200421499182, 0.276713157667179, -4376)]
		public void Get(bool a, long b, long c, long d, int e, int f, double g, bool h, long i, short j, long k, short l, double m, double n, short val)
		{
			NKeyHash<bool, long, long, long, int, int, double, bool, long, short, long, short, double, double, short> nKeyHash = new NKeyHash<bool, long, long, long, int, int, double, bool, long, short, long, short, double, double, short>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<bool, long, long, long, int, int, double, bool, long, short, long, short, double, double, short>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<bool, long, long, long, int, int, double, bool, long, short, long, short, double, double, short>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));

			nKeyHash = new NKeyHash<bool, long, long, long, int, int, double, bool, long, short, long, short, double, double, short>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			Assert.IsTrue(nKeyHash.ContainsKey(a, b, c, d, e, f, g, h, i, j, k, l, m, n));
		}

		[TestCase(false, true, 9130, false, -2318, true, -8983, -7018, 0.86018657817514, true, 1085, false, 0.844589134605876, 3800, -8933)]
		[TestCase(true, true, -2344, false, 4173, false, -7964, 8364, 0.55140738820257, false, 6708, true, 0.973738747171005, 9245, -8165)]
		[TestCase(true, true, 4195, false, -791, true, -2106, 8977, 0.892647793932188, true, -7990, true, 0.833121246580557, -3748, 4504)]
		[TestCase(true, true, 8679, true, 54, true, 2962, 4745, 0.961134712659351, false, -5027, true, 0.405178194588599, 2901, 972)]
		[TestCase(true, false, -6264, true, 4866, false, 2121, 3692, 0.229615968758993, true, -5176, true, 0.490135526047151, 1358, 2164)]
		[TestCase(false, false, 2113, true, 2054, false, -9149, -8021, 0.459576009986725, false, -3252, true, 0.74868306086803, 4043, -5762)]
		[TestCase(true, true, -3922, false, 7134, false, 4582, -8706, 0.569230911587007, true, -5727, true, 0.704378108356324, -2943, -4768)]
		[TestCase(true, false, -6612, false, -3624, true, -2707, 1580, 0.0423228875930993, false, 3629, true, 0.727169937792779, -1779, -1879)]
		[TestCase(false, true, 9648, false, 9220, false, -591, -7076, 0.711178735229736, true, -1802, false, 0.0364683401009386, -7008, -2216)]
		[TestCase(false, false, 4921, false, -2050, false, 1980, -2083, 0.383425221025676, false, -6072, false, 0.26152876683582, -7647, -6493)]
		public void TryGetValue(bool a, bool b, long c, bool d, short e, bool f, short g, long h, double i, bool j, int k, bool l, double m, long n, int val)
		{
			int fetch;
			bool b1;
			NKeyHash<bool, bool, long, bool, short, bool, short, long, double, bool, int, bool, double, long, int> nKeyHash = new NKeyHash<bool, bool, long, bool, short, bool, short, long, double, bool, int, bool, double, long, int>(UnderlyingHashType.Dictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, n, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, n, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<bool, bool, long, bool, short, bool, short, long, double, bool, int, bool, double, long, int>(UnderlyingHashType.ConcurrentDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, n, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, n, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<bool, bool, long, bool, short, bool, short, long, double, bool, int, bool, double, long, int>(UnderlyingHashType.SortedDictionary);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, n, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, n, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);

			nKeyHash = new NKeyHash<bool, bool, long, bool, short, bool, short, long, double, bool, int, bool, double, long, int>(UnderlyingHashType.HashTable);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, n, out fetch);
			Assert.IsFalse(b1);
			Assert.AreEqual(fetch, default(int));
			nKeyHash.Add(a, b, c, d, e, f, g, h, i, j, k, l, m, n, val);
			b1 = nKeyHash.TryGetValue(a, b, c, d, e, f, g, h, i, j, k, l, m, n, out fetch);
			Assert.IsTrue(b1);
			Assert.AreEqual(fetch, val);
		}

		[TestCase(new short[] { 5520, -3436, -1410, 3063, 4655, -3132, -5358, 583, -9728, -5466 }, new short[] { 3624, -768, 1980, 5716, 5294, 6824, -5821, -9428, 717, 792 }, new long[] { -1841, 1006, 7463, 5064, -9340, 2949, 3029, -2912, -6236, 8158 }, new short[] { -6649, -7181, 2555, -508, -883, 7363, 9618, 2166, -2304, 6637 }, new int[] { 6262, -543, 2801, 8730, 4300, 7891, -5058, 8014, 2539, -6626 }, new int[] { -4387, 9666, 8444, -5431, 18, -5485, -901, 3523, 2404, -8292 }, new double[] { 0.691888698698901, 0.87771166575966, 0.341037353659532, 0.105595011778919, 0.0591744878604889, 0.540377314919782, 0.833794466608108, 0.124478594923615, 0.330035010972077, 0.896561441429221 }, new long[] { 7204, 2010, 2874, 4078, 4528, 8701, 8204, 8732, -9234, -7233 }, new int[] { -1991, 5014, 4547, -9609, 2546, -6316, -5627, -2011, 9471, -5396 }, new short[] { -1733, -3903, 9760, -4010, -7198, 8708, -7363, 689, 7547, -6506 }, new int[] { -8782, -7547, 1414, 4607, -3832, 3600, -3207, -5633, 38, 1316 }, new short[] { -3690, 364, 2759, -360, 3697, 8822, -6992, -3568, -434, 7500 }, new int[] { -3564, -1312, -6982, -8001, -334, 1109, 2249, -3113, 1278, 5819 }, new double[] { 0.803346776311913, 0.375789633195749, 0.0592416813872949, 0.863560048334096, 0.0774471592518721, 0.277825300711126, 0.18002509054729, 0.996961839961336, 0.711138686496363, 0.947268139080735 }, new double[] { 0.844529115522527, 0.000306024216257978, 0.897478239563051, 0.407803223658261, 0.914703642909743, 0.895047435488108, 0.666815116846382, 0.506124607988691, 0.614544264792718, 0.198884893301355 })]
		[TestCase(new short[] { 5702, 6203, -8874, -9951, 7057, 2528, 9433, -583, -5056, 5057 }, new short[] { -8647, 9904, 3087, 4218, 5249, 8792, -819, 5487, -1909, -1858 }, new long[] { 5222, -6931, 2207, 619, -9388, -3570, 738, 4860, -6295, 1764 }, new short[] { 7772, -7872, 4594, -2699, -9881, 9861, -3608, -8861, -9785, -980 }, new int[] { -3877, 4183, 4995, 9164, 7592, 6984, -3081, -6268, 2906, 9500 }, new int[] { -1279, 7847, -7967, -5850, -1244, 2634, -6002, 504, 9435, 628 }, new double[] { 0.0895484402261434, 0.228696936382305, 0.28562655126938, 0.658927881931387, 0.864226324420528, 0.961251794342534, 0.265519139946214, 0.2893602337173, 0.705098128740256, 0.769362233937421 }, new long[] { 2401, -1957, 5274, 9069, -7979, -8960, -1928, 3042, 3026, -6373 }, new int[] { 9509, -2992, -8044, -5796, -6955, 9924, -9904, 445, 8544, -2517 }, new short[] { 5865, 5886, -8298, -415, -2770, -8451, -1528, -8181, -8118, 8367 }, new int[] { 1674, -8868, -371, 7518, -2899, -9320, -7426, -7037, -7869, -2283 }, new short[] { -5435, 953, 7477, 5810, 1118, 4782, -7379, -8489, 134, 7358 }, new int[] { 9129, 4863, -2758, -3379, 9520, 6513, -3658, -4308, 1841, -9526 }, new double[] { 0.628337796138757, 0.312672634288982, 0.558120139668752, 0.732901436152356, 0.597552040870093, 0.918988792187995, 0.868946413914182, 0.221759366440475, 0.855145595900317, 0.118258229046249 }, new double[] { 0.86761453881283, 0.856665043559235, 0.415831234965395, 0.541437844997941, 0.145897665594657, 0.245595908372475, 0.920480713676885, 0.294492659296138, 0.92330281851967, 0.622272441453427 })]
		[TestCase(new short[] { 8927, -3037, 1682, -5478, 9237, 6809, 3888, -6990, 7996, 585 }, new short[] { 4336, 6881, 1119, -8342, 5149, 8309, 9790, -7179, -6139, 2738 }, new long[] { 7403, 8183, -5592, -2229, -9991, -8002, -3451, 6412, -6297, 4609 }, new short[] { 8103, -9547, -2774, 9395, -8455, -4394, 4570, -3358, 5419, 5140 }, new int[] { -5509, 4369, -3562, -3482, -1971, -9528, -3986, -3340, 5678, -5391 }, new int[] { -4878, 5589, -7969, -4271, 5040, -9255, -7444, -6086, -5485, 7240 }, new double[] { 0.513117504545077, 0.873821373038842, 0.965321223701034, 0.169400271107163, 0.624073298007284, 0.694265874891666, 0.482854688764948, 0.586173857369541, 0.0056509855229645, 0.477251834923984 }, new long[] { -6259, 3149, -2599, -1280, -1751, -6965, 1746, 7889, 9740, 9535 }, new int[] { 5982, 9887, -9264, 9093, -510, -7484, 8421, -8501, -5644, -9198 }, new short[] { -6949, 657, -7872, 8177, -5120, -2985, 5063, -6949, 4035, 4142 }, new int[] { 813, 4289, -3453, -3865, -9131, 1970, -1809, 3310, 7478, 2006 }, new short[] { -1002, -5334, -5828, -5022, -8741, 374, 6741, -9787, 3898, -33 }, new int[] { 5462, -1839, -2631, 9311, -3504, 3081, 1022, -778, -6158, -8765 }, new double[] { 0.398507566376826, 0.434864104462259, 0.192710050005796, 0.279934056233584, 0.436174728179432, 0.0846668933912492, 0.667086694700218, 0.730023015630442, 0.911346914671057, 0.875930984446747 }, new double[] { 0.716224206945032, 0.255562625944411, 0.20087159061845, 0.61742299544505, 0.590155299096441, 0.91925391411374, 0.324326914886165, 0.857485142004436, 0.846039413868468, 0.725223057309735 })]
		[TestCase(new short[] { 271, 4851, -849, -5930, 8678, -7345, -3077, -2766, 9637, -2214 }, new short[] { -9051, 8967, -529, 6245, -5962, -9699, -9188, 8571, 6253, 9563 }, new long[] { 7031, -7857, -8014, 6379, 5641, 352, -5856, 5019, -2490, -1889 }, new short[] { -3404, 3872, 2300, -663, 962, 3117, 9545, 9784, -3080, -3929 }, new int[] { 4770, -3891, 4961, 441, 6570, 5355, 5640, -2228, -1688, 1503 }, new int[] { 7573, -2085, -9103, 7355, 7471, -1869, 2867, 2770, -1573, -1672 }, new double[] { 0.925541634636718, 0.595110261624265, 0.986198263236414, 0.576446704369246, 0.0595188695283229, 0.353707762134125, 0.33341064319639, 0.00669216178669229, 0.26417849690848, 0.5459366722712 }, new long[] { -9245, -8973, 1653, 183, -5206, 924, -2819, 1543, 9808, -9712 }, new int[] { 4710, 6370, -3291, 6005, 535, 8680, 2977, 4943, 1863, -7167 }, new short[] { -9748, -3223, 1359, 8591, -2440, -7130, -3615, -6566, -749, -502 }, new int[] { -1312, 5506, -7511, 7392, 750, 6548, 6259, 711, 2562, -3451 }, new short[] { -9049, -8675, 2960, -1860, 3615, -7859, -4805, -6281, -9005, -7490 }, new int[] { 4096, 1723, -1730, -7547, 668, 3976, -334, 3061, -7374, -8075 }, new double[] { 0.227011953120591, 0.187368805141826, 0.114644389187286, 0.515606715583991, 0.579958342751469, 0.960176637377672, 0.6941383689149, 0.465746169195392, 0.262811845290853, 0.699330502981008 }, new double[] { 0.121045424659292, 0.113271890726533, 0.119047147277299, 0.265814475373279, 0.0941217425717608, 0.946347701803943, 0.690762010724639, 0.161002542432864, 0.248786640935012, 0.270967688071992 })]
		[TestCase(new short[] { 7674, -7332, -7559, -3257, 5399, 6962, -2762, -9962, -3274, 6772 }, new short[] { -3116, -6800, -1912, 639, -7991, 7201, 9029, -7350, 6539, 4412 }, new long[] { -1742, 5878, 8460, -2992, -9911, 1831, -656, -7045, -9430, 1740 }, new short[] { -9837, -3553, -1914, 7204, -5750, -8125, -8691, 5550, 4911, 4635 }, new int[] { 1965, 3845, -7409, -1517, -2896, 9220, 4177, 1741, -6690, -5319 }, new int[] { 9895, 1166, -3319, 562, 7161, -8203, -5794, 5432, -3345, -6430 }, new double[] { 0.381023155702754, 0.214206769230872, 0.973395310329923, 0.749188044457318, 0.830599029935244, 0.0218701446530736, 0.755677593292518, 0.544133128386053, 0.319527618735809, 0.00669128774045561 }, new long[] { 5893, -6519, -2262, -8094, -7552, 4410, 3288, -21, 9902, -9132 }, new int[] { 7652, 7600, 9643, 5888, 1844, -1004, 9764, 7521, -9956, -7546 }, new short[] { 7667, -4124, -1102, 1342, -2984, -2318, 4377, -2393, 1870, -3333 }, new int[] { -5891, -6704, -4648, -6824, -1214, 6415, -6570, -5224, -1883, -7248 }, new short[] { -1493, 4226, 5528, -4211, -4083, 18, -5360, -6420, -6860, -2383 }, new int[] { -9327, 7590, 839, -6062, -7533, 19, 4582, 6393, 4888, 4764 }, new double[] { 0.00165703706520472, 0.284153971953389, 0.905386931218853, 0.661862439318496, 0.837905716541179, 0.717918767928108, 0.61252899077373, 0.823489908046783, 0.355170054060952, 0.771429171213614 }, new double[] { 0.278314320965816, 0.7495357490841, 0.470324511858786, 0.864599973831605, 0.69734654608059, 0.172088706014719, 0.51729441691064, 0.155477648673336, 0.271347180135244, 0.849812561576167 })]
		[TestCase(new short[] { -6956, 798, -5531, -5745, -4005, -3482, 2455, -8585, -9289, 8765 }, new short[] { -8165, -2965, -114, 3350, -7281, -7176, 6118, -7707, -970, 1557 }, new long[] { 7767, -1830, 6474, -2289, -7948, -4318, -1815, 3547, -9, 9022 }, new short[] { 9672, 1472, 967, 7892, 1722, -765, -8783, 3853, -2757, 240 }, new int[] { -8096, 836, 5759, -1662, 3594, 8531, -4894, 6054, 4573, 1123 }, new int[] { -2676, -1946, 4079, 3869, 9226, 4872, 4323, 6756, -7795, -9685 }, new double[] { 0.916642034387515, 0.945377832718835, 0.571163406861556, 0.0843000687120017, 0.954648673047614, 0.518034827205369, 0.803334560619357, 0.599629934225059, 0.0814180300018834, 0.674184473079715 }, new long[] { -8391, -7733, 5048, 8787, -345, -3068, 2409, -1861, 4114, -6480 }, new int[] { -9423, 2128, 8972, 8865, 1700, 1619, 7392, 7097, 8664, 6849 }, new short[] { 4910, -5541, 1649, -3070, 1907, -7003, 9412, 4073, -755, -6765 }, new int[] { -7534, 3112, 4426, -8908, -483, -4941, 3003, 5290, -5784, 2296 }, new short[] { -7535, -3814, -7357, 8684, 9737, -3795, 9933, 2556, -14, -2526 }, new int[] { 2967, 8967, 3326, -5221, 8572, 7148, 615, -1879, -3119, -3340 }, new double[] { 0.375887460250355, 0.916758568453024, 0.944718023270703, 0.544063365340262, 0.0526636871754488, 0.373174455190624, 0.885097438416024, 0.894148570436122, 0.467529376255129, 0.332162188055069 }, new double[] { 0.930765569643474, 0.105076913305128, 0.644133096395122, 0.318437519165891, 0.719328830819264, 0.436282866371927, 0.0908219232646851, 0.648244146559501, 0.359541809353764, 0.285208850766164 })]
		[TestCase(new short[] { -6937, -3142, -5910, -8228, 266, -6502, 9784, -351, -7481, 2366 }, new short[] { 4441, -5115, -1588, 7555, -5220, -5871, -2709, 1760, 7631, 2274 }, new long[] { -1497, -7948, -6793, -6657, -1141, 866, -3913, -3041, 391, -152 }, new short[] { 5332, 7649, -9069, -8822, -6402, -9338, 4245, 7122, -9384, 7555 }, new int[] { -2321, -1946, 5364, 6983, 2200, 3731, 3690, 5325, -8409, 258 }, new int[] { -8564, 55, 5332, 4915, 7201, -8988, -6348, -9252, 2912, 9399 }, new double[] { 0.870529419216574, 0.641320784409214, 0.962840764300358, 0.633502743036255, 0.851698354283207, 0.83959258293714, 0.197692032529829, 0.361721248068717, 0.697965996664933, 0.205904303680129 }, new long[] { -117, 166, 1145, -9923, -5403, -9550, -3314, -3777, 1140, 5125 }, new int[] { 7174, 759, -4630, -9865, -1587, -4722, -7681, -3986, -6025, -7412 }, new short[] { 7008, 3498, -5788, -8784, -9852, 4851, -1203, -7303, 9948, 5408 }, new int[] { -222, -3543, -8632, 7471, -9622, 1267, 8909, 5257, 320, 6753 }, new short[] { 4324, 7428, -393, 7785, -7774, -3349, -2541, 9122, -5741, 1756 }, new int[] { 4474, 7939, -6739, 1372, -2891, 6382, -4043, -68, 9928, -256 }, new double[] { 0.582604978504872, 0.199506170674929, 0.313620687142769, 0.786592335806504, 0.267428650179612, 0.535960819356125, 0.469660971066757, 0.394835057386586, 0.987854922650314, 0.857213509202569 }, new double[] { 0.318349761105305, 0.352976044804312, 0.784659564860472, 0.361021885816484, 0.413102844922386, 0.97903845923908, 0.194660878830897, 0.321235955842415, 0.949490999313766, 0.674773124360839 })]
		[TestCase(new short[] { -2605, -326, 8436, -1806, -9064, 1837, -6803, -5, 363, -6005 }, new short[] { -4687, -1021, 5328, -9422, -4897, 334, 1156, 3873, 2437, 1505 }, new long[] { 7256, 9560, 9365, -2886, -4609, -2584, -7752, 6039, -6888, -2472 }, new short[] { 2489, 9530, 941, -3566, -7649, -8020, -4447, 8078, 4796, 3510 }, new int[] { -2476, 9397, 7532, 5762, 1832, 7387, 1730, 5116, -7880, 7926 }, new int[] { -1575, 19, 3986, -2515, 6237, -2166, 306, 1324, -7196, 3519 }, new double[] { 0.479515122007353, 0.35780637308853, 0.344196539532485, 0.141786045460862, 0.575198678101971, 0.289039070852585, 0.901875111228728, 0.444759367706608, 0.91133198231055, 0.156131695097374 }, new long[] { -5217, 3076, 9076, 8925, -6017, 7857, -7971, -6396, 5280, -1997 }, new int[] { 5683, -2869, 3920, -4816, 9102, -7528, -4455, -6542, 195, 4516 }, new short[] { 1671, 4227, 5276, -8721, -6078, -9631, 2514, 4697, -5739, -3948 }, new int[] { 9349, -7163, 6889, 8995, 3144, 5346, 942, 5059, -6497, 8378 }, new short[] { -4194, -3295, 6042, 4800, 7834, -7539, 3234, -8298, -6267, -966 }, new int[] { -9762, 4579, 8698, -6289, 1450, 554, 7799, 7798, 5005, -6384 }, new double[] { 0.267175769092131, 0.366514186545515, 0.967157551072146, 0.461490892088735, 0.432558533005676, 0.642434014772267, 0.512004798516633, 0.746240549136997, 0.60190082090064, 0.187795865436921 }, new double[] { 0.576420209173309, 0.524188547639264, 0.997757991774826, 0.590801336146333, 0.435562419442256, 0.248396958805806, 0.90924894805497, 0.0237736990786035, 0.172099180599721, 0.073040402528383 })]
		[TestCase(new short[] { -2867, 814, 965, 5225, -4184, -5229, -5863, 3179, -2454, -7408 }, new short[] { 7546, 3142, -9944, 9885, 3035, 8474, -2638, -3186, -3849, -5012 }, new long[] { 2219, 8309, -337, 9975, 7504, -247, 4624, -3116, 4998, -3517 }, new short[] { 2369, 7324, 4357, 3544, 6482, 4528, 6364, -5882, -6584, -6118 }, new int[] { -1287, 7059, -2620, -552, -3790, 8384, 429, -9930, 8779, 236 }, new int[] { 7606, 1371, 4325, 8454, -759, -1178, -8847, 988, 7720, 6061 }, new double[] { 0.507249307589256, 0.862616047199171, 0.909064498687659, 0.053153150274024, 0.511072336934075, 0.0111173875681671, 0.939254796104159, 0.325486523716471, 0.170176302627742, 0.925329400191703 }, new long[] { -7889, -6755, -6601, -7730, 6273, 5159, 931, -9783, 3767, 9118 }, new int[] { 9322, 4556, -1896, -5236, -1124, -9001, -7000, 5901, -5695, -2338 }, new short[] { 3377, -4623, -3603, -2646, 3735, 1460, 8877, -3683, 9224, -4013 }, new int[] { 9599, -6080, 6664, -9725, -1873, 4362, -2026, 2056, -7818, 4080 }, new short[] { 7889, -9063, 7220, 8600, 6737, 5587, -851, 3418, 2187, -776 }, new int[] { 7222, -7116, -7793, 5741, -4871, 6732, 6847, 6044, -1466, -5185 }, new double[] { 0.814062505873881, 0.230753518282787, 0.0494889817431052, 0.38906365977091, 0.975928253017333, 0.770217525200088, 0.894595807369145, 0.391508641835073, 0.831815846651707, 0.725634481164457 }, new double[] { 0.651209687651698, 0.547140179922404, 0.686059963277569, 0.511153168283009, 0.488548676710831, 0.622132615010316, 0.40776222776983, 0.389710826049424, 0.530720215072259, 0.90738926823595 })]
		[TestCase(new short[] { -7687, -4539, 4128, 1, -1236, 6717, -8285, -9076, 5144, 1392 }, new short[] { 7514, 1927, -6475, 7366, 7798, 3275, 9944, -560, 9082, -8665 }, new long[] { 7695, -8680, 6781, 7673, 6199, -3719, -838, 1982, -4028, 2685 }, new short[] { -1421, -946, -4568, 385, -7497, 821, 486, 987, 9017, -7198 }, new int[] { 3690, 6968, 2684, -4755, 6996, -8902, -2580, 6353, 2423, 6494 }, new int[] { 2496, 8714, -1288, -719, -9547, -9005, -1322, 6453, 3801, -7516 }, new double[] { 0.377818761569363, 0.486552472918552, 0.747592344762568, 0.12296842929114, 0.140715718800535, 0.423063746850502, 0.324839350918699, 0.65690757364822, 0.743281880739742, 0.348924298001884 }, new long[] { -7210, -1041, 421, 6281, -2356, -9271, -1366, 1538, -9322, 5102 }, new int[] { 8859, 2807, 9558, -524, -9810, -137, -9656, 6150, -66, -8490 }, new short[] { -7855, 4031, 7184, 6534, 5243, -6039, -7982, 225, -7569, -1463 }, new int[] { 4599, 4280, -8511, -4554, 3706, -6460, -1706, 2428, -8362, 9723 }, new short[] { 2359, 7138, 5776, 8698, -6377, 4748, 171, -4523, -7728, 2951 }, new int[] { -1881, 345, -6794, 3356, -5164, -1243, 1772, 3886, -8960, -6315 }, new double[] { 0.935502090926982, 0.920385723430843, 0.455470321912072, 0.607031893267777, 0.0251920730924197, 0.228982546939041, 0.565993179830719, 0.705722597290633, 0.788455792138565, 0.832499631136889 }, new double[] { 0.0784690757647478, 0.395716793553772, 0.725690723269103, 0.510471926774118, 0.457451819189569, 0.250235546031145, 0.912772928323957, 0.924330010509272, 0.645627846310673, 0.0247885692048765 })]
		public void Count(short[] a, short[] b, long[] c, short[] d, int[] e, int[] f, double[] g, long[] h, int[] i, short[] j, int[] k, short[] l, int[] m, double[] n, double[] val)
		{
			NKeyHash<short, short, long, short, int, int, double, long, int, short, int, short, int, double, double> nKeyHash = new NKeyHash<short, short, long, short, int, int, double, long, int, short, int, short, int, double, double>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0]), 9);

			nKeyHash = new NKeyHash<short, short, long, short, int, int, double, long, int, short, int, short, int, double, double>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0]), 9);

			nKeyHash = new NKeyHash<short, short, long, short, int, int, double, long, int, short, int, short, int, double, double>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0]), 9);

			nKeyHash = new NKeyHash<short, short, long, short, int, int, double, long, int, short, int, short, int, double, double>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[0],val[0]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[1],val[1]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[2],val[2]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[3],val[3]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[4],val[4]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[5],val[5]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[6],val[6]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[7],val[7]);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[8],val[8]);
			Assert.AreEqual(nKeyHash.Count(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0]), 9);
		}

		[TestCase(new long[] { 3951, -1970, -6363, 8194, 9041, -6570, 6056, -292, -4379, 1381 }, new double[] { 0.0102097615647175, 0.791610446195868, 0.649748305161366, 0.210393087570739, 0.991507830094317, 0.525061222503456, 0.664293122321504, 0.0487268185469912, 0.0271283150776887, 0.494793470248018 }, new short[] { -7830, 452, 9630, 1722, 6249, 3502, -6810, 3504, 819, -5115 }, new int[] { -2836, 6523, 6559, -804, 5196, 6974, 4618, -9707, 3869, 7066 }, new bool[] { true, false, false, true, false, false, true, false, false, true }, new short[] { 8479, 3431, 847, -1942, 8844, -6499, -1601, 1913, -8054, -4459 }, new int[] { -9759, -7446, 8886, -9262, -5780, -6319, 9270, -6199, -989, -7144 }, new int[] { 5881, 2994, -2895, -6523, 2165, 5334, -1882, -8463, 1508, -2170 }, new bool[] { true, true, true, true, false, true, false, false, true, true }, new short[] { -1422, -7293, 8345, -1669, 6826, 5177, -2053, -8401, 3876, 6533 }, new int[] { -850, 4281, 4911, 7924, 8565, -4513, -3672, -2627, 5891, -6489 }, new long[] { 5381, -3137, -9594, 4115, 118, -9024, -171, -7482, 4333, 488 }, new int[] { 8002, 768, 3449, 7312, 4277, 3176, 4647, 8773, -3351, 6986 }, new double[] { 0.369481950239037, 0.326001649874263, 0.382934383760641, 0.748767921584085, 0.9339679004317, 0.0569463270050224, 0.217650219899439, 0.739989976743232, 0.890221417830429, 0.0458437791307661 }, new bool[] { false, true, true, false, true, false, false, false, true, true })]
		[TestCase(new long[] { -4649, -4570, -2735, -6610, 8529, 8380, -9166, 7598, -6352, -4609 }, new double[] { 0.541930706492593, 0.377649259929382, 0.0361973103304381, 0.945223969847534, 0.80599794853758, 0.443083035965954, 0.96019001489514, 0.271453827280297, 0.771816610252399, 0.448992357798383 }, new short[] { 6620, 5027, -5286, 3416, -6914, 9697, 8156, -3390, -9001, 2562 }, new int[] { 875, 416, -9436, 795, 1637, -8038, 9255, -5729, 6444, -9701 }, new bool[] { false, false, true, true, true, true, true, true, true, false }, new short[] { -7488, 6871, -1205, -768, 9230, 321, -9282, 3846, -9694, 8831 }, new int[] { -9774, 4222, 6601, 1083, 4514, -9576, -3009, -71, -2733, 4158 }, new int[] { -394, 4933, -1015, 5137, -1326, -132, -6123, 2297, -6660, -6765 }, new bool[] { false, false, true, true, true, true, false, true, true, false }, new short[] { -8754, -4590, -6033, 7611, -9925, -3916, 151, -9930, 7898, -343 }, new int[] { 2860, -2347, -3559, 6560, 7847, -2422, -2111, 3656, -9440, -636 }, new long[] { -3554, -1581, 508, 7069, 6713, 5773, 8333, -6940, -8967, -9487 }, new int[] { 8799, 5658, 8363, -4049, 2914, -5803, 968, 1371, 5064, -7409 }, new double[] { 0.98578012221762, 0.190349503508932, 0.719917165916374, 0.684129573723362, 0.518655153698593, 0.723284637892286, 0.900502323126654, 0.966371365807192, 0.784726476196538, 0.123759501671307 }, new bool[] { false, false, true, false, true, true, true, false, false, false })]
		[TestCase(new long[] { -2250, -2906, 9035, 7387, 855, 7201, -712, -9508, -6352, 3651 }, new double[] { 0.830430230512484, 0.825811555062333, 0.929586012349271, 0.898427625605104, 0.482410265357425, 0.131928725695204, 0.700998498453292, 0.841279599276036, 0.334878005243315, 0.112430464994363 }, new short[] { 7763, 9006, -2635, 8555, 4395, 834, -5113, 6164, 1078, -9910 }, new int[] { -704, -5925, 473, 764, 4840, 2621, -5229, 7009, -7172, 3170 }, new bool[] { false, true, true, false, false, false, false, true, true, true }, new short[] { 8805, 8074, -9801, 8648, -3463, -1257, 9728, -9518, -7007, -9978 }, new int[] { 2315, 3122, -588, -6441, -5642, 2534, -3956, -2173, -6871, 7025 }, new int[] { 7867, 7009, 3998, 3526, 7069, -9754, -6673, -4677, 2689, -5202 }, new bool[] { false, true, false, true, false, true, false, true, false, false }, new short[] { 2892, -5709, 4017, -7193, -9144, 2055, -1892, 2123, 7684, 3331 }, new int[] { -6443, -8452, -323, 5525, 4363, -8202, -5922, -3328, -8419, -3708 }, new long[] { -4583, 4407, -2209, 8194, 8558, -9764, -490, 565, -7724, 3136 }, new int[] { -1341, 4219, -6401, 7028, -5866, 3578, -7007, 1192, 2671, -4985 }, new double[] { 0.606837209596689, 0.560122133959142, 0.381840854595341, 0.967927638426389, 0.0620500236107269, 0.995725956277794, 0.120233641062041, 0.404348219001828, 0.224089526210022, 0.974328231985834 }, new bool[] { false, true, true, true, false, true, true, true, false, false })]
		[TestCase(new long[] { -7453, 7540, -151, -5451, -5326, -663, 7948, 2646, 1392, -9213 }, new double[] { 0.940229056375208, 0.644203987738213, 0.699979631090527, 0.82825313127984, 0.707728223273404, 0.710688582952455, 0.338531502214508, 0.421577344379191, 0.847696530096092, 0.932237764788902 }, new short[] { 7829, -8576, -3915, -7211, -4005, 1453, -6023, -4340, 6346, -4351 }, new int[] { 7077, -2831, -3053, 2051, -7530, 4594, -8645, -6910, 4685, 1904 }, new bool[] { false, false, true, false, false, true, false, true, false, false }, new short[] { 1714, -1931, 8868, -4397, -7209, -8876, 1457, -2939, 8552, 3218 }, new int[] { -4639, 2289, 6299, -4254, -6292, 1635, -4061, -8050, 4096, 9558 }, new int[] { 2859, -6317, 3745, -4950, 6679, -1926, -5270, -7611, -7893, 1734 }, new bool[] { false, true, false, false, true, false, false, false, false, false }, new short[] { -6861, 4292, -5464, -8532, -3455, -325, 3456, 949, 9987, -954 }, new int[] { -1679, -8741, 9581, -5775, 3608, -1966, 4322, 3819, -1077, 4716 }, new long[] { 6393, -930, -5045, -3181, -5028, 5062, 414, -3577, 1811, 4696 }, new int[] { -6662, -5404, 2686, 2750, 6421, 8566, 9145, 2278, 8504, -2994 }, new double[] { 0.730778739662272, 0.688959178369939, 0.119968056734636, 0.653017327959192, 0.170716914893462, 0.349519967264272, 0.535741818852602, 0.882605949362091, 0.813501580065816, 0.294994155548045 }, new bool[] { true, true, true, true, false, true, false, true, true, true })]
		[TestCase(new long[] { 9259, -2964, 9136, -4707, -4290, -6273, -1429, -3168, -2198, 5040 }, new double[] { 0.444339143784875, 0.102181954822588, 0.765736659879674, 0.0958780362717239, 0.00507090287519195, 0.130765920100159, 0.333507045327456, 0.594702795890487, 0.170214949254978, 0.899049866897543 }, new short[] { -5650, 2761, 151, -4087, -9989, -1142, 2173, 8141, -2199, -7644 }, new int[] { -771, -8569, 5783, -2975, -2255, -2419, 4641, 7106, -2648, 9687 }, new bool[] { true, false, false, false, true, true, true, true, true, false }, new short[] { -2601, 7443, 4311, 8513, -2867, -3500, 6883, 3225, -4717, 6850 }, new int[] { 1552, 428, 9030, -4552, -4186, -2542, -3739, -1709, 4173, 2521 }, new int[] { -2026, -437, -5456, -6283, 9560, -9534, -7087, -1076, -1100, -2634 }, new bool[] { false, false, false, false, true, true, false, true, true, false }, new short[] { 696, -8582, 1825, 500, -1864, -2007, -5147, -5596, 5414, -443 }, new int[] { -3615, 874, 6329, -8077, 4361, 7834, 2901, 596, 8952, -3332 }, new long[] { -6412, -2039, -5672, 7915, -2842, -117, -3270, 3566, 490, 4029 }, new int[] { -9659, -1009, -1602, 2928, -8173, -3442, 7736, 4041, 5579, 1569 }, new double[] { 0.780640593627766, 0.925426781608456, 0.675387657561986, 0.967144815235932, 0.0490859276843657, 0.94095566307239, 0.266978593201832, 0.088886613998975, 0.555111448073346, 0.856062247350841 }, new bool[] { true, true, true, true, true, false, true, true, false, true })]
		[TestCase(new long[] { -8736, 1285, 3911, -8613, -783, 7392, -7522, -6597, -9902, -2195 }, new double[] { 0.00492287939643621, 0.94300348122744, 0.750801535672881, 0.369193169925917, 0.552710552025917, 0.253937651987159, 0.722649844699842, 0.249184274230704, 0.846733710657216, 0.416924203940166 }, new short[] { -5456, -5048, -7534, 3369, 5147, -6180, 674, 5171, 5270, 9088 }, new int[] { -532, -6171, 699, 7326, 306, -5671, -5403, 2121, 126, -6411 }, new bool[] { true, false, false, false, true, false, false, true, false, true }, new short[] { -1717, 2105, 6973, 5003, 3709, 6311, -1179, -9456, -3761, -4602 }, new int[] { -3280, -2695, -1868, -8992, 8335, 6270, -1838, 7687, 7076, -3273 }, new int[] { -9516, -7668, 4856, 3346, 1995, -7393, -6729, 9166, 6346, 5126 }, new bool[] { false, true, true, false, true, true, false, true, false, true }, new short[] { 5506, -5945, -4115, -5270, 6868, -961, 3806, -9324, -5038, -9247 }, new int[] { 1860, -6182, 3854, 5444, 2096, -4048, 7248, -6371, -6990, 1103 }, new long[] { 3042, -346, -5803, 1111, -6915, -3021, 4303, -4559, 199, -9024 }, new int[] { -582, 2466, 4069, -6915, 1219, 6427, 6446, 127, 6477, -7041 }, new double[] { 0.439933558665185, 0.129750109338085, 0.71032123486992, 0.779743391452238, 0.163300626521604, 0.924866361042888, 0.294345614637409, 0.877807788493954, 0.529739349861508, 0.242801373471879 }, new bool[] { false, false, true, true, false, false, true, true, false, false })]
		[TestCase(new long[] { 4733, -1632, 475, -6013, 1334, 9393, -253, 771, -5774, 5667 }, new double[] { 0.475221061834703, 0.356049626765796, 0.357512348032329, 0.00251443917048836, 0.11526362696442, 0.522373114955785, 0.772338727383101, 0.430042443065924, 0.392263527676586, 0.229317166949304 }, new short[] { -8908, 6746, 4844, -4656, -9137, -3806, 9779, -8443, -7867, -4634 }, new int[] { 6569, -8325, -1517, -3412, -1775, -9567, 2119, 220, -5738, -6127 }, new bool[] { false, true, true, true, true, true, true, true, true, true }, new short[] { 407, 1257, -3072, 7058, -1199, 7985, 3522, -4867, -6875, -4857 }, new int[] { 9613, -1809, -1360, 8859, 9096, -2169, 8637, -9435, 1826, -8125 }, new int[] { 8327, -4773, -5659, -6025, 5834, -4024, -6582, 9917, -8, -2129 }, new bool[] { true, false, true, true, true, false, true, true, true, true }, new short[] { -3090, -3012, -2902, 9118, -5741, -9438, -3523, 4470, 5828, -2478 }, new int[] { 4352, 5510, -9189, -1664, 2176, -4818, -3082, -7045, -8775, -7174 }, new long[] { 4569, 3603, 5140, 5253, 5023, 2469, 6842, 7010, -6097, 3784 }, new int[] { 3083, -2784, -7222, -8409, 4964, 1340, 8128, -4778, 9714, 5273 }, new double[] { 0.974928222119309, 0.447286538522358, 0.204464865012311, 0.123516497259734, 0.675827626453632, 0.730324017224053, 0.316721280252897, 0.150600128411595, 0.97257952251126, 0.488854308374624 }, new bool[] { true, true, true, true, true, true, true, true, false, true })]
		[TestCase(new long[] { -6281, -534, 569, -7954, 4437, -2861, 2734, 9219, 3370, -9163 }, new double[] { 0.352580397554012, 0.0847962708607299, 0.161905405187004, 0.297488226693817, 0.166324745009804, 0.281214497183084, 0.475746221596257, 0.633513236247708, 0.0868673124755115, 0.020861955834954 }, new short[] { -3863, 3830, 7558, 4124, 5387, -8707, 7015, -2184, -4077, -8339 }, new int[] { 9492, -3713, -8873, -2071, 1555, 33, 8375, -7954, -1966, -3621 }, new bool[] { false, false, false, true, false, true, false, false, true, true }, new short[] { -6209, 9175, 105, -6321, -4348, -112, 1905, 6443, -3343, 3145 }, new int[] { 122, -5080, 3297, 1710, -8657, -9234, -9428, 5308, 4393, 3292 }, new int[] { -2751, -2529, -5362, 5358, 8544, 9020, -5810, 8943, 1399, 8687 }, new bool[] { true, true, true, true, true, false, true, true, false, false }, new short[] { 8127, -8067, 5388, 4886, 6255, 6951, 3815, 7930, 7273, -8038 }, new int[] { 6129, 3244, -144, 8341, -7204, 6319, 4538, 4746, -4866, -3369 }, new long[] { -4301, 2961, -4954, -2032, -9589, 7355, -1260, 7418, 3840, -8974 }, new int[] { -5415, -6876, 3031, 2724, 5164, -4683, 2080, -249, 9101, -8406 }, new double[] { 0.260299729770189, 0.312911688030191, 0.0835043457725571, 0.4719359238967, 0.127911358199972, 0.974605011276251, 0.14552336891439, 0.891911704042885, 0.654201513460931, 0.0775009487185166 }, new bool[] { false, false, true, true, true, false, true, false, true, true })]
		[TestCase(new long[] { -1786, 6395, -5908, 6248, 7375, 3007, -9786, 7130, -6822, 7478 }, new double[] { 0.211956336261684, 0.239419579617409, 0.782197407811041, 0.177010537207597, 0.0711878571059498, 0.971976381713513, 0.564571898693485, 0.780327928150225, 0.270469030025634, 0.0458517945585082 }, new short[] { 4444, 900, -5664, 2290, 5246, -6850, 807, 7384, 6752, -1 }, new int[] { -1570, -5340, 5272, -9796, 3378, -1190, -7831, -4578, 2061, -449 }, new bool[] { true, false, true, true, true, false, false, false, true, true }, new short[] { 3874, -8718, -7987, 3560, -5544, 7312, 2061, 1799, -8996, 4226 }, new int[] { -7799, -7171, -9621, 3177, -949, 9578, -484, 5441, 161, 2614 }, new int[] { 7271, -4129, -6454, 5858, -8361, -1333, 6238, -1269, 4979, 4256 }, new bool[] { true, false, false, false, true, false, false, false, true, true }, new short[] { 6747, 367, -5580, 7833, -2648, 6451, -4598, -8515, -3445, 7730 }, new int[] { 1474, 348, 8612, -8389, 9258, -1995, 7734, -3846, 1922, 5788 }, new long[] { -8925, -6668, 6819, -3254, 6867, -9832, 9665, -9843, 7053, -8097 }, new int[] { 6931, -2197, 9693, 4094, 5865, -3095, -8547, -4289, -1491, -4813 }, new double[] { 0.163229160086824, 0.737795442686321, 0.108832754245416, 0.86242418729813, 0.139124223095888, 0.350494631263658, 0.170981319235163, 0.0775962025288475, 0.0480993460156486, 0.405960222895239 }, new bool[] { false, true, false, true, true, true, true, true, false, false })]
		[TestCase(new long[] { 6784, -4754, -5570, -5347, -9200, -6327, 653, -5480, -4256, 2355 }, new double[] { 0.327646854020491, 0.601301304810355, 0.882278430686462, 0.336857199825746, 0.626226840832376, 0.315872239561692, 0.0577144846588906, 0.978602698528488, 0.198145463223637, 0.492938361825858 }, new short[] { 6746, 8113, 9193, -1064, 2488, -9560, 8012, 9736, 9101, -7549 }, new int[] { 3357, -6221, -5255, -8675, -1599, 8018, 326, 7524, 6449, 9109 }, new bool[] { true, true, true, false, false, true, true, false, false, false }, new short[] { 2262, 3974, 3710, 1107, 436, 8669, -3948, 5493, 2162, -9639 }, new int[] { -4340, 916, -4582, -6706, 8996, -7224, -2717, 6321, 8335, 4505 }, new int[] { 5990, -6369, -6877, -5147, 3502, 7845, -7693, 587, -2631, 5101 }, new bool[] { false, true, true, true, true, true, true, true, true, false }, new short[] { 1967, 4831, -4637, 6089, 3451, -4560, 3484, 2515, -391, 8790 }, new int[] { 104, -7472, -5283, 2927, 2684, -1366, 852, -1141, 7603, 2590 }, new long[] { 6364, 5463, -1874, 7059, 8768, 698, 8612, 4989, 3105, 9614 }, new int[] { 2706, 3645, -4564, -1393, -7461, -8840, 8266, -2967, 1400, -1936 }, new double[] { 0.218078939345702, 0.489476309385838, 0.0489328620251887, 0.428852570908541, 0.24989299022122, 0.95320203898158, 0.512230179045457, 0.968797807101532, 0.887089873145842, 0.0776920328278523 }, new bool[] { false, false, true, true, true, true, false, false, true, false })]
		public void Any(long[] a, double[] b, short[] c, int[] d, bool[] e, short[] f, int[] g, int[] h, bool[] i, short[] j, int[] k, long[] l, int[] m, double[] n, bool[] val)
		{
			NKeyHash<long, double, short, int, bool, short, int, int, bool, short, int, long, int, double, bool> nKeyHash = new NKeyHash<long, double, short, int, bool, short, int, int, bool, short, int, long, int, double, bool>(UnderlyingHashType.Dictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],n[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],n[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],n[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],n[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],n[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],n[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],n[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],n[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<long, double, short, int, bool, short, int, int, bool, short, int, long, int, double, bool>(UnderlyingHashType.ConcurrentDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],n[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],n[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],n[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],n[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],n[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],n[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],n[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],n[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<long, double, short, int, bool, short, int, int, bool, short, int, long, int, double, bool>(UnderlyingHashType.SortedDictionary);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],n[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],n[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],n[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],n[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],n[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],n[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],n[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],n[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());

			nKeyHash = new NKeyHash<long, double, short, int, bool, short, int, int, bool, short, int, long, int, double, bool>(UnderlyingHashType.HashTable);
			Assert.IsFalse(nKeyHash.Any());
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],n[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],n[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],n[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],n[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],n[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],n[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],n[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],n[8],val[8]);
			Assert.IsTrue(nKeyHash.Any());
			nKeyHash.Clear();
			Assert.IsFalse(nKeyHash.Any());
		}

		[TestCase(new int[] { -3424, 4485, 9547, 2062, 9704, -9545, 9236, 7247, 1552, 1085 }, new double[] { 0.574847229092776, 0.880710735861543, 0.356925721912145, 0.762062875443167, 0.301720352052581, 0.722587429789168, 0.498296773758855, 0.485553877188616, 0.432322735633851, 0.0618773326565872 }, new double[] { 0.293358986868225, 0.51899115299759, 0.549263286194421, 0.124603011237738, 0.426971218281878, 0.0986145646770553, 0.706747378086088, 0.449299857695261, 0.310781099512606, 0.55941299980479 }, new int[] { -5290, -6247, -3508, 67, -3210, -7981, -2841, 6238, 7614, -7698 }, new int[] { -2410, -8753, -2142, 8906, 4587, 8843, -46, -9130, -5643, 7073 }, new double[] { 0.0199822592642076, 0.705486378961004, 0.440573431290953, 0.415167481366157, 0.118099975454668, 0.809785338961419, 0.175009928725199, 0.852823396144818, 0.176156988915129, 0.886645991302396 }, new double[] { 0.315929378995639, 0.512555159867068, 0.551634581085124, 0.0182075239802746, 0.318827599435499, 0.38725681295025, 0.556164969017806, 0.853573164834442, 0.422585401415166, 0.200820457749451 }, new double[] { 0.364676526451798, 0.686345634370272, 0.604769672548757, 0.317308793457834, 0.682427904420732, 0.231054714988477, 0.126126520394407, 0.603870628217175, 0.395200680659712, 0.484760182204079 }, new long[] { 2018, 3266, -5369, -858, 788, 599, 4939, 8186, -2294, 593 }, new long[] { 8516, 101, 2715, 9881, 5981, 7337, 213, -2506, 2531, -3156 }, new long[] { -2278, 2881, 2416, -9659, -219, -3326, -7984, -7533, 4654, 7740 }, new short[] { 3672, 1422, -847, 3827, -4285, 3051, -4378, -8107, -424, 5776 }, new double[] { 0.640239828098677, 0.646786683540226, 0.468320583211407, 0.892893266348584, 0.27493049217152, 0.859589019259247, 0.0505514838968178, 0.610631459211293, 0.518224230277456, 0.815533636051944 }, new int[] { 4407, 5028, 9545, -8938, -8024, 9136, -9149, -5708, 9359, -5883 }, new int[] { -1414, 2474, -6466, -35, 6919, -2904, -9049, 8887, 4168, -7069 })]
		[TestCase(new int[] { 1717, -1677, 7916, 6753, 4037, 4784, -6483, 4558, 4840, 2588 }, new double[] { 0.283085140997118, 0.490085247200953, 0.605040407555662, 0.917205940893482, 0.166660236272337, 0.932189406795515, 0.593833730832596, 0.404567552453171, 0.592682691566964, 0.328828954290985 }, new double[] { 0.6101089979569, 0.066467778788166, 0.126559887140319, 0.272982667793046, 0.359618426933707, 0.0164874810802226, 0.470147975008072, 0.970113262054563, 0.0468599498490151, 0.920179827101612 }, new int[] { 6241, -7876, 8042, -2564, -5406, -3913, 7111, -7207, -2976, -2810 }, new int[] { 5621, -3708, -549, -3228, 8453, 8782, -9624, -4810, -3368, 8276 }, new double[] { 0.760916934237311, 0.642897239254274, 0.35171465219544, 0.379616080028757, 0.536373638797725, 0.519393590055124, 0.289534978237718, 0.622897657390171, 0.478081971629561, 0.685418208448877 }, new double[] { 0.269111408511694, 0.205654742291968, 0.681081307903436, 0.821846820331107, 0.817331570581222, 0.176931000862704, 0.587898822309402, 0.233298814032832, 0.687533673684827, 0.86237007745652 }, new double[] { 0.0766003202072346, 0.454228559720436, 0.0534180789503353, 0.233227959942644, 0.547732733910779, 0.295557327240499, 0.593929305483554, 0.788000746997074, 0.350273693143518, 0.420457441089888 }, new long[] { 9954, -5785, 2771, -7338, -6814, -6614, 5088, 451, 6706, 4205 }, new long[] { -9703, -5345, 3230, 3314, -8192, 1508, 2669, 3013, 424, 4915 }, new long[] { -2974, 5707, 1437, -616, 6744, -3865, 1789, -7629, 6637, -5183 }, new short[] { 8508, 30, -4547, -8846, 3752, -8831, 1341, 961, 3251, 2961 }, new double[] { 0.42249151292373, 0.0653284774466085, 0.397930859307726, 0.977254996531296, 0.847614896878421, 0.843908891009124, 0.792705360237837, 0.387686813896376, 0.142884636830019, 0.972291255822541 }, new int[] { 3241, 8863, -4664, 2089, -8615, -5752, 2776, -6611, -4084, 7050 }, new int[] { 1594, 2718, 3813, 1890, 5695, 264, 9200, 2077, 9560, -9360 })]
		[TestCase(new int[] { -9831, -8291, 9761, 7461, -3533, -4280, -2250, 1892, 2430, 9865 }, new double[] { 0.513983014279037, 0.201792346407563, 0.975602055422776, 0.859592090295438, 0.578729347129692, 0.98222663206152, 0.234761053805594, 0.66812824488996, 0.988429252984202, 0.475280250643976 }, new double[] { 0.41958008772674, 0.397699395379843, 0.252292817110332, 0.810009409119379, 0.0683567542901061, 0.786538717237552, 0.374641478701793, 0.803379216139847, 0.192440603949335, 0.334393947540966 }, new int[] { 7676, -6223, -1807, -7780, 9277, 1533, 9101, -2126, -4375, 5664 }, new int[] { 6496, -9115, 956, -3950, -3227, -2440, 3206, 6621, -9682, 6051 }, new double[] { 0.278459895531861, 0.291939220061497, 0.615469415958724, 0.502808347578537, 0.612367034243591, 0.610653517586483, 0.833112277944159, 0.178098316387319, 0.804766232988223, 0.536747743625542 }, new double[] { 0.911292207386015, 0.584103049982387, 0.402203493473215, 0.287168163008601, 0.109493272430028, 0.325176322984126, 0.7921941307337, 0.864664540563088, 0.895653747439223, 0.00204747775664901 }, new double[] { 0.0270967050581689, 0.841110863648872, 0.386918986396361, 0.20516766151654, 0.65040010057874, 0.375408071733736, 0.84987233618734, 0.949855064949885, 0.47141790505099, 0.69040127270408 }, new long[] { -7475, 870, 5750, -2202, -8880, 1837, 1466, 8134, -28, -2934 }, new long[] { 4870, 5540, 1777, 4888, 7438, -5183, 2839, -4786, -6140, -9730 }, new long[] { 1715, 5913, 8707, -9723, 5509, -1252, 8099, -1793, 7047, -5260 }, new short[] { 5215, 7664, 4133, -7711, -1788, -2644, 5930, -9752, -5374, 351 }, new double[] { 0.751839047647938, 0.885404262638373, 0.366094059946991, 0.542368922169492, 0.258477886327765, 0.250065094442137, 0.252226906480373, 0.642457471528304, 0.333198277434892, 0.409623000495892 }, new int[] { 4668, 1784, 5137, -839, -7906, -3389, 2161, 5475, 2287, 2371 }, new int[] { 3737, -6738, -8911, -4767, 1849, 7205, -8592, -509, -3321, 84 })]
		[TestCase(new int[] { -1115, 2592, -9410, 3506, -4768, 4006, -1408, -2138, 5105, 508 }, new double[] { 0.185122125402615, 0.262562762136833, 0.077103477007292, 0.442785246503905, 0.503519413295909, 0.171567741395704, 0.12634662777481, 0.248677687369603, 0.00972503843238812, 0.0800579893775554 }, new double[] { 0.759640227891337, 0.0227640280606058, 0.3979888620777, 0.61264909087338, 0.830709094102825, 0.588803526753934, 0.831022641542844, 0.104482541840748, 0.949865278298904, 0.398165507893155 }, new int[] { -6405, 5553, -3828, 6578, 9306, -7922, 1195, -8368, -6070, -1914 }, new int[] { 8017, -5698, -9629, -8220, -1330, -1513, -8280, 2231, 5161, -1581 }, new double[] { 0.7339657506598, 0.8216735119101, 0.464793958451969, 0.25384375883911, 0.744583519056711, 0.421466942141516, 0.231629010397768, 0.416775694311026, 0.844644319193738, 0.672772606682392 }, new double[] { 0.869334446671109, 0.325109597912575, 0.443206960541758, 0.357131424060618, 0.345712065857701, 0.407414215806599, 0.954007038825195, 0.248128946520448, 0.477393216210135, 0.399697736557432 }, new double[] { 0.611779086576672, 0.0447894558519076, 0.0522510968392021, 0.605442204794587, 0.179148351857042, 0.544607057489737, 0.00427885819425753, 0.309053035131215, 0.179186196149879, 0.406389883908625 }, new long[] { 57, -5610, -3071, 578, 3283, -2838, -3741, -8904, -8311, 878 }, new long[] { 7443, -7139, -5261, 473, 698, 1515, 5435, 3226, 4863, -9478 }, new long[] { -593, 6755, -7315, -2831, 6182, 3783, 5387, 7186, -8505, -5999 }, new short[] { -1656, 8450, -5247, -1234, -6601, 2997, 9573, 8284, 3858, 9752 }, new double[] { 0.0945002646625509, 0.899295074352666, 0.163737935090316, 0.93346812805788, 0.527505070216723, 0.468766126068666, 0.807876603122743, 0.528597112991194, 0.0704938178278943, 0.603348312249104 }, new int[] { 5455, -3141, 1316, -6936, 8720, 3301, -8294, 9758, 4395, 9499 }, new int[] { 1772, -928, 9599, 7687, -7464, 8991, 8107, 5972, -2924, 7700 })]
		[TestCase(new int[] { 1941, 7150, 9367, 5110, 8630, 1420, 3480, -5984, 6617, -3191 }, new double[] { 0.881299691685149, 0.240825302079704, 0.788857935829488, 0.471347094732964, 0.427195613937078, 0.0742629715587306, 0.356746701224123, 0.0844519809281696, 0.502176722745493, 0.504832738314212 }, new double[] { 0.56468507115016, 0.990723092104645, 0.19450502479193, 0.7179082044018, 0.399053714423931, 0.640938067175885, 0.919278516862206, 0.279323385227156, 0.806731123852884, 0.577888379142568 }, new int[] { 1266, -9814, -6502, -6290, -9873, 8303, -2509, 6204, -5567, -2698 }, new int[] { 9819, 7688, -6857, -2412, -8124, -3043, 3293, 173, -855, -8949 }, new double[] { 0.592869989850032, 0.820971481418689, 0.296481694698558, 0.848920121718627, 0.320355136096643, 0.606357786621134, 0.663043600350173, 0.250513874576666, 0.356498364059487, 0.290610347078466 }, new double[] { 0.651738580154133, 0.394741777048792, 0.394003906470725, 0.25300091889361, 0.77704802610774, 0.872081506006458, 0.0659810491213487, 0.603404325248396, 0.465079661209639, 0.511963391449285 }, new double[] { 0.69975993814867, 0.546469505665111, 0.862862877949543, 0.137116107222213, 0.513829515089201, 0.68019699290404, 0.833616321363308, 0.815123154695669, 0.624184433661487, 0.0512610483221994 }, new long[] { 9523, -1787, 6441, 5084, 9699, 4846, 4254, -3481, 7301, -2001 }, new long[] { -4955, -7519, -924, 8618, 4266, 1925, -190, 8081, 2046, -5566 }, new long[] { -4363, -8773, -9127, 8904, -2945, -9071, 9161, -6812, -3297, 2802 }, new short[] { 5454, 6957, 2526, -3894, -3712, -5176, 1452, 2794, -4639, -9305 }, new double[] { 0.159345015026324, 0.74005691788162, 0.738305850763948, 0.0651700143074477, 0.259774769311666, 0.575770779315276, 0.0926906741655854, 0.931884122049382, 0.423794071853065, 0.917568068912983 }, new int[] { -6205, 8589, -5743, -1948, 5388, 8297, -2659, 7536, -1968, 8771 }, new int[] { 5684, 1067, 9815, -5500, 2543, -1914, -46, -7028, 2331, -556 })]
		[TestCase(new int[] { -9526, 7014, 2722, 1353, -8753, 835, -3539, 9567, 3709, 5538 }, new double[] { 0.953709810019336, 0.0262244814197647, 0.735571515623281, 0.417522537716442, 0.450445322063959, 0.843230995742246, 0.635131134947357, 0.223787271987548, 0.535787884395471, 0.399442672449836 }, new double[] { 0.874110273492574, 0.695788422923437, 0.238203818555085, 0.32936462449346, 0.250414264970652, 0.605974111522536, 0.749223393271316, 0.513365519472102, 0.438001832663082, 0.855506592828551 }, new int[] { -8436, 8882, -3693, 9031, 7878, -3220, -4131, 2902, -3194, -5445 }, new int[] { 1838, -2227, -6172, 2491, 9697, 5160, 6355, 1466, 5489, 5678 }, new double[] { 0.769137041535758, 0.273872445930667, 0.612753631366768, 0.217159541890565, 0.598082235827149, 0.327835695505066, 0.612533537956203, 0.306758697753194, 0.317242735213247, 0.456323138184996 }, new double[] { 0.792531305827448, 0.809628566172732, 0.540417954577328, 0.829974182336579, 0.69883225378526, 0.00956065161598877, 0.710942573710784, 0.783969953089938, 0.523578587231961, 0.111469857446602 }, new double[] { 0.54984384847332, 0.98999882442411, 0.883542352767448, 0.308093152152418, 0.807502888984747, 0.485510808176133, 0.504420293264287, 0.613604137028383, 0.344456529405181, 0.492376167556446 }, new long[] { 5762, -6481, 4776, 3080, -8271, 6084, -3371, -8036, -2929, 1322 }, new long[] { 4528, 9731, -3441, 7677, -1296, 5645, 6962, -2771, 8514, 9505 }, new long[] { -9057, -9322, -9004, 3260, -5317, 5582, -2193, -3906, -1806, -7747 }, new short[] { 6467, 9977, 9245, 6496, 3362, 2332, -8583, 7726, 4871, 7891 }, new double[] { 0.67816512457941, 0.612820207892368, 0.430450626383745, 0.957470332252546, 0.385027930785449, 0.563215398957588, 0.66210924911411, 0.999620571732344, 0.872929725736813, 0.0251916716923898 }, new int[] { 2746, -7138, 3756, -2617, -1094, 5086, -7475, -8482, -1600, -3854 }, new int[] { -1721, -9464, 3768, -5180, 4853, 4549, -9512, 60, -5683, 6370 })]
		[TestCase(new int[] { 4230, 9235, 2355, -9375, -4055, -1314, 2067, -8153, -4439, 3417 }, new double[] { 0.117028967997538, 0.390709521430875, 0.431730753477537, 0.384464981213429, 0.475242130213996, 0.680389056299063, 0.311092691640878, 0.593193082415123, 0.379585923803777, 0.913803125691508 }, new double[] { 0.490438892734441, 0.994912697465584, 0.466381998484201, 0.436373296862642, 0.480685116015694, 0.651430076757181, 0.92435449497977, 0.189502727328568, 0.21477747951391, 0.657515405052116 }, new int[] { 777, -6817, 5676, -8911, -3726, 3509, 504, 3132, -8560, -9778 }, new int[] { -6979, -9320, 5956, 4981, -6195, -9535, 1899, -3919, 5313, -8753 }, new double[] { 0.416419834092455, 0.431133198752596, 0.123437083849421, 0.301970240800628, 0.32810563423117, 0.716640463898257, 0.495446204438548, 0.181416019416142, 0.550488673406881, 0.6457522421357 }, new double[] { 0.509920820831284, 0.413876081078256, 0.877484587895444, 0.620481815943719, 0.131988820681343, 0.957942726536627, 0.606862316190667, 0.377345554706336, 0.0708264708848793, 0.799741035699724 }, new double[] { 0.155152026636131, 0.654429771776511, 0.521266315375113, 0.368580595761808, 0.762836645246873, 0.456520953428243, 0.197064559998486, 0.717288627623249, 0.246170930679036, 0.457486115143395 }, new long[] { -8870, 2406, -1523, -6949, -5177, -7844, -9286, -362, 4525, 1939 }, new long[] { -6398, -3123, -7875, -1476, 21, 4741, -6870, -6452, 2341, -5354 }, new long[] { -1673, -5646, -5335, 9318, 8142, 5239, 8196, 5096, 782, 7430 }, new short[] { 391, 5562, 8704, -8139, 1786, 7790, 9800, 4499, -2412, -9514 }, new double[] { 0.922293568925137, 0.124985351751086, 0.651065990166304, 0.473828424454587, 0.619686145624, 0.811331016389342, 0.548255525319025, 0.0950917904708031, 0.867496088551123, 0.0257462458804931 }, new int[] { -3997, -9605, -7995, -9720, -9176, 6774, -2256, -843, -5093, -417 }, new int[] { -6041, -4383, 8853, 7093, -8450, -1961, -1828, -9735, 6736, 2230 })]
		[TestCase(new int[] { 4939, -1371, 5959, 1857, -3800, -4172, 1331, 5186, -3074, -8082 }, new double[] { 0.213734536996919, 0.814775092906679, 0.887360399536491, 0.513387349673262, 0.571497078785439, 0.499877665424662, 0.677973499371658, 0.92133379770505, 0.0518531278017224, 0.750559416949078 }, new double[] { 0.502387555084372, 0.532246897244941, 0.479688991550211, 0.900280736340341, 0.82634386598428, 0.641500899401261, 0.18224198286526, 0.796371106429198, 0.396406281924064, 0.217788832363574 }, new int[] { -1944, 701, -4834, -4879, -4424, 7372, -5565, 146, 4078, 4995 }, new int[] { -4556, 2556, -7768, -7009, -4692, -2337, -2131, -1412, -4335, 1550 }, new double[] { 0.723923813888768, 0.487242123804634, 0.961318560392278, 0.0862886482320207, 0.10912989457563, 0.21476437953057, 0.951733455039437, 0.89769934019898, 0.766527782551259, 0.66846517132058 }, new double[] { 0.109109350065286, 0.770221643042854, 0.362939554435639, 0.128489755153884, 0.693065658534442, 0.678650699871895, 0.556531367616975, 0.63138176064537, 0.234652380568279, 0.702831923357598 }, new double[] { 0.278159503488876, 0.170661070463555, 0.217388577394834, 0.302055030270505, 0.478385123646997, 0.874553888977763, 0.420693259416471, 0.330187831693416, 0.634909764693542, 0.443229923231169 }, new long[] { -5038, 5057, 263, 6376, -122, 8309, 1475, -6560, -7062, -8719 }, new long[] { 8337, -3519, 4815, -9289, 2813, 39, -4701, 9660, -871, 1734 }, new long[] { 6530, 5240, -6105, 1607, -4011, 1065, -4602, 3184, 2157, -5307 }, new short[] { 5880, 2430, -4743, -3533, -1591, -2875, -4858, 881, 2692, 5550 }, new double[] { 0.10488542313915, 0.384576290559292, 0.484533016329879, 0.170681790993866, 0.785900222969195, 0.954140681752069, 0.429876424106712, 0.181908528405199, 0.661366282804574, 0.976432473387771 }, new int[] { 2192, -1247, 7474, -9035, 2332, -279, 1163, 8655, 389, 8811 }, new int[] { 2912, 8289, 1280, 8244, -4601, -4091, -8774, -1650, 2301, -4310 })]
		[TestCase(new int[] { -5101, 4415, -3030, 3577, -363, -1159, -4449, -9518, 5888, -3094 }, new double[] { 0.1233863193185, 0.0879450180046004, 0.997897247317199, 0.631471051197253, 0.624916228291074, 0.356441743372214, 0.747793292974957, 0.214600082586799, 0.706650511225057, 0.934378421834846 }, new double[] { 0.79804106140418, 0.324240921681859, 0.0246009184162137, 0.694022461629483, 0.131893262794192, 0.190383676528178, 0.820524738086632, 0.572260277612256, 0.900782321533553, 0.490514145926812 }, new int[] { 7857, -9751, 1336, -2461, 4630, 7776, -8215, -6101, 1326, -6506 }, new int[] { -5829, 683, -7232, -6514, 6343, 1154, 8331, 8650, -4252, 8268 }, new double[] { 0.547592784067426, 0.84662916364457, 0.710836275811697, 0.680705085248083, 0.486424299649161, 0.920663387012046, 0.696215443637322, 0.654416684366025, 0.546989551068744, 0.291451172107575 }, new double[] { 0.621481546490212, 0.705257215399881, 0.123239526116866, 0.303951512698062, 0.452332856344214, 0.110996682248542, 0.521119996682331, 0.620996325565966, 0.899942886503387, 0.736072813037817 }, new double[] { 0.267251512625837, 0.55292377646683, 0.648245438303913, 0.532009447706868, 0.725877794775124, 0.263880584046189, 0.185899160423269, 0.850368379079908, 0.876806505898389, 0.574178856133567 }, new long[] { -4523, 7758, -4301, 9745, 8857, -9073, -3968, 7721, 7808, 6216 }, new long[] { -6146, -1304, 2957, -4501, 1063, 64, -1781, 6687, 4437, 4123 }, new long[] { -9267, -4087, -9346, 1025, 2923, 9892, -6031, -6422, 9095, -5548 }, new short[] { 4694, 6916, 5551, 9455, -9645, 4670, -1592, -7280, -2779, -1878 }, new double[] { 0.809443320990281, 0.635000060608145, 0.730519703463893, 0.0890781088215663, 0.543444841421882, 0.832477966245486, 0.905043811027447, 0.373341966128602, 0.97884993067889, 0.222634383115282 }, new int[] { 7058, -2969, -7429, -6587, 751, 9562, 7105, 4671, -3177, 8964 }, new int[] { 6957, -7544, 8624, 3358, -8477, -3064, 3142, 3501, -4854, 6391 })]
		[TestCase(new int[] { -8341, -4499, -532, -3682, 7934, -1967, 1301, 8870, -9842, 6273 }, new double[] { 0.08962519657315, 0.825041759212055, 0.199976897425939, 0.732192907357678, 0.369584082797907, 0.383255314726036, 0.717378368469597, 0.607022946051798, 0.435226248779905, 0.0395009913665713 }, new double[] { 0.878230687639783, 0.6867333784172, 0.794796548688224, 0.412777796579887, 0.558152037932608, 0.686716787836848, 0.703707415006919, 0.062586796964792, 0.0129775577285223, 0.196663934363361 }, new int[] { -6493, -5399, -7677, -6814, -7204, 1558, 7562, 6251, -4523, -7279 }, new int[] { -1738, 8234, 4515, 547, 7171, -9541, 8454, -6017, -4032, 3856 }, new double[] { 0.629402538588924, 0.0501404218609167, 0.2398430217243, 0.21773048593557, 0.941391519709207, 0.396156585028468, 0.480209471881487, 0.0605823011419653, 0.7576970605914, 0.210059164655422 }, new double[] { 0.697886934363231, 0.502501673299122, 0.930581948221932, 0.811174921603489, 0.638413648884005, 0.859650656049908, 0.708931270385595, 0.0407491740960391, 0.592448487688065, 0.791630470562554 }, new double[] { 0.505106500585147, 0.904758770905788, 0.333211666128231, 0.299236151994782, 0.626418458123886, 0.966483571551034, 0.960952164587077, 0.26740641392181, 0.554150638894248, 0.535295250609189 }, new long[] { 5278, 92, 5284, -3596, 1345, -7495, 9801, 7966, -5642, 4871 }, new long[] { -8044, 6350, -8900, -8724, -1237, 8210, 9622, 8291, 7778, 9978 }, new long[] { -3721, 7639, 2132, 134, -6244, 4492, 4338, 8811, 1826, 9497 }, new short[] { -1295, -5743, 128, -5551, -1078, -6133, 4764, 2208, -5121, 264 }, new double[] { 0.869519137250967, 0.810551267494704, 0.822912970475346, 0.848860653046919, 0.693886330208688, 0.687539987586224, 0.84983623393338, 0.269459550860086, 0.861132989572889, 0.715837598180323 }, new int[] { 9705, -9072, -2431, 1103, -5572, 7638, 7958, -4849, -7351, 6851 }, new int[] { -1834, -9008, -3858, -5140, -3831, 7698, -3776, 6649, 2352, -5103 })]
		public void Forloop(int[] a, double[] b, double[] c, int[] d, int[] e, double[] f, double[] g, double[] h, long[] i, long[] j, long[] k, short[] l, double[] m, int[] n, int[] val)
		{
			bool[] found = new bool[9];
			bool allFound = false;
			NKeyHash<int, double, double, int, int, double, double, double, long, long, long, short, double, int, int> nKeyHash = new NKeyHash<int, double, double, int, int, double, double, double, long, long, long, short, double, int, int>(UnderlyingHashType.Dictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],n[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],n[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],n[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],n[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],n[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],n[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],n[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],n[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, double, int, int, double, double, double, long, long, long, short, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Key13 == n[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Key13 == n[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Key13 == n[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Key13 == n[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Key13 == n[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Key13 == n[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Key13 == n[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Key11 == l[7] && mkv.Key12 == m[7] && mkv.Key13 == n[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Key11 == l[8] && mkv.Key12 == m[8] && mkv.Key13 == n[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],n[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],n[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, double, int, int, double, double, double, long, long, long, short, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Key13 == n[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Key13 == n[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Key13 == n[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Key13 == n[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Key13 == n[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Key13 == n[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Key13 == n[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<int, double, double, int, int, double, double, double, long, long, long, short, double, int, int>(UnderlyingHashType.ConcurrentDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],n[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],n[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],n[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],n[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],n[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],n[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],n[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],n[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, double, int, int, double, double, double, long, long, long, short, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Key13 == n[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Key13 == n[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Key13 == n[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Key13 == n[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Key13 == n[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Key13 == n[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Key13 == n[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Key11 == l[7] && mkv.Key12 == m[7] && mkv.Key13 == n[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Key11 == l[8] && mkv.Key12 == m[8] && mkv.Key13 == n[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],n[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],n[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, double, int, int, double, double, double, long, long, long, short, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Key13 == n[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Key13 == n[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Key13 == n[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Key13 == n[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Key13 == n[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Key13 == n[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Key13 == n[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<int, double, double, int, int, double, double, double, long, long, long, short, double, int, int>(UnderlyingHashType.SortedDictionary);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],n[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],n[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],n[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],n[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],n[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],n[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],n[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],n[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, double, int, int, double, double, double, long, long, long, short, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Key13 == n[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Key13 == n[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Key13 == n[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Key13 == n[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Key13 == n[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Key13 == n[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Key13 == n[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Key11 == l[7] && mkv.Key12 == m[7] && mkv.Key13 == n[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Key11 == l[8] && mkv.Key12 == m[8] && mkv.Key13 == n[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],n[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],n[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, double, int, int, double, double, double, long, long, long, short, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Key13 == n[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Key13 == n[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Key13 == n[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Key13 == n[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Key13 == n[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Key13 == n[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Key13 == n[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);

			nKeyHash = new NKeyHash<int, double, double, int, int, double, double, double, long, long, long, short, double, int, int>(UnderlyingHashType.HashTable);
			nKeyHash.Add(a[0],b[0],c[0],d[0],e[0],f[0],g[0],h[0],i[0],j[0],k[0],l[0],m[0],n[0],val[0]);
			nKeyHash.Add(a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],n[1],val[1]);
			nKeyHash.Add(a[2],b[2],c[2],d[2],e[2],f[2],g[2],h[2],i[2],j[2],k[2],l[2],m[2],n[2],val[2]);
			nKeyHash.Add(a[3],b[3],c[3],d[3],e[3],f[3],g[3],h[3],i[3],j[3],k[3],l[3],m[3],n[3],val[3]);
			nKeyHash.Add(a[4],b[4],c[4],d[4],e[4],f[4],g[4],h[4],i[4],j[4],k[4],l[4],m[4],n[4],val[4]);
			nKeyHash.Add(a[5],b[5],c[5],d[5],e[5],f[5],g[5],h[5],i[5],j[5],k[5],l[5],m[5],n[5],val[5]);
			nKeyHash.Add(a[6],b[6],c[6],d[6],e[6],f[6],g[6],h[6],i[6],j[6],k[6],l[6],m[6],n[6],val[6]);
			nKeyHash.Add(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],n[7],val[7]);
			nKeyHash.Add(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],n[8],val[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, double, int, int, double, double, double, long, long, long, short, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Key13 == n[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Key13 == n[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Key13 == n[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Key13 == n[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Key13 == n[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Key13 == n[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Key13 == n[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}

				if(found[7] == false  && mkv.Key0 == a[7] && mkv.Key1 == b[7] && mkv.Key2 == c[7] && mkv.Key3 == d[7] && mkv.Key4 == e[7] && mkv.Key5 == f[7] && mkv.Key6 == g[7] && mkv.Key7 == h[7] && mkv.Key8 == i[7] && mkv.Key9 == j[7] && mkv.Key10 == k[7] && mkv.Key11 == l[7] && mkv.Key12 == m[7] && mkv.Key13 == n[7] && mkv.Value == val[7])
				{
					found[7] = true;
					continue;
				}

				if(found[8] == false  && mkv.Key0 == a[8] && mkv.Key1 == b[8] && mkv.Key2 == c[8] && mkv.Key3 == d[8] && mkv.Key4 == e[8] && mkv.Key5 == f[8] && mkv.Key6 == g[8] && mkv.Key7 == h[8] && mkv.Key8 == i[8] && mkv.Key9 == j[8] && mkv.Key10 == k[8] && mkv.Key11 == l[8] && mkv.Key12 == m[8] && mkv.Key13 == n[8] && mkv.Value == val[8])
				{
					found[8] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6] &&found[7] &&found[8];
			Assert.IsTrue(allFound);
			
			nKeyHash.Remove(a[7],b[7],c[7],d[7],e[7],f[7],g[7],h[7],i[7],j[7],k[7],l[7],m[7],n[7]);
			nKeyHash.Remove(a[8],b[8],c[8],d[8],e[8],f[8],g[8],h[8],i[8],j[8],k[8],l[8],m[8],n[8]);
			
			found = new bool[9];
			
			foreach (NKeyValue<int, double, double, int, int, double, double, double, long, long, long, short, double, int, int> mkv in nKeyHash)
			{
				if(found[0] == false  && mkv.Key0 == a[0] && mkv.Key1 == b[0] && mkv.Key2 == c[0] && mkv.Key3 == d[0] && mkv.Key4 == e[0] && mkv.Key5 == f[0] && mkv.Key6 == g[0] && mkv.Key7 == h[0] && mkv.Key8 == i[0] && mkv.Key9 == j[0] && mkv.Key10 == k[0] && mkv.Key11 == l[0] && mkv.Key12 == m[0] && mkv.Key13 == n[0] && mkv.Value == val[0])
				{
					found[0] = true;
					continue;
				}

				if(found[1] == false  && mkv.Key0 == a[1] && mkv.Key1 == b[1] && mkv.Key2 == c[1] && mkv.Key3 == d[1] && mkv.Key4 == e[1] && mkv.Key5 == f[1] && mkv.Key6 == g[1] && mkv.Key7 == h[1] && mkv.Key8 == i[1] && mkv.Key9 == j[1] && mkv.Key10 == k[1] && mkv.Key11 == l[1] && mkv.Key12 == m[1] && mkv.Key13 == n[1] && mkv.Value == val[1])
				{
					found[1] = true;
					continue;
				}

				if(found[2] == false  && mkv.Key0 == a[2] && mkv.Key1 == b[2] && mkv.Key2 == c[2] && mkv.Key3 == d[2] && mkv.Key4 == e[2] && mkv.Key5 == f[2] && mkv.Key6 == g[2] && mkv.Key7 == h[2] && mkv.Key8 == i[2] && mkv.Key9 == j[2] && mkv.Key10 == k[2] && mkv.Key11 == l[2] && mkv.Key12 == m[2] && mkv.Key13 == n[2] && mkv.Value == val[2])
				{
					found[2] = true;
					continue;
				}

				if(found[3] == false  && mkv.Key0 == a[3] && mkv.Key1 == b[3] && mkv.Key2 == c[3] && mkv.Key3 == d[3] && mkv.Key4 == e[3] && mkv.Key5 == f[3] && mkv.Key6 == g[3] && mkv.Key7 == h[3] && mkv.Key8 == i[3] && mkv.Key9 == j[3] && mkv.Key10 == k[3] && mkv.Key11 == l[3] && mkv.Key12 == m[3] && mkv.Key13 == n[3] && mkv.Value == val[3])
				{
					found[3] = true;
					continue;
				}

				if(found[4] == false  && mkv.Key0 == a[4] && mkv.Key1 == b[4] && mkv.Key2 == c[4] && mkv.Key3 == d[4] && mkv.Key4 == e[4] && mkv.Key5 == f[4] && mkv.Key6 == g[4] && mkv.Key7 == h[4] && mkv.Key8 == i[4] && mkv.Key9 == j[4] && mkv.Key10 == k[4] && mkv.Key11 == l[4] && mkv.Key12 == m[4] && mkv.Key13 == n[4] && mkv.Value == val[4])
				{
					found[4] = true;
					continue;
				}

				if(found[5] == false  && mkv.Key0 == a[5] && mkv.Key1 == b[5] && mkv.Key2 == c[5] && mkv.Key3 == d[5] && mkv.Key4 == e[5] && mkv.Key5 == f[5] && mkv.Key6 == g[5] && mkv.Key7 == h[5] && mkv.Key8 == i[5] && mkv.Key9 == j[5] && mkv.Key10 == k[5] && mkv.Key11 == l[5] && mkv.Key12 == m[5] && mkv.Key13 == n[5] && mkv.Value == val[5])
				{
					found[5] = true;
					continue;
				}

				if(found[6] == false  && mkv.Key0 == a[6] && mkv.Key1 == b[6] && mkv.Key2 == c[6] && mkv.Key3 == d[6] && mkv.Key4 == e[6] && mkv.Key5 == f[6] && mkv.Key6 == g[6] && mkv.Key7 == h[6] && mkv.Key8 == i[6] && mkv.Key9 == j[6] && mkv.Key10 == k[6] && mkv.Key11 == l[6] && mkv.Key12 == m[6] && mkv.Key13 == n[6] && mkv.Value == val[6])
				{
					found[6] = true;
					continue;
				}


				throw new System.Exception("Too many found");
			}

			allFound = found[0] &&found[1] &&found[2] &&found[3] &&found[4] &&found[5] &&found[6];
			Assert.IsTrue(allFound);
		}
	}
}
